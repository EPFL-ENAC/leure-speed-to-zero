{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/leverInfos/lever_passenger_utilization-rate.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/leverInfos/lever_passenger_utilization-rate.vue","mtime":1707210098276},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234682968}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport LineChartLeverInfo from '../../charts/LineChartLeverInfo.vue';\n\nexport default {\n  name: 'lever_passenger_utilization-rate',\n  components: {\n    LineChartLeverInfo\n  },\n  data() {\n    return {\n      componentInstance: undefined\n    }\n  },\n  methods: {\n    loadChartComponent() {\n      let fileName = 'lever_passenger_utilization-rateChart.vue';\n\n      // import() only works with partial paths, it doesn't take a single variable, like import(filePath).\n      // import() is not a function!! It just looks like one\n      // This rest is a bit hacky, but well.\n      // The first import() looks if the file exists, if not a default component is loaded.\n      // If it exists, a second import needs to be started because <component> cannot work directly with the answer of the\n      // first succesful fetch. It can only work with a function like this (for dynamic imports):\n      // componentInstance = () => import(`../chartExceptions/${fileName}`)\n      import(`./chartExceptions/${fileName}`)\n      .then(() => {\n        this.componentInstance = () => import(`./chartExceptions/${fileName}`);\n       })\n       .catch(() => {\n         this.componentInstance = LineChartLeverInfo;\n       });\n    }\n  },\n  created() {\n    this.loadChartComponent();\n  }\n}\n",{"version":3,"sources":["lever_passenger_utilization-rate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"lever_passenger_utilization-rate.vue","sourceRoot":"src/components/leverInfos","sourcesContent":["<template>\n  <!--created by leverInfoParser.js script (tools folder)-->\n  <div id=\"lever-info\">\n    <div id=\"lever-info-header\">\n      <h3 id=\"lever-info-title\">Car own or hire</h3>\n    </div>\n    <div id=\"lever-info-content\">\n      <p>The passenger car utilization rate lever sets the average number of kilometers travelled by a vehicle every year.</p>\n      <component class=\"lever-info-chart\" v-if=\"componentInstance\" :is=\"componentInstance\"\n        chart-title=\"Car own or hire\" chartfilename=\"lever_passenger_utilization-rate.js\"\n      ></component>\n      <p>There are a number of ways to increase car utilization rate such as the transition from individual car ownership to car sharing models. Various factors influence the adoption of car sharing in the population, such as: localization/proximity of shared vehicles; vehicle availability; reservation system; costs of the services; and savings compared to owned vehicle.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are a number of ways to increase  car utilization rate such\nas  the transition from individual car\nownership to car sharing models. Various factors influence the adoption of car\nsharing in the population, such as:\n\nlocalization/proximity of shared\n     vehicles; vehicle\n     availability; reservation\n     system; costs of the services; and savings compared\n     to owned vehicle.\n\nThe amount of residential floor space is a very common reference value to\ndetermine the energy use intensity of buildings and the amount of raw materials\nneeded for its construction. Average per-capita residential floor area across\nthe EU28 Member states increased from 36 to 45.5 m2 between the years 2000 and\n2014. A decrease in the intensity (that is, less floor space per person) would\ntherefore yield reductions on the total amount of energy requirements for the\nheating of buildings. \n\nSource: https://ec.europa.eu/energy/sites/ener/files/DG_Energy_Infographic_heatingandcolling2016.jpg\n\n\n\n</p>\n      <p>For this lever, the model is able to translate vehicle-kilometers into number of vehicles. For the same vehicle distance, expressed in vehicle-kilometers, and the same lifetime, expressed in kilometers, a higher utilization rate will therefore be translated into a lower number of vehicles on the road. The vehicle utilization rate is an input of the model, and the interactions with influencing factors are not modelled. It is however useful to keep those factors in mind as they can be the object of specific policies to reach a given utilization rate.</p>\n      <div>\n        <ul><li class=\"lever-info-amibitions\"><div> Ambition Level 1</div><p>There is no behavioral change by 2050 in terms of cars ownership, which leads to a status-quo with 2015.</p></li><li class=\"lever-info-amibitions\"><div> Ambition Level 2</div><p>A moderate increase in car pooling and car sharing by 2050 leads to a 100% increase in car travel, per vehicle, compared to 2015.</p></li><li class=\"lever-info-amibitions\"><div> Ambition Level 3</div><p>Significant changes in terms of car pooling and car sharing, accompanied by an increase in the use of automated vehicles leads to 400% increase in car travel, per vehicle, compared to 2015.</p></li><li class=\"lever-info-amibitions\"><div> Ambition Level 4</div><p>Radical behavioral changes in terms of car ownership and the intensification of car sharing, car pooling and automation leads to a 900% increase by 2050 compared to 2015.</p></li></ul>\n      </div>\n      <p>\n        For more details on the definition of the ambition levels for this lever and on the context and\n        modelling assumptions, please refer to the <a href=\"http://www.european-calculator.eu/documentation/\" target=\"_blank\"><b>technical documentation</b></a>.\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport LineChartLeverInfo from '../../charts/LineChartLeverInfo.vue';\n\nexport default {\n  name: 'lever_passenger_utilization-rate',\n  components: {\n    LineChartLeverInfo\n  },\n  data() {\n    return {\n      componentInstance: undefined\n    }\n  },\n  methods: {\n    loadChartComponent() {\n      let fileName = 'lever_passenger_utilization-rateChart.vue';\n\n      // import() only works with partial paths, it doesn't take a single variable, like import(filePath).\n      // import() is not a function!! It just looks like one\n      // This rest is a bit hacky, but well.\n      // The first import() looks if the file exists, if not a default component is loaded.\n      // If it exists, a second import needs to be started because <component> cannot work directly with the answer of the\n      // first succesful fetch. It can only work with a function like this (for dynamic imports):\n      // componentInstance = () => import(`../chartExceptions/${fileName}`)\n      import(`./chartExceptions/${fileName}`)\n      .then(() => {\n        this.componentInstance = () => import(`./chartExceptions/${fileName}`);\n       })\n       .catch(() => {\n         this.componentInstance = LineChartLeverInfo;\n       });\n    }\n  },\n  created() {\n    this.loadChartComponent();\n  }\n}\n</script>\n\n<style>\n.lever-info-chart {\n  height: 400px;\n}\n</style>\n"]}]}