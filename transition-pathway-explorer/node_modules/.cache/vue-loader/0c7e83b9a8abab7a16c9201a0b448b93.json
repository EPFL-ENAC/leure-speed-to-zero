{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/GroupLever.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/GroupLever.vue","mtime":1707210098268},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234519986}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as dataService from '../dataService.js';\nimport * as inputsService from '../inputsService.js';\nimport * as helpers from '../helpers.js';\n\n\nexport default {\n  name: 'GroupLever',\n  props: ['groupid', 'range', 'country', 'appState', 'deactivated'],\n  data() {\n    return {\n      buttonFromEmptyToFilled: false\n    }\n  },\n  computed: {\n    barWidth: function() {\n      //depends on another computed property\n      return this.value*100/this.range[this.range.length-1];\n    },\n    partialWidth: function() {\n      let val = (this.value % 1).toFixed(1)*100;\n      return val === 0 ? 100 : val;\n    },\n    value: function() {\n      // triggers when this.country.values changes\n      let collected = [];\n      let group = inputsService.leverGroups[this.groupid];\n\n      group.levers.forEach((levId) => {\n        // this.country.values is reactive, because it is part of selected, which is on data of App\n        // whenever this value changes, this computed property is marked for update\n        collected.push(this.country.values[levId]);\n      });\n      if(collected.length) {\n        return Math.round( helpers.arrayAverage(collected) * 10) / 10;\n      }\n    }\n  },\n  methods: {\n    setIntValues(step) {\n      if(this.value === step) {\n        return;\n      } else {\n        inputsService.setGroupValue(this.country, this.groupid, step);\n        //Desktop only\n        if(!this.appState.isMobile) {\n          dataService.rewriteURL(dataService.updateURLParams());\n          dataService.debouncedFetch();\n        }\n\n        // Mobile only\n        if(this.appState.isMobile) {\n          // send availability request\n          dataService.availabilityRequest();\n        }\n      }\n    },\n    stepClickFunc(step) {\n      if(this.deactivated) {\n        return;\n      }\n      if(this.appState.noDecimalLevers) {\n        this.setIntValues(step);\n        return;\n      }\n\n      if(Math.ceil(this.value) !== step) {\n        if(this.value !== step) {\n          inputsService.setGroupValue(this.country, this.groupid, step);\n          //Desktop only\n          if(!this.appState.isMobile) {\n            dataService.rewriteURL(dataService.updateURLParams());\n            dataService.debouncedFetch();\n          }\n\n          // Mobile only\n          if(this.appState.isMobile) {\n            // send availability request\n            dataService.availabilityRequest();\n          }\n        }\n      } else {\n        let val = Math.round( (this.value-0.1) * 10) / 10;\n        val = val <= 1 ? 1 : val;\n        if(this.value !== val) {\n          inputsService.setGroupValue(this.country, this.groupid, val);\n          //Desktop only\n          if(!this.appState.isMobile) {\n            dataService.rewriteURL(dataService.updateURLParams());\n            dataService.debouncedFetch();\n          }\n\n          // Mobile only\n          if(this.appState.isMobile) {\n            // send availability request\n            dataService.availabilityRequest();\n          }\n        }\n      }\n    }\n  },\n  watch: {\n    //value is a computed property for GroupLevers\n    value: function(newVal, oldVal) {\n\n      if(Math.floor(newVal) > Math.floor(oldVal)) {\n        // triggers for oldVal = 1.5, newVal = 2.1\n        // doesn't trigger for oldVal = 1.5, newVal = 1.9\n\n        this.buttonFromEmptyToFilled = true;\n\n        //nextTick() is not enough. To make sure the change is visible, use window.requestAnimationFrame()\n        window.requestAnimationFrame(() => {\n          window.requestAnimationFrame(() => {\n            this.buttonFromEmptyToFilled = false;\n          });\n        });\n\n      }\n    }\n\n  }\n}\n",{"version":3,"sources":["GroupLever.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA","file":"GroupLever.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"single-lever group-lever\" :class=\"{'deactivated': deactivated}\">\n\n    <div v-for=\"step in range\" class=\"single-lever-step\" :key=\"step\">\n\n      <div class=\"single-lever-step-button\"\n        :class=\"{\n          empty: Math.ceil(value) <= step,\n          filled: Math.ceil(value) > step,\n          notrans: buttonFromEmptyToFilled,\n        }\"\n        v-on:click=\"stepClickFunc(step)\"\n      >\n        <span v-if=\"(Math.ceil(value) === step)\"\n          class=\"single-lever-step-partial\" :style=\"{width: partialWidth + '%'}\"\n        >\n        </span>\n      </div>\n    </div>\n\n    <div v-if=\"!appState.isMobile\" class=\"single-lever-value\"><span>{{value}}</span></div>\n\n  </div>\n</template>\n\n<script>\nimport * as dataService from '../dataService.js';\nimport * as inputsService from '../inputsService.js';\nimport * as helpers from '../helpers.js';\n\n\nexport default {\n  name: 'GroupLever',\n  props: ['groupid', 'range', 'country', 'appState', 'deactivated'],\n  data() {\n    return {\n      buttonFromEmptyToFilled: false\n    }\n  },\n  computed: {\n    barWidth: function() {\n      //depends on another computed property\n      return this.value*100/this.range[this.range.length-1];\n    },\n    partialWidth: function() {\n      let val = (this.value % 1).toFixed(1)*100;\n      return val === 0 ? 100 : val;\n    },\n    value: function() {\n      // triggers when this.country.values changes\n      let collected = [];\n      let group = inputsService.leverGroups[this.groupid];\n\n      group.levers.forEach((levId) => {\n        // this.country.values is reactive, because it is part of selected, which is on data of App\n        // whenever this value changes, this computed property is marked for update\n        collected.push(this.country.values[levId]);\n      });\n      if(collected.length) {\n        return Math.round( helpers.arrayAverage(collected) * 10) / 10;\n      }\n    }\n  },\n  methods: {\n    setIntValues(step) {\n      if(this.value === step) {\n        return;\n      } else {\n        inputsService.setGroupValue(this.country, this.groupid, step);\n        //Desktop only\n        if(!this.appState.isMobile) {\n          dataService.rewriteURL(dataService.updateURLParams());\n          dataService.debouncedFetch();\n        }\n\n        // Mobile only\n        if(this.appState.isMobile) {\n          // send availability request\n          dataService.availabilityRequest();\n        }\n      }\n    },\n    stepClickFunc(step) {\n      if(this.deactivated) {\n        return;\n      }\n      if(this.appState.noDecimalLevers) {\n        this.setIntValues(step);\n        return;\n      }\n\n      if(Math.ceil(this.value) !== step) {\n        if(this.value !== step) {\n          inputsService.setGroupValue(this.country, this.groupid, step);\n          //Desktop only\n          if(!this.appState.isMobile) {\n            dataService.rewriteURL(dataService.updateURLParams());\n            dataService.debouncedFetch();\n          }\n\n          // Mobile only\n          if(this.appState.isMobile) {\n            // send availability request\n            dataService.availabilityRequest();\n          }\n        }\n      } else {\n        let val = Math.round( (this.value-0.1) * 10) / 10;\n        val = val <= 1 ? 1 : val;\n        if(this.value !== val) {\n          inputsService.setGroupValue(this.country, this.groupid, val);\n          //Desktop only\n          if(!this.appState.isMobile) {\n            dataService.rewriteURL(dataService.updateURLParams());\n            dataService.debouncedFetch();\n          }\n\n          // Mobile only\n          if(this.appState.isMobile) {\n            // send availability request\n            dataService.availabilityRequest();\n          }\n        }\n      }\n    }\n  },\n  watch: {\n    //value is a computed property for GroupLevers\n    value: function(newVal, oldVal) {\n\n      if(Math.floor(newVal) > Math.floor(oldVal)) {\n        // triggers for oldVal = 1.5, newVal = 2.1\n        // doesn't trigger for oldVal = 1.5, newVal = 1.9\n\n        this.buttonFromEmptyToFilled = true;\n\n        //nextTick() is not enough. To make sure the change is visible, use window.requestAnimationFrame()\n        window.requestAnimationFrame(() => {\n          window.requestAnimationFrame(() => {\n            this.buttonFromEmptyToFilled = false;\n          });\n        });\n\n      }\n    }\n\n  }\n}\n</script>\n\n<style>\n.group-lever .single-lever-step-partial::after {\n  background-color: #6d6e71;\n}\n.group-lever .single-lever-step-button {\n  border: 1px solid #6d6e71;\n  background-color: #6d6e71;\n}\n</style>\n"]}]}