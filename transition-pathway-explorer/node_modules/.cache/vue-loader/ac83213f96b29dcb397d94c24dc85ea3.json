{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/leverInfos/lever_biomass-hierarchy.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/leverInfos/lever_biomass-hierarchy.vue","mtime":1707210098273},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234519986}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport LineChartLeverInfo from '../../charts/LineChartLeverInfo.vue';\n\nexport default {\n  name: 'lever_biomass-hierarchy',\n  components: {\n    LineChartLeverInfo\n  },\n  data() {\n    return {\n      componentInstance: undefined\n    }\n  },\n  methods: {\n    loadChartComponent() {\n      let fileName = 'lever_biomass-hierarchyChart.vue';\n\n      // import() only works with partial paths, it doesn't take a single variable, like import(filePath).\n      // import() is not a function!! It just looks like one\n      // This rest is a bit hacky, but well.\n      // The first import() looks if the file exists, if not a default component is loaded.\n      // If it exists, a second import needs to be started because <component> cannot work directly with the answer of the\n      // first succesful fetch. It can only work with a function like this (for dynamic imports):\n      // componentInstance = () => import(`../chartExceptions/${fileName}`)\n      import(`./chartExceptions/${fileName}`)\n      .then(() => {\n        this.componentInstance = () => import(`./chartExceptions/${fileName}`);\n       })\n       .catch(() => {\n         this.componentInstance = LineChartLeverInfo;\n       });\n    }\n  },\n  created() {\n    this.loadChartComponent();\n  }\n}\n",{"version":3,"sources":["lever_biomass-hierarchy.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"lever_biomass-hierarchy.vue","sourceRoot":"src/components/leverInfos","sourcesContent":["<template>\n  <!--created by leverInfoParser.js script (tools folder)-->\n  <div id=\"lever-info\">\n    <div id=\"lever-info-header\">\n      <h3 id=\"lever-info-title\">Hierarchy for biomass end-uses</h3>\n    </div>\n    <div id=\"lever-info-content\">\n      <p>The lever sets the hierarchy regarding the agri-food industry byproducts and waste uses.</p>\n      <component class=\"lever-info-chart\" v-if=\"componentInstance\" :is=\"componentInstance\"\n        chart-title=\"Hierarchy for biomass end-uses\" chartfilename=\"lever_biomass-hierarchy.js\"\n      ></component>\n      <p>Following the European Union approach to waste management (Waste Framework Directive, 2008/98/EC), a hierarchy can be set for the use of the available biomass between different valorisation pathways. Prevention options include the reduction of waste, the redistribution to people or animals; Recycling options include use in compost, as fertilizer, and possibly anaerobic digestion; Recovery options mainly focus on energy recovery; and finally disposal options include incineration, landfill and sewer.</p>\n      <p>The lever drives the biomass towards possible markets (e.g. biofuel, livestock feedstuffs), and enables or disables food-crop based feedstock-use for non-food purposes. The lever follows the European food waste hierarchy, with the first prioritizing recovery options (e.g. combustion, bioenergy feedstock), while the last level focusing on prevention (pet food, livestock feed) and recycling options (fertilizer, compost).</p>\n      <div>\n        <ul><li class=\"lever-info-amibitions\"><div> Ambition Level A</div><p>There is no investment in advanced bioenergy technology, and recovery and disposal methods are prioritized (combustion, landfills) in the food waste management hierarchy.</p></li><li class=\"lever-info-amibitions\"><div> Ambition Level B</div><p>The allocation of biomass uses, and the deployment of advanced bioenergy follow historical trends.</p></li><li class=\"lever-info-amibitions\"><div> Ambition Level C</div><p>The allocation of biomass uses favours prevention (e.g. bio-sourced materials, animal feeds), and recycling (fertilizers, biogas and digestate). Food crop-based biofuels are limited, but dedicated energy crops are used whenever the potential of residues, agri-food, and wood industry cannot supply the bioenergy demand entirely.</p></li><li class=\"lever-info-amibitions\"><div> Ambition Level D</div><p>The allocation of biomass uses is in favour or prevention (e.g. bio-sourced materials, animal feeds), and recycling (fertilizers, biogas and digestate). Food crop-based biofuels and dedicated energy crops are not used, apart for residues, byproducts and wastes used as bioenergy feedstock, whenever the latter cannot be used as biomaterials or fertilizers.</p></li></ul>\n      </div>\n      <p>\n        For more details on the definition of the ambition levels for this lever and on the context and\n        modelling assumptions, please refer to the <a href=\"http://www.european-calculator.eu/documentation/\" target=\"_blank\"><b>technical documentation</b></a>.\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport LineChartLeverInfo from '../../charts/LineChartLeverInfo.vue';\n\nexport default {\n  name: 'lever_biomass-hierarchy',\n  components: {\n    LineChartLeverInfo\n  },\n  data() {\n    return {\n      componentInstance: undefined\n    }\n  },\n  methods: {\n    loadChartComponent() {\n      let fileName = 'lever_biomass-hierarchyChart.vue';\n\n      // import() only works with partial paths, it doesn't take a single variable, like import(filePath).\n      // import() is not a function!! It just looks like one\n      // This rest is a bit hacky, but well.\n      // The first import() looks if the file exists, if not a default component is loaded.\n      // If it exists, a second import needs to be started because <component> cannot work directly with the answer of the\n      // first succesful fetch. It can only work with a function like this (for dynamic imports):\n      // componentInstance = () => import(`../chartExceptions/${fileName}`)\n      import(`./chartExceptions/${fileName}`)\n      .then(() => {\n        this.componentInstance = () => import(`./chartExceptions/${fileName}`);\n       })\n       .catch(() => {\n         this.componentInstance = LineChartLeverInfo;\n       });\n    }\n  },\n  created() {\n    this.loadChartComponent();\n  }\n}\n</script>\n\n<style>\n.lever-info-chart {\n  height: 400px;\n}\n</style>\n"]}]}