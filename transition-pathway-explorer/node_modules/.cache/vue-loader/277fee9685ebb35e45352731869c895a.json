{"remainingRequest":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/src/lib/DropDown.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/src/lib/DropDown.vue","mtime":1707210098283},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234682968}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nexport default {\n  name: 'DropDown',\n  props: {\n    items: Array,\n    callback: Function,\n    title: String, // if not set, the selected item will be used as the title\n    nameProp: String, // should be set if items is an array of objects and not strings\n    selected: Number, // one index of items, can also be undefined!! Is that possible with that type definition?\n    headEmpty: Boolean,\n    reset: Boolean,\n    disabled: Boolean\n  },\n  data() {\n    return {\n      selectedIndex: typeof this.selected !== 'undefined' && this.items[parseInt(this.selected)] ? parseInt(this.selected) : undefined,\n      open: false,\n      xDir: undefined,\n      yDir: undefined\n    }\n  },\n  computed: {\n    getHeadContent() {\n\n      if(typeof this.selectedIndex !== 'undefined') {\n        return this.getItemName(this.selectedIndex);\n      } else {\n        if(this.title && !this.headEmpty) {\n          return this.title;\n        }\n        return ''; //default\n      }\n    }\n  },\n  methods: {\n    jumpToInput(event) {\n      if(this.disabled) {\n        return;\n      }\n      /*keyup is kind of a natural rate limiting, but keydown more consistent*/\n\n      let keyPressed = event.key;\n\n      // abort if no single character was pressed\n      if(keyPressed.length > 1) {\n        return;\n      }\n\n      // find index of first item that starts with this character, this means that the items should be sorted,\n      // but sorting items is not responsibility of this component, it should be done outside\n      let foundInd;\n      let itemWasFound = this.items.some((item, ind) => {\n        if(this.getItemName(ind)[0] === keyPressed) {//item is still a string!!\n          foundInd = ind;\n          return true;\n        }\n      });\n\n      // console.log('jumpToInput ', itemWasFound, foundInd);\n      if(itemWasFound && foundInd !== this.selectedIndex) {\n        this.selectItem(foundInd);\n        this.scrollToSelected();\n      }\n    },\n    toggleOpen() {\n      if(this.disabled) {\n        return;\n      }\n      this.open = !this.open;\n\n      if(!this.open) {\n        this.$refs.root.blur();\n        return;\n      }\n      window.requestAnimationFrame(() => {\n        window.requestAnimationFrame(() => {\n          setDirections();\n          this.scrollToSelected();\n        });\n      });\n\n      var setDirections = () => {\n\n        let titleBCR = this.$refs.head.getBoundingClientRect();\n\n        let itemsBCR = this.$refs.container.getBoundingClientRect(); //left, right, top, bottom are relative to the viewport!\n\n        let viewPortHeight = window.innerHeight; // inner height of the viewport!\n        let titleTop = titleBCR.top;\n        let titleBottom = titleBCR.bottom;\n        let itemsHeight = itemsBCR.height;\n\n        //check if space is available to the bottom, preferred default direction\n        if(titleTop  + itemsHeight <= viewPortHeight) {\n          this.yDir = 'down';\n        } else {\n\n          //theoretical itemsLeft if items are overlapping to the left:\n          let topValueIfItemsGoToTop = titleTop - itemsHeight;\n          let bottomValueIfItemsGoToBottom = titleBottom + itemsHeight;\n\n          //open in the direction where there is the most available space\n          if(topValueIfItemsGoToTop > bottomValueIfItemsGoToBottom - viewPortHeight) {\n            this.yDir = 'up';\n          } else {\n            this.yDir = 'down';\n          }\n        }\n      }\n    },\n    selectItem(ind) {\n      if(this.disabled) {\n        return;\n      }\n      if(ind >= 0 && this.items[ind]) {\n        this.selectedIndex = ind;\n        if(this.callback) {\n          this.callback(this.items[this.selectedIndex], ind);\n        }\n      }\n    },\n    prevItem() {\n      if(this.disabled) {\n        return;\n      }\n      if(typeof this.selectedIndex !== 'undefined') {\n        this.selectItem(this.selectedIndex-1);\n        this.scrollToSelected();\n      }\n    },\n    nextItem() {\n      if(this.disabled) {\n        return;\n      }\n      if(typeof this.selectedIndex === 'undefined') {\n        this.selectItem(0);\n        this.scrollToSelected();\n      } else {\n        this.selectItem(this.selectedIndex+1);\n        this.scrollToSelected();\n      }\n    },\n    getItemName(ind) {\n      if(this.nameProp && this.items[ind] && this.items[ind].hasOwnProperty(this.nameProp)) {\n        return this.items[ind][this.nameProp];\n      }\n      return this.items[ind];\n    },\n    scrollToSelected() {\n      let item = this.$refs.items[this.selectedIndex];\n      if(!item) {\n        return;\n      }\n\n      // the itemsHeight and itemsContHeight could also be cached, but well, there are no other expensive processes running in the background anyways\n      let itemBCR = item.getBoundingClientRect();\n      let itemsHeight = itemBCR.height; // all items have the same height\n\n      let itemTop = itemsHeight*(this.selectedIndex);\n      let itemBottom = itemsHeight*(this.selectedIndex+1);\n\n      let itemsCont = this.$refs.itemscontainer;\n      let itemsContHeight = itemsCont.getBoundingClientRect().height;\n\n      if(itemBottom < itemsCont.scrollTop) {\n        itemsCont.scrollTop = itemTop;\n      }\n      if(itemTop > itemsCont.scrollTop + itemsContHeight) {\n        itemsCont.scrollTop = itemBottom - itemsContHeight;\n      }\n      if(itemBottom > itemsCont.scrollTop + itemsContHeight) {\n        itemsCont.scrollTop = itemBottom-itemsContHeight;\n      }\n      if(itemTop < itemsCont.scrollTop) {\n        itemsCont.scrollTop = itemTop;\n      }\n\n    },\n    handleFocus() {\n    },\n    handleFocusOut() {\n      this.open = false;\n    }\n  },\n  watch: {\n    reset: function(newVal) {\n      if(newVal) {\n        this.selectedIndex = undefined;\n      }\n    },\n    selected: function(newVal) {\n      this.selectedIndex = newVal;\n    }\n  }\n}\n",{"version":3,"sources":["DropDown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DropDown.vue","sourceRoot":"src/lib","sourcesContent":["<template>\n  <div\n    class=\"drop-down\"\n    :class=\"{'dd-open': open===true, 'dd-disabled': disabled===true}\"\n    v-on:focus=\"handleFocus\"\n    v-on:focusout=\"handleFocusOut\"\n    v-on:keydown.enter=\"toggleOpen\"\n    v-on:click=\"toggleOpen\"\n    v-on:keydown.up.prevent=\"prevItem()\"\n    v-on:keydown.down.prevent=\"nextItem()\"\n    v-on:keydown=\"jumpToInput($event)\"\n    tabindex=\"0\"\n    ref=\"root\"\n  >\n    <div class=\"drop-down-head\" ref=\"head\">\n      <span>{{getHeadContent}}</span>\n\n      <div class=\"drop-down-icon\" :class=\"{'dd-open': open===true}\">\n\n        <svg\n           xmlns=\"http://www.w3.org/2000/svg\"\n           width=\"5.3032866mm\"\n           height=\"4.7023478mm\"\n           viewBox=\"0 0 5.3032866 4.7023478\"\n           version=\"1.1\">\n          <path\n            class=\"drop-down-icon-path\"\n            :class=\"{'dd-disabled': disabled===true}\"\n            shape-rendering=\"geometricPrecision\"\n            transform=\"matrix(0.99780887,0,0,1.0004305,5.3545276e-4,-0.00148827)\"\n            d=\"M 2.6516436,4.2935209 0.40883783,0.40886766 4.8944491,0.40886754 Z\"\n            style=\"opacity:1;vector-effect:none;fill:#5f5f5f;fill-opacity:1;stroke:#5f5f5f;stroke-width:0.81773525;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;paint-order:fill markers stroke\" />\n        </svg>\n      </div>\n\n    </div>\n    <div class=\"drop-down-inner-container\" ref=\"container\"\n      v-show=\"open\"\n      :class=\"{\n        'dd-open': open===true,\n        'dd-up': yDir==='up',\n        'dd-down': yDir==='down',\n      }\"\n    >\n      <div v-if=\"title && typeof selectedIndex !== 'undefined'\" class=\"drop-down-title\">{{this.title}}</div>\n      <div class=\"drop-down-items-container\" ref=\"itemscontainer\">\n        <div v-for=\"(item, ind) in items\" ref=\"items\" :key=\"ind\"\n          class=\"drop-down-item\"\n          :class=\"{'dd-selected': ind===selectedIndex}\"\n          v-on:click=\"selectItem(ind)\"\n        >\n          <span>{{getItemName(ind)}}</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  name: 'DropDown',\n  props: {\n    items: Array,\n    callback: Function,\n    title: String, // if not set, the selected item will be used as the title\n    nameProp: String, // should be set if items is an array of objects and not strings\n    selected: Number, // one index of items, can also be undefined!! Is that possible with that type definition?\n    headEmpty: Boolean,\n    reset: Boolean,\n    disabled: Boolean\n  },\n  data() {\n    return {\n      selectedIndex: typeof this.selected !== 'undefined' && this.items[parseInt(this.selected)] ? parseInt(this.selected) : undefined,\n      open: false,\n      xDir: undefined,\n      yDir: undefined\n    }\n  },\n  computed: {\n    getHeadContent() {\n\n      if(typeof this.selectedIndex !== 'undefined') {\n        return this.getItemName(this.selectedIndex);\n      } else {\n        if(this.title && !this.headEmpty) {\n          return this.title;\n        }\n        return ''; //default\n      }\n    }\n  },\n  methods: {\n    jumpToInput(event) {\n      if(this.disabled) {\n        return;\n      }\n      /*keyup is kind of a natural rate limiting, but keydown more consistent*/\n\n      let keyPressed = event.key;\n\n      // abort if no single character was pressed\n      if(keyPressed.length > 1) {\n        return;\n      }\n\n      // find index of first item that starts with this character, this means that the items should be sorted,\n      // but sorting items is not responsibility of this component, it should be done outside\n      let foundInd;\n      let itemWasFound = this.items.some((item, ind) => {\n        if(this.getItemName(ind)[0] === keyPressed) {//item is still a string!!\n          foundInd = ind;\n          return true;\n        }\n      });\n\n      // console.log('jumpToInput ', itemWasFound, foundInd);\n      if(itemWasFound && foundInd !== this.selectedIndex) {\n        this.selectItem(foundInd);\n        this.scrollToSelected();\n      }\n    },\n    toggleOpen() {\n      if(this.disabled) {\n        return;\n      }\n      this.open = !this.open;\n\n      if(!this.open) {\n        this.$refs.root.blur();\n        return;\n      }\n      window.requestAnimationFrame(() => {\n        window.requestAnimationFrame(() => {\n          setDirections();\n          this.scrollToSelected();\n        });\n      });\n\n      var setDirections = () => {\n\n        let titleBCR = this.$refs.head.getBoundingClientRect();\n\n        let itemsBCR = this.$refs.container.getBoundingClientRect(); //left, right, top, bottom are relative to the viewport!\n\n        let viewPortHeight = window.innerHeight; // inner height of the viewport!\n        let titleTop = titleBCR.top;\n        let titleBottom = titleBCR.bottom;\n        let itemsHeight = itemsBCR.height;\n\n        //check if space is available to the bottom, preferred default direction\n        if(titleTop  + itemsHeight <= viewPortHeight) {\n          this.yDir = 'down';\n        } else {\n\n          //theoretical itemsLeft if items are overlapping to the left:\n          let topValueIfItemsGoToTop = titleTop - itemsHeight;\n          let bottomValueIfItemsGoToBottom = titleBottom + itemsHeight;\n\n          //open in the direction where there is the most available space\n          if(topValueIfItemsGoToTop > bottomValueIfItemsGoToBottom - viewPortHeight) {\n            this.yDir = 'up';\n          } else {\n            this.yDir = 'down';\n          }\n        }\n      }\n    },\n    selectItem(ind) {\n      if(this.disabled) {\n        return;\n      }\n      if(ind >= 0 && this.items[ind]) {\n        this.selectedIndex = ind;\n        if(this.callback) {\n          this.callback(this.items[this.selectedIndex], ind);\n        }\n      }\n    },\n    prevItem() {\n      if(this.disabled) {\n        return;\n      }\n      if(typeof this.selectedIndex !== 'undefined') {\n        this.selectItem(this.selectedIndex-1);\n        this.scrollToSelected();\n      }\n    },\n    nextItem() {\n      if(this.disabled) {\n        return;\n      }\n      if(typeof this.selectedIndex === 'undefined') {\n        this.selectItem(0);\n        this.scrollToSelected();\n      } else {\n        this.selectItem(this.selectedIndex+1);\n        this.scrollToSelected();\n      }\n    },\n    getItemName(ind) {\n      if(this.nameProp && this.items[ind] && this.items[ind].hasOwnProperty(this.nameProp)) {\n        return this.items[ind][this.nameProp];\n      }\n      return this.items[ind];\n    },\n    scrollToSelected() {\n      let item = this.$refs.items[this.selectedIndex];\n      if(!item) {\n        return;\n      }\n\n      // the itemsHeight and itemsContHeight could also be cached, but well, there are no other expensive processes running in the background anyways\n      let itemBCR = item.getBoundingClientRect();\n      let itemsHeight = itemBCR.height; // all items have the same height\n\n      let itemTop = itemsHeight*(this.selectedIndex);\n      let itemBottom = itemsHeight*(this.selectedIndex+1);\n\n      let itemsCont = this.$refs.itemscontainer;\n      let itemsContHeight = itemsCont.getBoundingClientRect().height;\n\n      if(itemBottom < itemsCont.scrollTop) {\n        itemsCont.scrollTop = itemTop;\n      }\n      if(itemTop > itemsCont.scrollTop + itemsContHeight) {\n        itemsCont.scrollTop = itemBottom - itemsContHeight;\n      }\n      if(itemBottom > itemsCont.scrollTop + itemsContHeight) {\n        itemsCont.scrollTop = itemBottom-itemsContHeight;\n      }\n      if(itemTop < itemsCont.scrollTop) {\n        itemsCont.scrollTop = itemTop;\n      }\n\n    },\n    handleFocus() {\n    },\n    handleFocusOut() {\n      this.open = false;\n    }\n  },\n  watch: {\n    reset: function(newVal) {\n      if(newVal) {\n        this.selectedIndex = undefined;\n      }\n    },\n    selected: function(newVal) {\n      this.selectedIndex = newVal;\n    }\n  }\n}\n</script>\n\n<style>\n.drop-down {\n  position: relative;\n  display: inline-block;\n  -webkit-touch-callout: none; /* iOS Safari */\n    -webkit-user-select: none; /* Safari */\n     -khtml-user-select: none; /* Konqueror HTML */\n       -moz-user-select: none; /* Firefox */\n        -ms-user-select: none; /* Internet Explorer/Edge */\n            user-select: none; /* Non-prefixed version, currently\n                                  supported by Chrome and Opera */\n}\n.drop-down.dd-disabled {\n  opacity: 0.5;\n  font-style: italic;\n}\n.drop-down-head {\n  position: relative;\n  overflow: hidden;\n}\n.drop-down-hidden-items {\n  visibility: hidden;\n  height: 0px;\n}\n.drop-down-icon {\n  position: absolute;\n  height: 10px;\n  top: 50%;\n  transform: translateY(-50%);\n  right: -1px;\n}\n.drop-down-icon svg {\n  display: block;\n  height: 100%;\n}\n.drop-down-inner-container {\n  position: absolute;\n  min-width: 100%;\n  margin: 0px;\n  left: 0px;\n  background-color: white;\n}\n\n.drop-down-inner-container.dd-up { bottom: 100%;}\n.drop-down-inner-container.dd-down { top: 100%;}\n\n.drop-down-item {\n  white-space: nowrap;\n}\n\n.drop-down-item:hover {\n  background-color: lightgrey;\n}\n.drop-down-item.dd-selected {\n  background-color: grey;\n}\n\n.drop-down-items-container {\n  max-height: 250px;\n  overflow-y: auto;\n}\n\n</style>\n"]}]}