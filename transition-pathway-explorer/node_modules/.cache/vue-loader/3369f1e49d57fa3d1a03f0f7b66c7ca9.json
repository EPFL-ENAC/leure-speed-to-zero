{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/Outputs.vue?vue&type=template&id=65c52092&","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/Outputs.vue","mtime":1707210098268},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1707234520088},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234519986}],"contextDependencies":[],"result":["\n<div id=\"charts-container\" ref=\"container\">\n  <div id=\"charts-header\" class=\"noselect\">\n    <TabNavigation\n      :tabs=\"tabs\" :tab-index=\"appState.activeTab\" :callback=\"selectTab\"\n    />\n  </div>\n  <div v-if=\"tabWarnings.length\" id=\"warnings-container\">\n    <img id=\"warning-icon\" src=\"/img/warning-sharp.svg\" tabindex=\"1\"\n      v-on:click=\"toggleWarning\"\n      v-on:keyup.enter=\"toggleWarning\"\n    >\n    <PopUp id=\"warning-popup\" :is-open=\"warningOpen\" :closing-callback=\"closeWarning\" ref=\"popup\" exception-id=\"warning-icon\">\n      <div id=\"warning-content\">\n        <div v-for=\"warningId in tabWarnings\" class=\"warning\" :key=\"warningId\">\n          <div class=\"warning-description\">{{warningsInfos[warningId][warnings[warningId]]}}</div>\n          <div class=\"warning-levers-container\"\n            v-if=\"warningsInfos[warningId].levers && warningsInfos[warningId].levers.length\"\n          >\n            <div>Levers that have the biggest influence on this issue are highlighted in the levers table, they are:</div>\n            <ul class=\"warning-levers\">\n              <li v-for=\"leverid in warningsInfos[warningId].levers\" v-if=\"getLeverName(leverid)\" :key=\"leverid\">\n                {{getLeverName(leverid)}}\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </PopUp>\n  </div>\n\n  <div id=\"charts-subheader\">\n\n    <!--\n      The key is important, otherwise on a tab-change the dropdown doesn't fully update\n      The key should be the appState.activeTab, not the appState.activeSubtab,\n      because the subtab-selection-dropdown should remain the same element across all subtabs\n   -->\n    <DropDown class=\"dropdown-select\" :items=\"selTab.subtabs\" name-prop=\"title\" :key=\"appState.activeTab\"\n      :callback=\"selectSubTab2\" :selected=\"appState.activeSubtab\"\n    />\n\n    <!--\n        This dropdown depends on each subtab, so the key should be the appState.activeSubtab,\n        Without the '+z', vue complains about duplicate keys,\n        because the appState.activeTab (key for dropdown above) and the appState.activeSubtab\n        can take on the same integer values\n    -->\n    <DropDown v-if=\"selected.length > 1\" class=\"dropdown-select\" :items=\"zoomableCountries\" name-prop=\"name\"\n      :callback=\"setCountryZoom\" :selected=\"countryIndex\" :key=\"appState.activeSubtab+'z'\"\n      :disabled=\"subtab.countryZoomDisabled\"\n    />\n\n  </div>\n  <div id=\"charts-main\" :class=\"{'first-tab-opened':appState.activeTab===0}\">\n\n   <APIStatusDialog v-if=\"!appState.isMobile\" :app-state=\"appState\"/>\n   <APIStatusDialogMobile v-if=\"appState.isMobile\" :app-state=\"appState\"/>\n\n    <div id=\"output\">\n      <div id=\"missing-data\" v-if=\"missingOutputs.length && appState.showMissingOutputs\">\n        <h4>requested data not found:</h4>\n        <div v-for=\"item in missingOutputs\" :key=\"item\">\n          {{item}}\n        </div>\n      </div>\n      <div class=\"subtab-container\">\n        <!--\n          v-if=\"appState.userAction.indexOf('tabChange') < 0\" necessary, so component immediately disappears on a tab-change\n\n          :key=\"subtab.title\" is very important, because:\n          if two subtabs share the same component, and the user toggles between them,\n          the component only remounts when they have different keys\n\n          loading chart-component with :is, depending on tab/subtab\n          makes them load asynchronuously (lazy) on demand\n          Optional: show a loading-animation when tab data is being fetched\n        -->\n        <component v-bind:is=\"chartComponent\" v-if=\"appState.userAction.indexOf('tabChange') < 0\"\n          :outputs=\"outputs\" :subtab=\"subtab\" :chart-definitions=\"chartDefinitions[appState.activeTab]\"\n          :app-state=\"appState\"\n          :countrycode=\"selected[countryIndex].id\"\n          :key=\"subtab.title\"\n        ></component>\n      </div>\n    </div>\n  </div>\n</div>\n",null]}