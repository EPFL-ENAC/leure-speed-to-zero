{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/employment/ChangePerSector.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/employment/ChangePerSector.vue","mtime":1707210098278},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234519986}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport BarRangeChart from '../../../charts/BarRangeChart.vue';\n\nimport * as inputsService from '../../../inputsService.js';\nimport {ExamplePathways} from '../../../config/examplePathways.js';\n\nimport {EmploymentData} from './employmentData.js';\n\nexport default {\n  name: 'ChangePerSector',\n  components: {BarRangeChart},\n  props: ['subtab','outputs','chartDefinitions','countrycode','appState'],\n  data() {\n    return {\n      chart1Data: undefined,\n      isExamplePathway: this.appState.pathwayIndex > -1,\n      noData: undefined\n    }\n  },\n  methods: {\n    buildData() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n\n      let currentPathwayName = ExamplePathways[this.appState.pathwayIndex].title;\n\n      if(!EmploymentData[currentPathwayName]) {\n        this.noData = true;\n        return;\n      }\n\n      this.noData = false;\n\n      let data = [];\n      let categories = [];\n\n      currChart.variables.forEach((variable) => {\n\n        categories.push(variable.title);\n\n        let output = EmploymentData[currentPathwayName][variable.id];\n        let value = parseFloat(output[this.countrycode]);\n        data.push(\n          value < 0 ? [value,0] : [0,value]\n        );\n\n      });\n\n      // console.log(categories,data);\n\n      this.chart1Data = {\n        series: [{\n          data: data\n        }],\n        title: currChart.title,\n        unit: currChart.unit,\n        categories: categories\n      };\n    }\n  },\n  created() {\n    // inputsService.deactivateGroups(Object.keys(inputsService.leverGroups));\n    setTimeout(() => {\n      inputsService.deactivateGroups(Object.keys(inputsService.leverGroups));\n    },0);\n    // inputsService.deactivateCountryZoom();\n\n    if(this.isExamplePathway) {\n      this.buildData();\n    }\n  },\n  beforeDestroy() {\n    inputsService.activateAllGroups();\n  },\n  watch: {\n    'appState.pathwayIndex': function() {\n      this.isExamplePathway = this.appState.pathwayIndex > -1;\n      if(this.isExamplePathway) {\n        this.buildData();\n      }\n    },\n    // important, this component also lets you zoom into a country (dropwdown where the outputs are shown)\n    countrycode: function() {\n      this.isExamplePathway = this.appState.pathwayIndex > -1;\n      if(this.isExamplePathway) {\n        this.buildData();\n      }\n    }\n  }\n}\n",{"version":3,"sources":["ChangePerSector.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ChangePerSector.vue","sourceRoot":"src/components/tabs/employment","sourcesContent":["<template>\n  <div class=\"subtab-content\">\n    <BarRangeChart v-if=\"chart1Data && isExamplePathway && !noData\" :chart-data=\"chart1Data\"/>\n\n    <div v-if=\"chart1Data && isExamplePathway && !noData\" class=\"chart-info\">\n      <p>\n        Each sector is affected directly and indirectly by the transition. For instance, if individuals purchase less cars (group of levers “Key behaviours - Travel”), then the industrial production of vehicles decrease (direct effect).\n      </p>\n      <p>\n        But since the car production industry require materials (e.g., iron and steel, plastics, aluminium) as well as energy, the production of these sectors will also decrease (indirect effect).\n      </p>\n      <p>\n        This graph accounts for both effects. More details are available in the Employment module documentation, available here:<br>\n        <a href=\"http://www.european-calculator.eu/documentation\" target=\"_blank\" rel=\"noopener\"><b>http://www.european-calculator.eu/documentation</b></a>\n      </p>\n    </div>\n\n    <div v-if=\"!isExamplePathway\" class=\"subtab-error\">\n      <p>\n        Data for this tab is only available for example pathways.<br>\n        Please choose an example pathway.\n      </p>\n    </div>\n    <div v-if=\"isExamplePathway && noData\" class=\"subtab-error\">\n      <p>\n        There is no data yet available for this example pathway.\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport BarRangeChart from '../../../charts/BarRangeChart.vue';\n\nimport * as inputsService from '../../../inputsService.js';\nimport {ExamplePathways} from '../../../config/examplePathways.js';\n\nimport {EmploymentData} from './employmentData.js';\n\nexport default {\n  name: 'ChangePerSector',\n  components: {BarRangeChart},\n  props: ['subtab','outputs','chartDefinitions','countrycode','appState'],\n  data() {\n    return {\n      chart1Data: undefined,\n      isExamplePathway: this.appState.pathwayIndex > -1,\n      noData: undefined\n    }\n  },\n  methods: {\n    buildData() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n\n      let currentPathwayName = ExamplePathways[this.appState.pathwayIndex].title;\n\n      if(!EmploymentData[currentPathwayName]) {\n        this.noData = true;\n        return;\n      }\n\n      this.noData = false;\n\n      let data = [];\n      let categories = [];\n\n      currChart.variables.forEach((variable) => {\n\n        categories.push(variable.title);\n\n        let output = EmploymentData[currentPathwayName][variable.id];\n        let value = parseFloat(output[this.countrycode]);\n        data.push(\n          value < 0 ? [value,0] : [0,value]\n        );\n\n      });\n\n      // console.log(categories,data);\n\n      this.chart1Data = {\n        series: [{\n          data: data\n        }],\n        title: currChart.title,\n        unit: currChart.unit,\n        categories: categories\n      };\n    }\n  },\n  created() {\n    // inputsService.deactivateGroups(Object.keys(inputsService.leverGroups));\n    setTimeout(() => {\n      inputsService.deactivateGroups(Object.keys(inputsService.leverGroups));\n    },0);\n    // inputsService.deactivateCountryZoom();\n\n    if(this.isExamplePathway) {\n      this.buildData();\n    }\n  },\n  beforeDestroy() {\n    inputsService.activateAllGroups();\n  },\n  watch: {\n    'appState.pathwayIndex': function() {\n      this.isExamplePathway = this.appState.pathwayIndex > -1;\n      if(this.isExamplePathway) {\n        this.buildData();\n      }\n    },\n    // important, this component also lets you zoom into a country (dropwdown where the outputs are shown)\n    countrycode: function() {\n      this.isExamplePathway = this.appState.pathwayIndex > -1;\n      if(this.isExamplePathway) {\n        this.buildData();\n      }\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n</style>\n"]}]}