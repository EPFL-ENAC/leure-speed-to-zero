{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/OneChart.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/OneChart.vue","mtime":1707210098277},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234682968}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as outputsService from '../../outputsService.js';\nimport {buildChartData} from '../../chartSeriesBuilders.js';\n\nexport default {\n  name: 'OneChart',\n  components: {\n    'StackedAreaChart': () => import('../../charts/StackedAreaChart.vue'),\n    'LineChart': () => import('../../charts/LineChart.vue'),\n    'StackedAreaChart100Percent': () => import('../../charts/StackedAreaChart100Percent.vue')\n  },\n  props: ['subtab','outputs','chartDefinitions','countrycode','appState'],\n  data() {\n    return {\n      chart1Data: {},\n      chartComponent: undefined,\n      infoComponent: undefined\n    }\n  },\n  computed: {\n    chartHasNegativeData() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n      return currChart.type === \"StackedAreaNegative\";\n    }\n  },\n  methods: {\n    buildDataForChart() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n      let chartData = buildChartData(this.countrycode, currChart, this.outputs, this.chartHasNegativeData);\n      if(chartData) {\n        this.chart1Data = chartData;\n      }\n      //possible to add color info, css classes, sort the series etc\n    },\n    loadChartComponent() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n      // console.log('loadChartComponent ', currChart, this.subtab, this.chartDefinitions);\n      if(currChart) {\n        this.chartComponent = outputsService.chartTypeToComponentMap[currChart.type];\n      }\n    },\n    loadInfoComponent() {\n      let fileName = this.subtab.charts[0]+'.vue';\n\n      //import() only works with partial paths, it doesn't take a single variable, like import(filePath). import() is not a function!! It just looks like one\n      //This rest is a bit hacky, but well.\n      //The first import() looks if the file exists, if not the error is silently caught.\n      //If it exists, a second import needs to be started because <component> cannot work directly with the answer of the\n      //first succesful fetch. It can only work with a function like this (for dynamic imports):\n      //infoComponent = () => import(`../content/${fileName}`)\n      import(`./content/${fileName}`)\n      .then(() => {\n        this.infoComponent = () => import(`./content/${fileName}`);\n      })\n      .catch(() => {\n        // console.log('info component not found');\n      });\n    }\n  },\n  created() {\n    this.loadChartComponent();\n\n    if(this.appState.lastAPIResponse) {\n      // only call buildDataForChart when data is already available!\n      this.buildDataForChart();\n    }\n\n    this.loadInfoComponent();\n  },\n  watch: {\n    'appState.lastAPIResponse': function() {\n      this.buildDataForChart();\n    },\n    countrycode: function() {\n      this.buildDataForChart();\n    }\n  }\n}\n",{"version":3,"sources":["OneChart.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"OneChart.vue","sourceRoot":"src/components/tabs","sourcesContent":["<template>\n  <div class=\"subtab-content\">\n    <component v-bind:is=\"chartComponent\"\n      v-if=\"Object.keys(chart1Data).length\"\n      :chart-data=\"chart1Data\"\n    ></component>\n    <component v-if=\"infoComponent\" :is=\"infoComponent\"/>\n  </div>\n</template>\n\n<script>\nimport * as outputsService from '../../outputsService.js';\nimport {buildChartData} from '../../chartSeriesBuilders.js';\n\nexport default {\n  name: 'OneChart',\n  components: {\n    'StackedAreaChart': () => import('../../charts/StackedAreaChart.vue'),\n    'LineChart': () => import('../../charts/LineChart.vue'),\n    'StackedAreaChart100Percent': () => import('../../charts/StackedAreaChart100Percent.vue')\n  },\n  props: ['subtab','outputs','chartDefinitions','countrycode','appState'],\n  data() {\n    return {\n      chart1Data: {},\n      chartComponent: undefined,\n      infoComponent: undefined\n    }\n  },\n  computed: {\n    chartHasNegativeData() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n      return currChart.type === \"StackedAreaNegative\";\n    }\n  },\n  methods: {\n    buildDataForChart() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n      let chartData = buildChartData(this.countrycode, currChart, this.outputs, this.chartHasNegativeData);\n      if(chartData) {\n        this.chart1Data = chartData;\n      }\n      //possible to add color info, css classes, sort the series etc\n    },\n    loadChartComponent() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n      // console.log('loadChartComponent ', currChart, this.subtab, this.chartDefinitions);\n      if(currChart) {\n        this.chartComponent = outputsService.chartTypeToComponentMap[currChart.type];\n      }\n    },\n    loadInfoComponent() {\n      let fileName = this.subtab.charts[0]+'.vue';\n\n      //import() only works with partial paths, it doesn't take a single variable, like import(filePath). import() is not a function!! It just looks like one\n      //This rest is a bit hacky, but well.\n      //The first import() looks if the file exists, if not the error is silently caught.\n      //If it exists, a second import needs to be started because <component> cannot work directly with the answer of the\n      //first succesful fetch. It can only work with a function like this (for dynamic imports):\n      //infoComponent = () => import(`../content/${fileName}`)\n      import(`./content/${fileName}`)\n      .then(() => {\n        this.infoComponent = () => import(`./content/${fileName}`);\n      })\n      .catch(() => {\n        // console.log('info component not found');\n      });\n    }\n  },\n  created() {\n    this.loadChartComponent();\n\n    if(this.appState.lastAPIResponse) {\n      // only call buildDataForChart when data is already available!\n      this.buildDataForChart();\n    }\n\n    this.loadInfoComponent();\n  },\n  watch: {\n    'appState.lastAPIResponse': function() {\n      this.buildDataForChart();\n    },\n    countrycode: function() {\n      this.buildDataForChart();\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n</style>\n"]}]}