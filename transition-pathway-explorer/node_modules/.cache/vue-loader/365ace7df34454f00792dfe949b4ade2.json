{"remainingRequest":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/src/components/tabs/emissions/EmissionsByCountry.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/src/components/tabs/emissions/EmissionsByCountry.vue","mtime":1707210098278},{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234682968}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport LineChart from '../../../charts/LineChart.vue';\n\nexport default {\n  name: 'EmissionsByCountry',\n  components: {LineChart},\n  props: ['subtab','outputs', 'chartDefinitions','appState'],\n  data() {\n    return {\n      chart1Data: {} //needs to be made reactive here, otherwise change is not propagated to child-component\n    }\n  },\n  methods: {\n    buildData() {\n  //    console.log('EmissionsByCountry ', this.chartDefinitions[this.subtab.charts[0]], this.outputs, this.subtab);\n/*\n      //console.log('EmissionsByCountry ', allCountriesResponse);\n\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n      var timeAxis = allCountriesResponse.timeAxis;\n      var series = [];\n\n      //go through countries\n      Object.keys(allCountriesResponse.data).forEach((countryCode) => {\n        if(countryCode === 'EU') {\n          return;\n        }\n        let data = allCountriesResponse.data[countryCode];\n        if(timeAxis && data && data.length === timeAxis.length) {\n          data = data.map((value, index) => {\n            return [timeAxis[index], value];\n          });\n        }\n        series.push({\n          name: countryCode,\n          data: data\n        });\n      });\n\n      if(!timeAxis) {\n        return false;\n      }\n\n      this.chart1Data  = {\n        series: series,\n        title: currChart.title,\n        unit: currChart.unit,\n        timeAxis: timeAxis.slice() //ditch observer, slice() ignores observer\n      }\n\n*/\n\n\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n\n      //multiple countries: can only process one output, in this case there is only one\n      let outp = currChart.outputs[0];\n\n      if(!this.outputs[outp.id] || !this.outputs[outp.id].data) {\n        return;\n      }\n\n      var timeAxis = this.outputs[outp.id].timeAxis;\n      var series = [];\n\n  //    console.log('buildData ', this.outputs[outp.id].data);\n      //go through countries\n      Object.keys(this.outputs[outp.id].data).forEach((countryCode) => {\n        if(countryCode === 'EU') {\n          return;\n        }\n\n        let data = this.outputs[outp.id].data[countryCode];\n        //console.log('buildData ', countryCode, data);\n        if(timeAxis && data && data.length === timeAxis.length) {\n          data = data.map((value, index) => {\n            return [timeAxis[index], value];\n          });\n        }\n        series.push({\n          name: countryCode,\n          data: data\n        });\n      });\n\n      if(!timeAxis) {\n        return false;\n      }\n\n      this.chart1Data  = {\n        series: series,\n        title: currChart.title,\n        unit: currChart.unit,\n        timeAxis: timeAxis.slice() //ditch observer, slice() ignores observer\n      }\n\n    }\n  },\n  created() {\n    //fetch all necessary data/references\n    //console.log('IndEnergyDemand ', this.charts);\n    this.buildData();\n  },\n  watch: {\n    'appState.lastAPIResponse': function() {\n      this.buildData();\n    }\n  }\n}\n",{"version":3,"sources":["EmissionsByCountry.vue"],"names":[],"mappings":";;;;;;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EmissionsByCountry.vue","sourceRoot":"src/components/tabs/emissions","sourcesContent":["<template>\n  <div class=\"subtab-content\">\n    <LineChart :chart-data=\"chart1Data\"/>\n  </div>\n</template>\n\n<script>\nimport LineChart from '../../../charts/LineChart.vue';\n\nexport default {\n  name: 'EmissionsByCountry',\n  components: {LineChart},\n  props: ['subtab','outputs', 'chartDefinitions','appState'],\n  data() {\n    return {\n      chart1Data: {} //needs to be made reactive here, otherwise change is not propagated to child-component\n    }\n  },\n  methods: {\n    buildData() {\n  //    console.log('EmissionsByCountry ', this.chartDefinitions[this.subtab.charts[0]], this.outputs, this.subtab);\n/*\n      //console.log('EmissionsByCountry ', allCountriesResponse);\n\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n      var timeAxis = allCountriesResponse.timeAxis;\n      var series = [];\n\n      //go through countries\n      Object.keys(allCountriesResponse.data).forEach((countryCode) => {\n        if(countryCode === 'EU') {\n          return;\n        }\n        let data = allCountriesResponse.data[countryCode];\n        if(timeAxis && data && data.length === timeAxis.length) {\n          data = data.map((value, index) => {\n            return [timeAxis[index], value];\n          });\n        }\n        series.push({\n          name: countryCode,\n          data: data\n        });\n      });\n\n      if(!timeAxis) {\n        return false;\n      }\n\n      this.chart1Data  = {\n        series: series,\n        title: currChart.title,\n        unit: currChart.unit,\n        timeAxis: timeAxis.slice() //ditch observer, slice() ignores observer\n      }\n\n*/\n\n\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n\n      //multiple countries: can only process one output, in this case there is only one\n      let outp = currChart.outputs[0];\n\n      if(!this.outputs[outp.id] || !this.outputs[outp.id].data) {\n        return;\n      }\n\n      var timeAxis = this.outputs[outp.id].timeAxis;\n      var series = [];\n\n  //    console.log('buildData ', this.outputs[outp.id].data);\n      //go through countries\n      Object.keys(this.outputs[outp.id].data).forEach((countryCode) => {\n        if(countryCode === 'EU') {\n          return;\n        }\n\n        let data = this.outputs[outp.id].data[countryCode];\n        //console.log('buildData ', countryCode, data);\n        if(timeAxis && data && data.length === timeAxis.length) {\n          data = data.map((value, index) => {\n            return [timeAxis[index], value];\n          });\n        }\n        series.push({\n          name: countryCode,\n          data: data\n        });\n      });\n\n      if(!timeAxis) {\n        return false;\n      }\n\n      this.chart1Data  = {\n        series: series,\n        title: currChart.title,\n        unit: currChart.unit,\n        timeAxis: timeAxis.slice() //ditch observer, slice() ignores observer\n      }\n\n    }\n  },\n  created() {\n    //fetch all necessary data/references\n    //console.log('IndEnergyDemand ', this.charts);\n    this.buildData();\n  },\n  watch: {\n    'appState.lastAPIResponse': function() {\n      this.buildData();\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n</style>\n"]}]}