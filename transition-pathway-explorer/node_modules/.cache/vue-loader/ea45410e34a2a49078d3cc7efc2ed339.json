{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/materials/MineralAvailability.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/materials/MineralAvailability.vue","mtime":1707210098279},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234519986}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport BarRangeChart from '../../../charts/BarRangeChart.vue';\n\nexport default {\n  name: 'MineralAvailability',\n  components: {BarRangeChart},\n  props: ['subtab','outputs','chartDefinitions','countrycode','appState'],\n  data() {\n    return {\n      chart1Data: undefined\n    }\n  },\n  methods: {\n    buildData() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n\n      let data = [];\n      let categories = [];\n\n      currChart.outputs.forEach((outp) => {\n\n        if(!this.outputs[outp.id] || !this.outputs[outp.id].data) {\n          return;\n        }\n\n        let title = this.outputs[outp.id].title ? this.outputs[outp.id].title : outp.id;\n\n        categories.push(title);\n\n        let outputData = this.outputs[outp.id].data[this.countrycode];\n\n        let value = outputData[outputData.length-1];\n        data.push(\n          // Range charts in Highcharts cover a range, so two values are needed\n          value < 0 ? [value,0] : [0,value]\n        );\n\n      });\n\n      // console.log(categories,data);\n      if(data.length) {\n        this.chart1Data = {\n          series: [{\n            data: data\n          }],\n          title: currChart.title,\n          unit: currChart.unit,\n          categories: categories\n        };\n      }\n    }\n  },\n  created() {\n    this.buildData();\n  },\n  watch: {\n    'appState.lastAPIResponse': function() {\n      this.buildData();\n    },\n    countrycode: function() {\n      this.buildData();\n    }\n  }\n}\n",{"version":3,"sources":["MineralAvailability.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MineralAvailability.vue","sourceRoot":"src/components/tabs/materials","sourcesContent":["<template>\n  <div class=\"subtab-content\">\n    <BarRangeChart v-if=\"chart1Data\" :chart-data=\"chart1Data\"/>\n\n    <!-- <div class=\"chart-info\">\n      <p>\n        Each sector is affected directly and indirectly by the transition. For instance, if individuals purchase less cars (group of levers “Key behaviours - Travel”), then the industrial production of vehicles decrease (direct effect).\n      </p>\n    </div> -->\n  </div>\n</template>\n\n<script>\nimport BarRangeChart from '../../../charts/BarRangeChart.vue';\n\nexport default {\n  name: 'MineralAvailability',\n  components: {BarRangeChart},\n  props: ['subtab','outputs','chartDefinitions','countrycode','appState'],\n  data() {\n    return {\n      chart1Data: undefined\n    }\n  },\n  methods: {\n    buildData() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n\n      let data = [];\n      let categories = [];\n\n      currChart.outputs.forEach((outp) => {\n\n        if(!this.outputs[outp.id] || !this.outputs[outp.id].data) {\n          return;\n        }\n\n        let title = this.outputs[outp.id].title ? this.outputs[outp.id].title : outp.id;\n\n        categories.push(title);\n\n        let outputData = this.outputs[outp.id].data[this.countrycode];\n\n        let value = outputData[outputData.length-1];\n        data.push(\n          // Range charts in Highcharts cover a range, so two values are needed\n          value < 0 ? [value,0] : [0,value]\n        );\n\n      });\n\n      // console.log(categories,data);\n      if(data.length) {\n        this.chart1Data = {\n          series: [{\n            data: data\n          }],\n          title: currChart.title,\n          unit: currChart.unit,\n          categories: categories\n        };\n      }\n    }\n  },\n  created() {\n    this.buildData();\n  },\n  watch: {\n    'appState.lastAPIResponse': function() {\n      this.buildData();\n    },\n    countrycode: function() {\n      this.buildData();\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n</style>\n"]}]}