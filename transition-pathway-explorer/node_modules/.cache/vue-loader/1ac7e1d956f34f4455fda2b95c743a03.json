{"remainingRequest":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/src/components/Levers.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/src/components/Levers.vue","mtime":1707210098268},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234682968}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as inputsService from '../inputsService.js';\nimport ConditionalAnimateHeight from '../lib/ConditionalAnimateHeight.vue';\nimport GroupLever from './GroupLever.vue';\nimport SingleLeverNum from './SingleLeverNum.vue';\nimport SingleLeverChar from './SingleLeverChar.vue';\n\nexport default {\n  name: 'Levers',\n  components: {\n    ConditionalAnimateHeight,\n    SingleLeverNum,\n    SingleLeverChar,\n    GroupLever\n  },\n  props: ['selected', 'appState'],\n  data() {\n    return {\n      groups: inputsService.leverGroups, //reactive because of .hidden property\n      tooltips: inputsService.tooltips, //reactive because async import with Vue.set() for initialisation\n      activeTooltip: undefined,\n      highlightedLevers: inputsService.highlightedLevers //reactive because changes depending on which warning is opened\n    }\n  },\n  created() {\n    this.levers = inputsService.levers;\n    this.sectors = inputsService.leverSectors;\n    this.timerId = undefined;\n  },\n  methods: {\n    groupHasLeverWithWarning(groupId) {\n      return this.groups[groupId].levers.some((leverId) => {\n        return this.highlightedLevers[leverId];\n      });\n    },\n    toggleGroup(gId) {\n      if(this.groups[gId].hidden) {\n        this.$delete(this.groups[gId], 'hidden');\n      } else {\n        this.$set(this.groups[gId], 'hidden', true);\n      }\n    },\n    showLeverInfo(leverId) {\n      inputsService.showInputInfo(leverId);\n    },\n    activateTooltip(leverid, callback) {\n      if (this.timerId) {\n        clearTimeout(this.timerId);\n      }\n      this.timerId = setTimeout( () => {\n        if(callback) {\n          callback()\n        }\n        this.activeTooltip = leverid;\n      }, 500);\n    },\n    deactivateTooltip() {\n      this.activeTooltip = undefined;\n      if (this.timerId) {\n        clearTimeout(this.timerId);\n      }\n    }\n  }\n}\n",{"version":3,"sources":["Levers.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Levers.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"levers\" class=\"noselect\">\n    <div v-for=\"sector in sectors\" class=\"levers-sector\" :key=\"sector.headline\">\n\n      <div class=\"sector-title\">\n        <span>{{sector.headline}}</span>\n      </div>\n\n      <div v-if=\"sector.groups\" class=\"levers-groups-cont\">\n        <div v-for=\"groupid in sector.groups\" :key=\"groupid\" class=\"levers-group\">\n          <div v-if=\"groups[groupid].title !== sector.headline\"\n            class=\"levers-group-title-cont\"\n            :class=\"{'group-open': !groups[groupid].hidden}\"\n          >\n            <div class=\"levers-group-title levers-column1\" v-on:click=\"toggleGroup(groupid)\">\n              <img src=\"/img/arrow-right.svg\" class=\"levers-group-title-arrow\" :class=\"{rotate90: !groups[groupid].hidden}\">\n              <span>{{groups[groupid].title}}</span>\n            </div>\n\n            <span v-if=\"groups[groupid].range\" v-for=\"(country,counIndex) in selected\" class=\"group-lever-cont\" :key=\"country.id\"\n            :class=\"{'levers-column2': counIndex === 0, 'levers-column3': counIndex === 1}\"\n            >\n              <GroupLever\n                :groupid=\"groupid\" :range=\"groups[groupid].range\" :country=\"country\"\n                :app-state=\"appState\"\n                :deactivated=\"groups[groupid].deactivated\"\n              />\n            </span>\n          </div>\n\n          <!--\n            group control needs to update automatically when one of the inner lever changes, separate component\n\n            needs to be wrapped in ConditionalAutoHeight with v-show on group-visib-status (default is visible) group.isHidden==true\n            countries need to be in the same wrapper, because multiple wrappers could be slightly out of sync\n\n            a group with no own title (groups[groupid].title === sector.headline) is always visible\n          -->\n          <ConditionalAnimateHeight :visible=\"!groups[groupid].hidden || groups[groupid].title === sector.headline || groupHasLeverWithWarning(groupid)\">\n            <div v-for=\"leverid in groups[groupid].levers\" :key=\"leverid\"\n              class=\"levers-group-levers\" v-on:mouseleave=\"deactivateTooltip()\"\n              :class=\"{'lever-highlighted': highlightedLevers[leverid]}\"\n            >\n              <span class=\"levers-title levers-column1\"\n                v-on:mouseenter=\"activateTooltip(leverid)\"\n              >\n                <span v-on:click=\"showLeverInfo(leverid)\" class=\"levers-title-text\">{{levers[leverid].title}}</span>\n                <div v-if=\"tooltips[leverid] && tooltips[leverid].desc\" class=\"lever-descr-tooltip\" :class=\"{'visible': leverid===activeTooltip}\">\n                  <div>{{tooltips[leverid].desc}}</div>\n                </div>\n              </span>\n\n              <!-- single controls (int/char) are separate components-->\n              <span v-for=\"(country,countryIndex) in selected\" class=\"single-lever-cont noselect\" :key=\"country.id\"\n                :class=\"{'levers-column2': countryIndex === 0, 'levers-column3': countryIndex === 1,}\"\n              >\n                <SingleLeverNum v-if=\"levers[leverid].type==='num'\"\n                  :leverid=\"leverid\" :range=\"levers[leverid].range\" :value=\"country.values[leverid]\" :country=\"country\"\n                  :tooltip-visible=\"leverid===activeTooltip\" :activate-tooltip=\"activateTooltip\" :deactivate-tooltip=\"deactivateTooltip\"\n                  :app-state=\"appState\"\n                  :deactivated=\"groups[groupid].deactivated || (countryIndex > 0 && levers[leverid].isEUOnly)\"\n                />\n                <SingleLeverChar v-if=\"levers[leverid].type==='char'\"\n                  :leverid=\"leverid\" :range=\"levers[leverid].range\" :value=\"country.values[leverid]\" :country=\"country\"\n                  :tooltip-visible=\"leverid===activeTooltip\" :activate-tooltip=\"activateTooltip\" :deactivate-tooltip=\"deactivateTooltip\"\n                  :app-state=\"appState\"\n                  :deactivated=\"groups[groupid].deactivated || (countryIndex > 0 && levers[leverid].isEUOnly)\"\n                />\n              </span>\n            </div>\n          </ConditionalAnimateHeight>\n\n        </div>\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport * as inputsService from '../inputsService.js';\nimport ConditionalAnimateHeight from '../lib/ConditionalAnimateHeight.vue';\nimport GroupLever from './GroupLever.vue';\nimport SingleLeverNum from './SingleLeverNum.vue';\nimport SingleLeverChar from './SingleLeverChar.vue';\n\nexport default {\n  name: 'Levers',\n  components: {\n    ConditionalAnimateHeight,\n    SingleLeverNum,\n    SingleLeverChar,\n    GroupLever\n  },\n  props: ['selected', 'appState'],\n  data() {\n    return {\n      groups: inputsService.leverGroups, //reactive because of .hidden property\n      tooltips: inputsService.tooltips, //reactive because async import with Vue.set() for initialisation\n      activeTooltip: undefined,\n      highlightedLevers: inputsService.highlightedLevers //reactive because changes depending on which warning is opened\n    }\n  },\n  created() {\n    this.levers = inputsService.levers;\n    this.sectors = inputsService.leverSectors;\n    this.timerId = undefined;\n  },\n  methods: {\n    groupHasLeverWithWarning(groupId) {\n      return this.groups[groupId].levers.some((leverId) => {\n        return this.highlightedLevers[leverId];\n      });\n    },\n    toggleGroup(gId) {\n      if(this.groups[gId].hidden) {\n        this.$delete(this.groups[gId], 'hidden');\n      } else {\n        this.$set(this.groups[gId], 'hidden', true);\n      }\n    },\n    showLeverInfo(leverId) {\n      inputsService.showInputInfo(leverId);\n    },\n    activateTooltip(leverid, callback) {\n      if (this.timerId) {\n        clearTimeout(this.timerId);\n      }\n      this.timerId = setTimeout( () => {\n        if(callback) {\n          callback()\n        }\n        this.activeTooltip = leverid;\n      }, 500);\n    },\n    deactivateTooltip() {\n      this.activeTooltip = undefined;\n      if (this.timerId) {\n        clearTimeout(this.timerId);\n      }\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n#levers {\n  flex-grow: 1;\n  overflow-y: scroll; /*always visible better than toggle, because when toggle the container width changes too*/\n  padding-top: 30px;\n  border-top: 2px solid #d4d4d4;\n  border-bottom: 2px solid #d4d4d4;\n}\n.sector-title {\n  padding-left: 5px;\n  font-size: 17px;\n  color: #2d2d2d;\n  margin-top: 10px;\n}\n.levers-group-title-cont {\n  display: flex;\n  align-items: center;\n  padding: 2px 0px;\n  border-top: 1px solid transparent;\n}\n.levers-group-title {\n  padding-left: 10px;\n  height: 24px;\n  font-size: 16px;\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n}\n.levers-group-title span {\n  margin-left: 10px;\n}\n.levers-group-title-arrow {\n  height: 10px;\n  transform: rotate(0deg);\n  transform-origin: center center;\n  transition: transform 0.2s ease;\n}\n.levers-group-title-arrow.rotate90 {\n  transform: rotate(90deg);\n}\n.levers-title {\n  position: relative;\n  padding-left: 30px;\n  font-size: 16px;\n  box-sizing: border-box;\n  color: #5e5e5e;\n  display: flex;\n  align-items: center;\n  transition: color 0.2s ease;\n}\n.levers-title-text {\n  cursor: pointer;\n}\n.lever-descr-tooltip {\n  position: absolute;\n  bottom: calc(100% + 6px);\n  left: 10px;\n  background-color: #595959;\n  color: white;\n  padding: 5px;\n  opacity: 0;\n  min-height: 30px;\n  line-height: 20px;\n  font-size: 16px;\n  width: 300px;\n  border-radius: 4px;\n  transition: opacity 0.0s ease;\n  transition-delay: 0s;\n  box-shadow: 1px 1px 3px 0px rgba(163,163,163,1);\n  z-index: 1000;\n  pointer-events: none;\n}\n.lever-descr-tooltip::after{\n  content: '';\n  position: absolute;\n  bottom: -10px;\n  left: 20px;\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 16px 10px 0 10px;\n  border-color: #595959 transparent transparent transparent;\n  z-index: 2000;\n}\n.levers-title:hover .lever-descr-tooltip.visible {\n  opacity: 1;\n}\n\n.levers-group-levers {\n  display: flex;\n  align-items: center;\n  padding: 4px 0px; /*needs to be padding, because ConditionalAnimateHeight ignores margin for now*/\n}\n.levers-group-levers:last-child {\n  padding-bottom: 20px;\n}\n.levers-group-levers.lever-highlighted .levers-title {\n  color: tomato !important;\n}\n\n.levers-group-title-cont:hover .levers-group-title, .levers-group-levers:hover .levers-title {\n  color: #27aae1;\n  transition-duration: 0s;\n}\n\n.single-lever-cont, .group-lever-cont {\n  display: flex;\n}\n\n.single-lever-step-connector {\n  position: absolute;\n  top: -12px;\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 16px 10px 0 10px;\n  border-color: #595959 transparent transparent transparent;\n  z-index: 2000;\n  opacity: 0;\n  pointer-events: none;\n}\n\n.single-lever-tooltip {\n  position: absolute;\n  bottom: calc(100% + 6px);\n  right: 0px;\n  background-color: #595959;\n  color: white;\n  padding: 5px;\n  opacity: 0;\n  min-height: 30px;\n  line-height: 20px;\n  font-size: 16px;\n  width: 200px;\n  border-radius: 4px;\n  transition: opacity 0.0s ease;\n  transition-delay: 0s;\n  box-shadow: 1px 1px 3px 0px rgba(163,163,163,1);\n  z-index: 1000;\n  pointer-events: none;\n}\n.single-lever:hover .single-lever-tooltip.visible, .single-lever:hover .single-lever-step-connector.visible {\n  opacity: 1;\n}\n\n</style>\n"]}]}