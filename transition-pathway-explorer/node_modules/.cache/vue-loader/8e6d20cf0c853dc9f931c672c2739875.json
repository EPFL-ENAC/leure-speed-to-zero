{"remainingRequest":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/src/charts/AreaRange.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/src/charts/AreaRange.vue","mtime":1707210098267},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234682968}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport chartFixFreeAxisMixin from '../mixins/chartFixFreeAxisMixin.js';\n\nimport highcharts from \"highcharts\";\nimport exporting from \"highcharts/modules/exporting\";\nimport exportData from \"highcharts/modules/export-data\";\nimport more from 'highcharts/highcharts-more';\n\nexport default {\n  name: 'AreaRange',\n  mixins: [chartFixFreeAxisMixin],\n  props: ['chartData'], //chartData.title, chartData.timeAxis, chartData.series\n  data: function() {\n    return {\n      axisFixed: false\n    }\n  },\n  watch: {\n    chartData: {\n      // doesn't need to be a deep watch, because the whole object gets replaced\n      handler() {\n        this.updatePlotline();\n      }\n    }\n  },\n  methods: {\n    highlightLinkedSeries(evt) {\n      if(this.chartData.series.length < 3) {\n        return;\n      }\n\n      let target = evt.target;\n\n      let linkedSeries;\n      if(target.linkedSeries && target.linkedSeries[0]) {\n        linkedSeries = target.linkedSeries[0];\n      }\n      if(linkedSeries) {\n        linkedSeries.update({\n          fillOpacity: 0.6\n        });\n      }\n    },\n    unhighlightLinkedSeries(evt) {\n      if(this.chartData.series.length < 3) {\n        return;\n      }\n\n      let target = evt.target;\n\n      let linkedSeries;\n      if(target.linkedSeries && target.linkedSeries[0]) {\n        linkedSeries = target.linkedSeries[0];\n      }\n      if(linkedSeries) {\n        // linkedSeries.options.opacity = 0.3;\n        // --> this doesn't work properly, don't access properties directly, use highcharts internal functions like below:\n\n        linkedSeries.update({\n          fillOpacity: 0.1\n        });\n      }\n    },\n    updatePlotline() {\n      // this component doesn't get rendered with just empty data\n      // on updates only the plotline changes\n      this.chart.xAxis[0].options.plotLines[0].value = this.chartData.temp2100;\n      this.chart.xAxis[0].update();\n    }\n  },\n  mounted() {\n    var container = this.$refs.chart;\n\n    exporting(highcharts);\n    exportData(highcharts);\n    more(highcharts);\n\n    var that = this;\n\n    this.chart = new highcharts.Chart({\n      chart: {\n        renderTo: container,\n        inverted: true,\n        spacingBottom: 30,\n        animation: false\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: this.chartData.title\n      },\n      xAxis: {\n        tickmarkPlacement: 'on',\n        title:{\n          text: \"Â°C\"\n        },\n        min: 0,\n        max: 4.6,\n        reversed: false, // is set to true when chart.inverted == true\n        tickInterval: 1,\n        plotLines: [{\n          color: '#FF0000',\n          width: 2,\n          value: this.chartData.temp2100,\n          label: {\n            text: \"T in 2100\",\n            y: -5,\n            x: 5,\n            style: {\n              color: 'red',\n              fontWeight: 'bold'\n            }\n          }\n        }]\n      },\n      yAxis: {\n        crosshair: {\n          width: 2,\n          snap: false\n        },\n        title: {\n          useHTML: true,\n          text: this.chartData.unit,\n          margin: 10\n        },\n        lineWidth: 1\n      },\n      tooltip: {\n        useHTML: true,\n        formatter: function() {\n          // this.point.index is undocumented, might change in future releases of highcharts !!\n          let xIndex = this.point.index;\n\n          let linkedSeries = this.series.linkedSeries[0];\n          let rangeLow = linkedSeries.data[xIndex].low;\n          let rangeHigh = linkedSeries.data[xIndex].high;\n\n          let tooltipString = `\n            <div>\n              <span style='font-weight: bold; color: `+this.series.color+`'>`+this.series.name+`:</span>\n              <span style='font-weight: bold;'>`+this.y+`</span>\n              <b>\n            </div>\n            <div>\n              <span>Bounds of estimates:</span>\n              <span>`+rangeLow+` - `+rangeHigh+`</span>\n            </div>\n          `;\n\n          return tooltipString;\n        }\n      },\n      plotOptions: {\n        series: {\n          label: {\n            enabled: false\n          }\n        },\n        areasplinerange: {\n          fillOpacity: this.chartData.series.length > 2 ? 0.1 : 0.5,\n          lineWidth: 0,\n          enableMouseTracking: false, // disables the tooltip\n          marker: {\n            enabled: false\n          }\n        },\n        spline: {\n          events: {\n            mouseOver: function (evt) {\n              that.highlightLinkedSeries(evt);\n            },\n            mouseOut: function (evt) {\n              that.unhighlightLinkedSeries(evt);\n            }\n          }\n        }\n      },\n      responsive: {\n        rules: [{\n          condition: {\n            maxWidth: 500\n          }\n        }]\n      },\n      exporting: {\n        menuItemDefinitions: {\n          // Custom definition\n          fixAxis: {\n            onclick: this.fixAxis,\n            text: 'Fixed axis'\n          },\n          freeAxis: {\n            onclick: this.freeAxis,\n            text: 'Auto axis'\n          }\n        },\n        buttons: {\n          contextButton: {\n            menuItems: [\n              \"fixAxis\",\n              \"freeAxis\",\n              \"separator\",\n              \"printChart\",\n              \"separator\",\n              \"downloadPNG\",\n              \"downloadJPEG\",\n              \"downloadPDF\",\n              \"downloadSVG\",\n              \"separator\",\n              \"downloadCSV\",\n              \"downloadXLS\"\n            ]\n          }\n        }\n      },\n      series: this.chartData.series\n    });\n  },\n  beforeDestroy() {\n    if(this.chart) {\n      this.chart.destroy();\n    }\n  },\n}\n",{"version":3,"sources":["AreaRange.vue"],"names":[],"mappings":";;;;;;;AAOA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AreaRange.vue","sourceRoot":"src/charts","sourcesContent":["<template>\n  <div class=\"chart-container\">\n    <div class=\"chart\" :class=\"{'fixed-axis': axisFixed, 'free-axis': !axisFixed}\" ref=\"chart\"></div>\n  </div>\n</template>\n\n<script>\nimport chartFixFreeAxisMixin from '../mixins/chartFixFreeAxisMixin.js';\n\nimport highcharts from \"highcharts\";\nimport exporting from \"highcharts/modules/exporting\";\nimport exportData from \"highcharts/modules/export-data\";\nimport more from 'highcharts/highcharts-more';\n\nexport default {\n  name: 'AreaRange',\n  mixins: [chartFixFreeAxisMixin],\n  props: ['chartData'], //chartData.title, chartData.timeAxis, chartData.series\n  data: function() {\n    return {\n      axisFixed: false\n    }\n  },\n  watch: {\n    chartData: {\n      // doesn't need to be a deep watch, because the whole object gets replaced\n      handler() {\n        this.updatePlotline();\n      }\n    }\n  },\n  methods: {\n    highlightLinkedSeries(evt) {\n      if(this.chartData.series.length < 3) {\n        return;\n      }\n\n      let target = evt.target;\n\n      let linkedSeries;\n      if(target.linkedSeries && target.linkedSeries[0]) {\n        linkedSeries = target.linkedSeries[0];\n      }\n      if(linkedSeries) {\n        linkedSeries.update({\n          fillOpacity: 0.6\n        });\n      }\n    },\n    unhighlightLinkedSeries(evt) {\n      if(this.chartData.series.length < 3) {\n        return;\n      }\n\n      let target = evt.target;\n\n      let linkedSeries;\n      if(target.linkedSeries && target.linkedSeries[0]) {\n        linkedSeries = target.linkedSeries[0];\n      }\n      if(linkedSeries) {\n        // linkedSeries.options.opacity = 0.3;\n        // --> this doesn't work properly, don't access properties directly, use highcharts internal functions like below:\n\n        linkedSeries.update({\n          fillOpacity: 0.1\n        });\n      }\n    },\n    updatePlotline() {\n      // this component doesn't get rendered with just empty data\n      // on updates only the plotline changes\n      this.chart.xAxis[0].options.plotLines[0].value = this.chartData.temp2100;\n      this.chart.xAxis[0].update();\n    }\n  },\n  mounted() {\n    var container = this.$refs.chart;\n\n    exporting(highcharts);\n    exportData(highcharts);\n    more(highcharts);\n\n    var that = this;\n\n    this.chart = new highcharts.Chart({\n      chart: {\n        renderTo: container,\n        inverted: true,\n        spacingBottom: 30,\n        animation: false\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: this.chartData.title\n      },\n      xAxis: {\n        tickmarkPlacement: 'on',\n        title:{\n          text: \"Â°C\"\n        },\n        min: 0,\n        max: 4.6,\n        reversed: false, // is set to true when chart.inverted == true\n        tickInterval: 1,\n        plotLines: [{\n          color: '#FF0000',\n          width: 2,\n          value: this.chartData.temp2100,\n          label: {\n            text: \"T in 2100\",\n            y: -5,\n            x: 5,\n            style: {\n              color: 'red',\n              fontWeight: 'bold'\n            }\n          }\n        }]\n      },\n      yAxis: {\n        crosshair: {\n          width: 2,\n          snap: false\n        },\n        title: {\n          useHTML: true,\n          text: this.chartData.unit,\n          margin: 10\n        },\n        lineWidth: 1\n      },\n      tooltip: {\n        useHTML: true,\n        formatter: function() {\n          // this.point.index is undocumented, might change in future releases of highcharts !!\n          let xIndex = this.point.index;\n\n          let linkedSeries = this.series.linkedSeries[0];\n          let rangeLow = linkedSeries.data[xIndex].low;\n          let rangeHigh = linkedSeries.data[xIndex].high;\n\n          let tooltipString = `\n            <div>\n              <span style='font-weight: bold; color: `+this.series.color+`'>`+this.series.name+`:</span>\n              <span style='font-weight: bold;'>`+this.y+`</span>\n              <b>\n            </div>\n            <div>\n              <span>Bounds of estimates:</span>\n              <span>`+rangeLow+` - `+rangeHigh+`</span>\n            </div>\n          `;\n\n          return tooltipString;\n        }\n      },\n      plotOptions: {\n        series: {\n          label: {\n            enabled: false\n          }\n        },\n        areasplinerange: {\n          fillOpacity: this.chartData.series.length > 2 ? 0.1 : 0.5,\n          lineWidth: 0,\n          enableMouseTracking: false, // disables the tooltip\n          marker: {\n            enabled: false\n          }\n        },\n        spline: {\n          events: {\n            mouseOver: function (evt) {\n              that.highlightLinkedSeries(evt);\n            },\n            mouseOut: function (evt) {\n              that.unhighlightLinkedSeries(evt);\n            }\n          }\n        }\n      },\n      responsive: {\n        rules: [{\n          condition: {\n            maxWidth: 500\n          }\n        }]\n      },\n      exporting: {\n        menuItemDefinitions: {\n          // Custom definition\n          fixAxis: {\n            onclick: this.fixAxis,\n            text: 'Fixed axis'\n          },\n          freeAxis: {\n            onclick: this.freeAxis,\n            text: 'Auto axis'\n          }\n        },\n        buttons: {\n          contextButton: {\n            menuItems: [\n              \"fixAxis\",\n              \"freeAxis\",\n              \"separator\",\n              \"printChart\",\n              \"separator\",\n              \"downloadPNG\",\n              \"downloadJPEG\",\n              \"downloadPDF\",\n              \"downloadSVG\",\n              \"separator\",\n              \"downloadCSV\",\n              \"downloadXLS\"\n            ]\n          }\n        }\n      },\n      series: this.chartData.series\n    });\n  },\n  beforeDestroy() {\n    if(this.chart) {\n      this.chart.destroy();\n    }\n  },\n}\n</script>\n\n<style>\n</style>\n"]}]}