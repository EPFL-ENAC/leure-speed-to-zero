{"remainingRequest":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/src/components/tabs/water/WaterStressMap.vue?vue&type=style&index=0&id=fa181e4c&lang=css","dependencies":[{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/src/components/tabs/water/WaterStressMap.vue","mtime":1707210098279},{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/css-loader/index.js","mtime":1707234519671},{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1707234682978},{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/postcss-loader/src/index.js","mtime":1707234519895},{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234682968}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#water-maps-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  margin-right: 20px;\n  margin-bottom: 20px;\n}\n",{"version":3,"sources":["WaterStressMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;AACA;AACA;AACA;AACA;AACA;AACA","file":"WaterStressMap.vue","sourceRoot":"src/components/tabs/water","sourcesContent":["<template>\n  <div class=\"subtab-content\">\n    <h2>{{subtab.longTitle}}</h2>\n    <div id=\"water-maps-container\">\n      <WaterMap :last-api-response=\"appState.lastAPIResponse\" :data=\"chart1Data\" :ranges=\"chart1Ranges\" :title=\"chart1Title\"/>\n      <WaterMap :last-api-response=\"appState.lastAPIResponse\" :data=\"chart2Data\" :ranges=\"chart2Ranges\" :title=\"chart2Title\"/>\n    </div>\n    <div class=\"chart-info\">\n      <p>\n        The Water Exploitation Index (WEI) is an indicator of the level of pressure that human activity exerts on the natural water resources of a particular territory.         It helps to identify the regions that have high demand in relation to their resources and therefore prone to suffer from water stress.\n      </p>\n      <p>\n      </p>\n      <p>\n        Traditionally, the WEI has been defined as the ratio between the annual total water abstraction and the available long-term freshwater resources.\n      </p>\n      <p>\n        In EUCalc, we use the Water Exploitation Index “normal” (WEI-normal), defined as the ratio between water consumption and local water availability (locally produced runoff and subsurface runoff, does not include the water that is entering and leaving one region within a particular period of time).\n      </p>\n      <p>\n        Consequently, WEI-normal will be higher for regions that hardly generate local water. Note that the WEI-normal indicator does not provide information on extreme events, such as floods or droughts, that generally occur in localized areas and during short period of time. You can find information on the exposure to droughts and floods in the Climate tab.\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport WaterMap from './WaterMap.vue';\n\nexport default {\n  name: 'WaterStressMap',\n  components: {\n    WaterMap\n  },\n  // countrycode is not needed but still listed, so it doesn't appear as an attribute in the html\n  props: ['subtab','outputs','chartDefinitions','appState', 'countrycode'],\n  data() {\n    return {\n      chart1Data: undefined,\n      chart2Data: undefined\n    }\n  },\n  methods: {\n    getDataChart1() {\n      if(this.outputs[this.chart1Output] && this.outputs[this.chart1Output].data) {\n        this.chart1Data = this.outputs[this.chart1Output].data\n      }\n    },\n    getDataChart2() {\n      if(this.outputs[this.chart2Output] && this.outputs[this.chart2Output].data) {\n        this.chart2Data = this.outputs[this.chart2Output].data\n      }\n    }\n  },\n  created() {\n\n    let chart1 = this.chartDefinitions[this.subtab.charts[0]];\n    let chart2 = this.chartDefinitions[this.subtab.charts[1]];\n\n    // range colors in JSON\n    // colors: base color: #ffeee6, for blue complementary colors are used, like E6F7FF, and monochromatic variations of them\n    // https://www.color-hex.com/color/b4e7ff\n\n    this.chart1Ranges = chart1.ranges;\n    this.chart2Ranges = chart2.ranges;\n    this.chart1Title = chart1.title;\n    this.chart2Title = chart2.title;\n\n    this.chart1Output = chart1.outputs[0].id;\n    this.chart2Output = chart2.outputs[0].id;\n\n    this.getDataChart1();\n    this.getDataChart2();\n  },\n  watch: {\n    'appState.lastAPIResponse': function() {\n      this.getDataChart1();\n      this.getDataChart2();\n    }\n  }\n}\n</script>\n\n<style>\n#water-maps-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  margin-right: 20px;\n  margin-bottom: 20px;\n}\n</style>\n"]}]}