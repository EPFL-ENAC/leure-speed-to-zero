{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/SingleLeverChar.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/SingleLeverChar.vue","mtime":1707210098269},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234682968}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as dataService from '../dataService.js';\nimport * as inputsService from '../inputsService.js';\n\nexport default {\n  name: 'SingleLeverNum',\n  props: ['leverid', 'range', 'value', 'country', 'tooltipVisible', 'activateTooltip', 'deactivateTooltip', 'appState', 'deactivated'],\n  data() {\n    return {\n      tooltipText: '',\n      tooltipIndex: undefined,\n      buttonFromEmptyToFilled: false\n    }\n  },\n  created() {\n    this.timerId = undefined;\n  },\n  computed: {\n    partialWidth: function() {\n      let val = (this.value % 1).toFixed(1)*100;\n      return val === 0 ? 100 : val;\n    },\n    displayedValue: function() {\n      let flooredValue = Math.floor(this.value);\n      let decimalPart = (this.value % 1).toFixed(1)*10;\n      decimalPart = decimalPart > 0 ? '.' + decimalPart : '';\n      return ['A','B','C','D'][flooredValue-1] + decimalPart;\n    },\n    displayedAmbition: function() {\n      return ['A','B','C','D'][this.tooltipIndex];\n    }\n  },\n  methods: {\n    setIntValues(step) {\n      if(this.country.values[this.leverid] === step) {\n        return;\n      } else {\n        inputsService.setValue(this.country, this.leverid, step);\n        //Desktop only\n        if(!this.appState.isMobile) {\n          dataService.rewriteURL(dataService.updateURLParams());\n          dataService.debouncedFetch();\n        }\n        // Mobile only\n        if(this.appState.isMobile) {\n          // send availability request\n          dataService.availabilityRequest();\n        }\n      }\n    },\n    stepClickFunc(step) {\n      if(this.deactivated) {\n        return;\n      }\n      if(this.appState.noDecimalLevers) {\n        this.setIntValues(step);\n        return;\n      }\n\n      if(Math.ceil(this.value) !== step) {\n        if(this.country.values[this.leverid] !== step) {\n          inputsService.setValue(this.country, this.leverid, step);\n          //Desktop only\n          if(!this.appState.isMobile) {\n            dataService.rewriteURL(dataService.updateURLParams());\n            dataService.debouncedFetch();\n          }\n\n          // Mobile only\n          if(this.appState.isMobile) {\n            // send availability request\n            dataService.availabilityRequest();\n          }\n        }\n      } else {\n        let val = Math.round( (this.value-0.1) * 10) / 10;\n        val = val <= 1 ? 1 : val;\n        if(this.country.values[this.leverid] !== val) {\n          inputsService.setValue(this.country, this.leverid, val);\n          //Desktop only\n          if(!this.appState.isMobile) {\n            dataService.rewriteURL(dataService.updateURLParams());\n            dataService.debouncedFetch();\n          }\n\n          // Mobile only\n          if(this.appState.isMobile) {\n            // send availability request\n            dataService.availabilityRequest();\n          }\n        }\n      }\n    },\n    setTooltip(ind) {\n\n      var setTooltipInfo = () => {\n        let tooltipData;\n        if(inputsService.tooltips[this.leverid] && inputsService.tooltips[this.leverid][this.country.id]) {\n          tooltipData = inputsService.tooltips[this.leverid][this.country.id];\n        } else {\n          tooltipData = [];\n        }\n        if(tooltipData[ind]) {\n          this.tooltipText = tooltipData[ind].trim();\n          this.tooltipIndex = ind;\n        }\n      };\n\n      if(this.tooltipVisible) {\n        setTooltipInfo();\n      } else {\n        this.activateTooltip(this.leverid, setTooltipInfo);\n      }\n    }\n  },\n  watch: {\n    value: function(newVal, oldVal) {\n      if(Math.floor(newVal) > Math.floor(oldVal)) {\n        // triggers for oldVal = 1.5, newVal = 2.1\n        // doesn't trigger for oldVal = 1.5, newVal = 1.9\n\n        this.buttonFromEmptyToFilled = true;\n\n        //nextTick() is not enough. To make sure the change is visible, use window.requestAnimationFrame()\n        window.requestAnimationFrame(() => {\n          window.requestAnimationFrame(() => {\n            this.buttonFromEmptyToFilled = false;\n          });\n        });\n\n      }\n    }\n\n  }\n}\n",{"version":3,"sources":["SingleLeverChar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA","file":"SingleLeverChar.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"single-lever\" :class=\"{'deactivated': deactivated}\">\n\n    <div v-for=\"(step, index) in range\" class=\"single-lever-step\" :key=\"step\" v-on:mouseenter=\"setTooltip(index)\">\n\n      <div class=\"single-lever-step-button\"\n        :class=\"{\n          empty: Math.ceil(value) <= step,\n          filled: Math.ceil(value) > step,\n          notrans: buttonFromEmptyToFilled,\n        }\"\n        v-on:click=\"stepClickFunc(step)\"\n      >\n        <span v-if=\"(Math.ceil(value) === step)\"\n          class=\"single-lever-step-partial\" :style=\"{width: partialWidth + '%'}\"\n        >\n        </span>\n      </div>\n    </div>\n\n    <div v-if=\"!appState.isMobile\" class=\"single-lever-value\"><span>{{displayedValue}}</span></div>\n\n    <div class=\"single-lever-tooltip\" :class=\"{'visible': tooltipVisible && tooltipText}\">\n      <div>Ambition Level {{displayedAmbition}}:</div>\n      <div>{{tooltipText}}</div>\n    </div>\n    <div class=\"single-lever-step-connector\" :class=\"{'visible': tooltipVisible && tooltipText}\"\n\n      :style=\"{left: (23*(tooltipIndex+1))-13-10+'px'}\"\n    >\n      <!--\n        left: 23*(tooltipIndex+1)-13-10\n          23: width of single-lever-step including margin\n          13: more or less the half of that width (the x-center)\n          10: half the width of the single-lever-step-connector\n\n        can't be inside .single-lever-step, otherwise not over single-lever-tooltip and box-shadow not covered,\n        even if single-lever-tooltip is put above single-lever-step\n    -->\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport * as dataService from '../dataService.js';\nimport * as inputsService from '../inputsService.js';\n\nexport default {\n  name: 'SingleLeverNum',\n  props: ['leverid', 'range', 'value', 'country', 'tooltipVisible', 'activateTooltip', 'deactivateTooltip', 'appState', 'deactivated'],\n  data() {\n    return {\n      tooltipText: '',\n      tooltipIndex: undefined,\n      buttonFromEmptyToFilled: false\n    }\n  },\n  created() {\n    this.timerId = undefined;\n  },\n  computed: {\n    partialWidth: function() {\n      let val = (this.value % 1).toFixed(1)*100;\n      return val === 0 ? 100 : val;\n    },\n    displayedValue: function() {\n      let flooredValue = Math.floor(this.value);\n      let decimalPart = (this.value % 1).toFixed(1)*10;\n      decimalPart = decimalPart > 0 ? '.' + decimalPart : '';\n      return ['A','B','C','D'][flooredValue-1] + decimalPart;\n    },\n    displayedAmbition: function() {\n      return ['A','B','C','D'][this.tooltipIndex];\n    }\n  },\n  methods: {\n    setIntValues(step) {\n      if(this.country.values[this.leverid] === step) {\n        return;\n      } else {\n        inputsService.setValue(this.country, this.leverid, step);\n        //Desktop only\n        if(!this.appState.isMobile) {\n          dataService.rewriteURL(dataService.updateURLParams());\n          dataService.debouncedFetch();\n        }\n        // Mobile only\n        if(this.appState.isMobile) {\n          // send availability request\n          dataService.availabilityRequest();\n        }\n      }\n    },\n    stepClickFunc(step) {\n      if(this.deactivated) {\n        return;\n      }\n      if(this.appState.noDecimalLevers) {\n        this.setIntValues(step);\n        return;\n      }\n\n      if(Math.ceil(this.value) !== step) {\n        if(this.country.values[this.leverid] !== step) {\n          inputsService.setValue(this.country, this.leverid, step);\n          //Desktop only\n          if(!this.appState.isMobile) {\n            dataService.rewriteURL(dataService.updateURLParams());\n            dataService.debouncedFetch();\n          }\n\n          // Mobile only\n          if(this.appState.isMobile) {\n            // send availability request\n            dataService.availabilityRequest();\n          }\n        }\n      } else {\n        let val = Math.round( (this.value-0.1) * 10) / 10;\n        val = val <= 1 ? 1 : val;\n        if(this.country.values[this.leverid] !== val) {\n          inputsService.setValue(this.country, this.leverid, val);\n          //Desktop only\n          if(!this.appState.isMobile) {\n            dataService.rewriteURL(dataService.updateURLParams());\n            dataService.debouncedFetch();\n          }\n\n          // Mobile only\n          if(this.appState.isMobile) {\n            // send availability request\n            dataService.availabilityRequest();\n          }\n        }\n      }\n    },\n    setTooltip(ind) {\n\n      var setTooltipInfo = () => {\n        let tooltipData;\n        if(inputsService.tooltips[this.leverid] && inputsService.tooltips[this.leverid][this.country.id]) {\n          tooltipData = inputsService.tooltips[this.leverid][this.country.id];\n        } else {\n          tooltipData = [];\n        }\n        if(tooltipData[ind]) {\n          this.tooltipText = tooltipData[ind].trim();\n          this.tooltipIndex = ind;\n        }\n      };\n\n      if(this.tooltipVisible) {\n        setTooltipInfo();\n      } else {\n        this.activateTooltip(this.leverid, setTooltipInfo);\n      }\n    }\n  },\n  watch: {\n    value: function(newVal, oldVal) {\n      if(Math.floor(newVal) > Math.floor(oldVal)) {\n        // triggers for oldVal = 1.5, newVal = 2.1\n        // doesn't trigger for oldVal = 1.5, newVal = 1.9\n\n        this.buttonFromEmptyToFilled = true;\n\n        //nextTick() is not enough. To make sure the change is visible, use window.requestAnimationFrame()\n        window.requestAnimationFrame(() => {\n          window.requestAnimationFrame(() => {\n            this.buttonFromEmptyToFilled = false;\n          });\n        });\n\n      }\n    }\n\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n</style>\n"]}]}