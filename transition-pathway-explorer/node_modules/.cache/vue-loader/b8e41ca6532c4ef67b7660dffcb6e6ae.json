{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/emissions/GHGSources.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/emissions/GHGSources.vue","mtime":1707210098278},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/css-loader/index.js","mtime":1707234519671},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1707234520081},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/postcss-loader/src/index.js","mtime":1707234519895},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234519986}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.emissions-chart {\n  max-width: 450px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 20px 100px;\n  border: 1px solid darkgrey;\n}\n",{"version":3,"sources":["GHGSources.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmHA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GHGSources.vue","sourceRoot":"src/components/tabs/emissions","sourcesContent":["<template>\n  <div class=\"subtab-content\">\n\n    <transition name=\"modal-fade\" mode=\"out-in\">\n      <SideBarChart :key=\"currentChart\" class=\"emissions-chart\"\n        :chart-data=\"chartsData[currentChart]\"\n        :go-back=\"isToplevel ? null: goBack\"\n        :go-deeper=\"goDeeper\"\n      />\n    </transition>\n\n\n  </div>\n</template>\n\n<script>\nimport SideBarChart from '../../../charts/SideBarChart.vue';\n\nexport default {\n  name: 'GHGSources',\n  props: ['subtab','outputs', 'chartDefinitions', 'appState'],\n  components: {\n    SideBarChart\n  },\n  data() {\n    return {\n      chartsData: {},\n      currentChart: undefined, // id\n      isToplevel: undefined\n    }\n  },\n  methods: {\n    goBack() {\n      //setting state var that determines animation direction\n      if(this.chartChain.length > 1) {\n        this.chartChain.pop();\n        this.currentChart = this.chartChain[this.chartChain.length-1];\n        if(this.chartChain.length > 1) {\n          this.isToplevel = false;\n        } else {\n          this.isToplevel = true;\n        }\n      }\n    },\n    goDeeper(target) {\n      this.chartChain.push(target)  //strings only! not using references here\n      this.currentChart = target;\n      this.isToplevel = false;\n    },\n    buildData() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n      let country = 'EU';\n\n      this.chartsData = {};\n      Object.keys(currChart.structure).forEach( (chartkey)=> {\n        let title;\n        if(currChart.structure[chartkey].title) {\n          title = currChart.structure.title\n        }\n        else if (this.outputs[chartkey] && this.outputs[chartkey].title) {\n          title = this.outputs[chartkey].title;\n        }\n        else if (this.outputs[chartkey] && !this.outputs[chartkey].title) {\n          title = this.outputs[chartkey]\n        }\n\n\n        let series = [];\n        currChart.structure[chartkey].series.forEach((outputId) => {\n          if(outputId && this.outputs[outputId] && this.outputs[outputId].data && this.outputs[outputId].data[country]) {\n            let data = this.outputs[outputId].data[country];\n            series.push({\n              name: (this.outputs[outputId] && this.outputs[outputId].title) ? this.outputs[outputId].title : outputId,\n              id: outputId,\n              value: Math.round(data[data.length-1])\n            })\n          }\n        });\n\n        this.chartsData[chartkey] = {\n          title: title,\n          unit: currChart.unit,\n          series: series\n        }\n      });\n\n      this.currentChart = this.currentChart ? this.currentChart : \"root\";\n      this.chartChain = this.chartChain ? this.chartChain : [this.currentChart];\n      this.isToplevel = this.chartChain.length < 2;\n\n      //check for parts\n      Object.keys(this.chartsData).forEach((seriesKey) => {\n        this.chartsData[seriesKey].series.forEach((entry) => {\n          if(this.chartsData[entry.id]) {\n            entry.hasParts = true;\n          }\n        });\n      });\n\n    }\n  },\n  watch: {\n    'appState.lastAPIResponse': function() {\n      //console.log('lastAPIResponse changed');\n      this.buildData();\n    }\n  },\n  created() {\n    this.buildData();\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n.emissions-chart {\n  max-width: 450px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 20px 100px;\n  border: 1px solid darkgrey;\n}\n</style>\n"]}]}