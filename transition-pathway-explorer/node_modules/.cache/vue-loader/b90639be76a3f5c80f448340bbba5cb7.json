{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/LeversTable.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/LeversTable.vue","mtime":1707210098268},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234682968}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as dataService from '../dataService.js';\nimport * as inputsService from '../inputsService.js';\nimport * as helpers from '../helpers.js';\n\nimport Levers from './Levers.vue';\nimport DropDown from '../lib/DropDown.vue';\nimport PopUpSelect from '../lib/PopUpSelect.vue';\n\n\nexport default {\n  name: 'LeversTable',\n  components: {\n    Levers, DropDown, PopUpSelect\n  },\n  props: ['appState'],\n  data() {\n    return {\n      selected: inputsService.selected //reactive because dynamic names are needed above navigation levers\n    }\n  },\n  created() {\n    this.selectableCountries = inputsService.selectableCountries;\n  },\n  methods: {\n    openCountrySelect() {\n      // don't allow any change when countryZoom is disabled (during a long fetch)\n      if(this.appState.countryZoomDisabled) {\n        return;\n      }\n      this.$refs.countrySelect.toggleOpen(true);\n    },\n    selectCountry(countr) {\n\n      // don't allow any change when countryZoom is disabled (during a long fetch)\n      if(this.appState.countryZoomDisabled) {\n        return;\n      }\n\n      // Mobile and Desktop\n      if(countr && countr.id && countr.id !== 'EU' && inputsService.countries[countr.id]) {\n        inputsService.setSelectedCountry(countr.id);\n      } else {\n        inputsService.unselectCountry();\n        inputsService.checkIfLeversMatchExamplePathway();\n      }\n\n      // Desktop only\n      if(!this.appState.isMobile) {\n        dataService.rewriteURL(dataService.updateURLParams());\n        dataService.debouncedFetch();\n\n        //this triggers the HighCharts built-in redraw event. Not a very elegant solution, but very short\n        helpers.triggerWindowResize();\n      }\n\n      // Mobile only\n      if(this.appState.isMobile) {\n        // send availability request\n        dataService.availabilityRequest();\n      }\n\n    }\n  }\n}\n",{"version":3,"sources":["LeversTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"LeversTable.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"levers-table\">\n    <div id=\"levers-header\" >\n      <span class=\"country-name-field levers-column2\">\n        <span class=\"country-name\">{{selected[0].name}}</span>\n\n        <span class=\"country-toggle-button\" v-if=\"selected.length<2\"\n          :class=\"{deactivated: appState.countryZoomDisabled}\"\n          v-on:click=\"openCountrySelect\"\n          v-on:keydown.enter=\"openCountrySelect\"\n          tabindex=\"0\"\n        >\n          <img src=\"/img/add.svg\">\n        </span>\n        <PopUpSelect ref=\"countrySelect\"\n          :toggle-elem=\"$refs.countryToggle\" :items=\"selectableCountries\"\n          title=\"Zoom into a country within Europe:\"\n          name-prop=\"name\" :callback=\"selectCountry\"\n        />\n\n      </span>\n      <span v-if=\"selected.length===2\" class=\"country-name-field levers-column3\">\n        <span class=\"country-name\">{{selected[1].name}}</span>\n        <span class=\"country-toggle-button\"\n          :class=\"{deactivated: appState.countryZoomDisabled}\"\n          v-on:click=\"selectCountry(false)\"\n          v-on:keydown.enter=\"selectCountry(false)\"\n          tabindex=\"0\"\n        >\n          <img src=\"/img/remove.svg\">\n        </span>\n      </span>\n    </div>\n\n    <div id=\"levers-main\">\n      <Levers :selected=\"selected\" :app-state=\"appState\"/>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport * as dataService from '../dataService.js';\nimport * as inputsService from '../inputsService.js';\nimport * as helpers from '../helpers.js';\n\nimport Levers from './Levers.vue';\nimport DropDown from '../lib/DropDown.vue';\nimport PopUpSelect from '../lib/PopUpSelect.vue';\n\n\nexport default {\n  name: 'LeversTable',\n  components: {\n    Levers, DropDown, PopUpSelect\n  },\n  props: ['appState'],\n  data() {\n    return {\n      selected: inputsService.selected //reactive because dynamic names are needed above navigation levers\n    }\n  },\n  created() {\n    this.selectableCountries = inputsService.selectableCountries;\n  },\n  methods: {\n    openCountrySelect() {\n      // don't allow any change when countryZoom is disabled (during a long fetch)\n      if(this.appState.countryZoomDisabled) {\n        return;\n      }\n      this.$refs.countrySelect.toggleOpen(true);\n    },\n    selectCountry(countr) {\n\n      // don't allow any change when countryZoom is disabled (during a long fetch)\n      if(this.appState.countryZoomDisabled) {\n        return;\n      }\n\n      // Mobile and Desktop\n      if(countr && countr.id && countr.id !== 'EU' && inputsService.countries[countr.id]) {\n        inputsService.setSelectedCountry(countr.id);\n      } else {\n        inputsService.unselectCountry();\n        inputsService.checkIfLeversMatchExamplePathway();\n      }\n\n      // Desktop only\n      if(!this.appState.isMobile) {\n        dataService.rewriteURL(dataService.updateURLParams());\n        dataService.debouncedFetch();\n\n        //this triggers the HighCharts built-in redraw event. Not a very elegant solution, but very short\n        helpers.triggerWindowResize();\n      }\n\n      // Mobile only\n      if(this.appState.isMobile) {\n        // send availability request\n        dataService.availabilityRequest();\n      }\n\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n</style>\n"]}]}