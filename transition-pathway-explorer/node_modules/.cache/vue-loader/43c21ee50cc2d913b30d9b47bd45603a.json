{"remainingRequest":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/src/charts/StackedAreaChart.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/src/charts/StackedAreaChart.vue","mtime":1707210098267},{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PathwayCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234682968}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport chartFixFreeAxisMixin from '../mixins/chartFixFreeAxisMixin.js';\nimport chartUpdateAddSeriesMixin from '../mixins/chartUpdateAddSeriesMixin.js';\n\nimport highcharts from \"highcharts\";\nimport exporting from \"highcharts/modules/exporting\";\nimport exportData from \"highcharts/modules/export-data\";\nimport more from 'highcharts/highcharts-more';\n\n// https://api.highcharts.com/highcharts/plotOptions.series.label\n// Series labels are placed as close to the series as possible in a natural way, seeking to avoid other series.\n// The goal of this feature is to make the chart more easily readable, like if a human designer placed the labels in the optimal position.\nimport seriesLabels from \"highcharts/modules/series-label\";\n\nexport default {\n  name: 'StackedAreaChart',\n  mixins: [chartFixFreeAxisMixin, chartUpdateAddSeriesMixin],\n  props: ['chartData'], //chartData.title, chartData.timeAxis, chartData.series\n  data: function() {\n    return {\n      axisFixed: false\n    }\n  },\n  watch: {\n    chartData: {\n      handler() {\n        this.updateChart();\n      }\n      //doesn't need to be a deep watch, because the whole object gets replaced\n    }\n  },\n  mounted() {\n    var container = this.$refs.chart;\n\n    // activate highcharts plugins\n    exporting(highcharts);\n    exportData(highcharts);\n    seriesLabels(highcharts);\n    more(highcharts);\n\n    this.chart = new highcharts.Chart({\n      chart: {\n        renderTo: container,\n        type: 'area',\n        spacingBottom: 30\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: this.chartData.title\n      },\n      xAxis: {\n        tickmarkPlacement: 'on',\n        plotBands: [{ // mark the weekend\n          color: 'rgba(255,255,255,0.6)',\n          from: 2015,\n          to: 2019.91,\n          zIndex: 4\n        }],\n        title: {\n          enabled: false\n        },\n        tickInterval: 5 //5 years\n      },\n      yAxis: {\n        title: {\n          useHTML: true,\n          text: this.chartData.unit\n        }\n      },\n      tooltip: {\n        split: true,\n        formatter: function() {\n          // The first returned item is the header, subsequent items are the\n          // points\n          let isNullstelle;\n          let res = ['<b>' + this.x + '</b>'].concat(\n              this.points.map(function (point) {\n                // console.log('point ', point);\n                if(point.point && point.point.noTooltip) {\n                  isNullstelle = true;\n                  return false;\n                }\n                if(Number.isInteger(point.y)) {\n                  return point.series.name + ': ' + point.y;\n                } else {\n                  return point.series.name + ': ' + point.y.toFixed(2);\n                }\n              })\n          );\n\n          if(isNullstelle) {\n            return false;\n          } else {\n            return res;\n          }\n        }\n      },\n      plotOptions: {\n        area: {\n          stacking: 'normal',\n          lineColor: '#666666',\n          lineWidth: 0,\n          connectNulls: true, // important, otherwise the areas connecting to null values can be cut off\n        },\n        arearange: {\n          color: \"white\",\n          fillOpacity: 0.5,\n          enableMouseTracking: false\n        },\n        series: {\n          marker: {\n            enabled: false\n          },\n          pointStart: this.chartData.timeAxis ? this.chartData.timeAxis[0] : undefined\n        }\n      },\n      responsive: {\n        rules: [{\n          condition: {\n            maxWidth: 500\n          }\n        }]\n      },\n      exporting: {\n        menuItemDefinitions: {\n          // Custom definition\n          fixAxis: {\n            onclick: this.fixAxis,\n            text: 'Fixed axis'\n          },\n          freeAxis: {\n            onclick: this.freeAxis,\n            text: 'Auto axis'\n          }\n        },\n        buttons: {\n          contextButton: {\n            menuItems: [\n              \"fixAxis\",\n              \"freeAxis\",\n              \"separator\",\n              \"printChart\",\n              \"separator\",\n              \"downloadPNG\",\n              \"downloadJPEG\",\n              \"downloadPDF\",\n              \"downloadSVG\",\n              \"separator\",\n              \"downloadCSV\",\n              \"downloadXLS\"\n            ]\n          }\n        }\n      },\n      series: this.chartData.series\n    });\n  },\n  beforeDestroy() {\n    if(this.chart) {\n      this.chart.destroy();\n    }\n  },\n}\n",{"version":3,"sources":["StackedAreaChart.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StackedAreaChart.vue","sourceRoot":"src/charts","sourcesContent":["<template>\n  <div class=\"chart-container\">\n    <div class=\"chart\" :class=\"{'fixed-axis': axisFixed, 'free-axis': !axisFixed}\" ref=\"chart\"></div>\n  </div>\n</template>\n\n<script>\nimport chartFixFreeAxisMixin from '../mixins/chartFixFreeAxisMixin.js';\nimport chartUpdateAddSeriesMixin from '../mixins/chartUpdateAddSeriesMixin.js';\n\nimport highcharts from \"highcharts\";\nimport exporting from \"highcharts/modules/exporting\";\nimport exportData from \"highcharts/modules/export-data\";\nimport more from 'highcharts/highcharts-more';\n\n// https://api.highcharts.com/highcharts/plotOptions.series.label\n// Series labels are placed as close to the series as possible in a natural way, seeking to avoid other series.\n// The goal of this feature is to make the chart more easily readable, like if a human designer placed the labels in the optimal position.\nimport seriesLabels from \"highcharts/modules/series-label\";\n\nexport default {\n  name: 'StackedAreaChart',\n  mixins: [chartFixFreeAxisMixin, chartUpdateAddSeriesMixin],\n  props: ['chartData'], //chartData.title, chartData.timeAxis, chartData.series\n  data: function() {\n    return {\n      axisFixed: false\n    }\n  },\n  watch: {\n    chartData: {\n      handler() {\n        this.updateChart();\n      }\n      //doesn't need to be a deep watch, because the whole object gets replaced\n    }\n  },\n  mounted() {\n    var container = this.$refs.chart;\n\n    // activate highcharts plugins\n    exporting(highcharts);\n    exportData(highcharts);\n    seriesLabels(highcharts);\n    more(highcharts);\n\n    this.chart = new highcharts.Chart({\n      chart: {\n        renderTo: container,\n        type: 'area',\n        spacingBottom: 30\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: this.chartData.title\n      },\n      xAxis: {\n        tickmarkPlacement: 'on',\n        plotBands: [{ // mark the weekend\n          color: 'rgba(255,255,255,0.6)',\n          from: 2015,\n          to: 2019.91,\n          zIndex: 4\n        }],\n        title: {\n          enabled: false\n        },\n        tickInterval: 5 //5 years\n      },\n      yAxis: {\n        title: {\n          useHTML: true,\n          text: this.chartData.unit\n        }\n      },\n      tooltip: {\n        split: true,\n        formatter: function() {\n          // The first returned item is the header, subsequent items are the\n          // points\n          let isNullstelle;\n          let res = ['<b>' + this.x + '</b>'].concat(\n              this.points.map(function (point) {\n                // console.log('point ', point);\n                if(point.point && point.point.noTooltip) {\n                  isNullstelle = true;\n                  return false;\n                }\n                if(Number.isInteger(point.y)) {\n                  return point.series.name + ': ' + point.y;\n                } else {\n                  return point.series.name + ': ' + point.y.toFixed(2);\n                }\n              })\n          );\n\n          if(isNullstelle) {\n            return false;\n          } else {\n            return res;\n          }\n        }\n      },\n      plotOptions: {\n        area: {\n          stacking: 'normal',\n          lineColor: '#666666',\n          lineWidth: 0,\n          connectNulls: true, // important, otherwise the areas connecting to null values can be cut off\n        },\n        arearange: {\n          color: \"white\",\n          fillOpacity: 0.5,\n          enableMouseTracking: false\n        },\n        series: {\n          marker: {\n            enabled: false\n          },\n          pointStart: this.chartData.timeAxis ? this.chartData.timeAxis[0] : undefined\n        }\n      },\n      responsive: {\n        rules: [{\n          condition: {\n            maxWidth: 500\n          }\n        }]\n      },\n      exporting: {\n        menuItemDefinitions: {\n          // Custom definition\n          fixAxis: {\n            onclick: this.fixAxis,\n            text: 'Fixed axis'\n          },\n          freeAxis: {\n            onclick: this.freeAxis,\n            text: 'Auto axis'\n          }\n        },\n        buttons: {\n          contextButton: {\n            menuItems: [\n              \"fixAxis\",\n              \"freeAxis\",\n              \"separator\",\n              \"printChart\",\n              \"separator\",\n              \"downloadPNG\",\n              \"downloadJPEG\",\n              \"downloadPDF\",\n              \"downloadSVG\",\n              \"separator\",\n              \"downloadCSV\",\n              \"downloadXLS\"\n            ]\n          }\n        }\n      },\n      series: this.chartData.series\n    });\n  },\n  beforeDestroy() {\n    if(this.chart) {\n      this.chart.destroy();\n    }\n  },\n}\n</script>\n\n<style>\n</style>\n"]}]}