{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/eslint-loader/index.js??ref--13-0!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/inputsService.js","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/inputsService.js","mtime":1707210098283},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/eslint-loader/index.js","mtime":1707234519720}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _defineProperty from \"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/web.dom.iterable\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Vue from \"vue\"; //vue.set() used with selected, maybe not necessary\n\nimport * as helpers from \"./helpers.js\";\nimport { appState } from \"./dataService.js\";\nimport { paramToValueMap, valueToParamMap } from \"./config/pathwayValueMap.js\";\nimport { ExamplePathways } from \"./config/examplePathways.js\"; // lever data\n\nexport var leverSectors;\nexport var leverGroups; //reactive, used inside data() in Levers.vue\n\nexport var levers = {};\nexport var leverOrder = [];\nexport var highlightedLevers = {};\nexport var euOnlyLevers = [\"lever_bal-strat\", \"lever_str_charging\"]; // [\"lever_passenger_modal-share\"];\n// example-Pathways\n\nexport var examplePathways = ExamplePathways; // countries\n\nexport var countries; //does not contain \"EU\" entry\n\nexport var selected = []; // reactive\n\nexport var selectableCountries = [];\nvar defaultValues = {}; // tooltips\n\nexport var tooltips = {}; // onepagers\n\nexport var onepagers = {}; // content loaded asynchronously\n\nfunction initSingleLever(rawLever) {\n  var levObj = {\n    title: rawLever.title,\n    range: [],\n    type: rawLever.type ? rawLever.type : 'num' //'num' is the default type\n\n  };\n\n  if (rawLever.range) {\n    rawLever.range.forEach(function (step, index) {\n      levObj.range.push(index + 1);\n    });\n  } else {\n    levObj.range = [1, 2, 3, 4]; //default range\n  } // set the isEUOnly flag if lever is eu-only-lever\n\n\n  if (euOnlyLevers.includes(rawLever.code)) {\n    levObj.isEUOnly = true;\n  }\n\n  levers[rawLever.code] = levObj;\n  leverOrder.push(rawLever.code);\n}\n\nexport function parseLeverData(data) {\n  // translates API lever response to the structure the front-end understands\n  var topGroups = [];\n  var groups = {};\n  data.forEach(function (lever) {\n    //sort in lever info\n    initSingleLever(lever); //sort in group info\n\n    if (!groups[lever.group]) {\n      groups[lever.group] = {\n        title: lever.group,\n        levers: [lever.code],\n        deactivated: false\n      };\n    } else {\n      groups[lever.group].levers.push(lever.code);\n    } //sort in topGroup info (leverSectors)\n\n\n    var topGroup; //Array.find() not supported in IE\n\n    topGroups.some(function (tg, index) {\n      if (tg.headline === lever.headline) {\n        topGroup = topGroups[index];\n        return true;\n      } else {\n        return false;\n      }\n    });\n\n    if (!topGroup) {\n      topGroups.push({\n        headline: lever.headline,\n        groups: [lever.group]\n      });\n    } else {\n      //only add group once, skip if group is already present!\n      if (topGroup.groups.indexOf(lever.group) < 0) {\n        topGroup.groups.push(lever.group);\n      }\n    }\n  }); // console.log('parseLeverData ', levers);\n\n  initleverSectors(topGroups);\n  initleverGroups(groups);\n}\n\nfunction initleverSectors(sectors) {\n  leverSectors = sectors;\n}\n\nfunction initleverGroups(groups) {\n  leverGroups = groups;\n  Object.keys(leverGroups).forEach(function (groupId) {\n    // test if all ranges within that group are equal.\n    // If yes, the group get's its own range property which allows for a group-lever\n    var group = leverGroups[groupId]; //abort if the group doesn't have a title, then it's maximized and non-interactive by default\n    //basically it's not really visible then, but its content is\n\n    if (!group.title) {\n      return;\n    }\n\n    var range = levers[group.levers[0]].range.slice();\n    var equal = group.levers.every(function (levId) {\n      return helpers.arraysEqual(range, levers[levId].range.slice());\n    });\n\n    if (equal) {\n      group.range = range;\n      group.type = levers[group.levers[0]].type;\n    } //minimize group by default\n\n\n    group.hidden = true;\n  });\n  console.log('initleverGroups ', leverGroups);\n}\n\nexport function initCountries(countrs) {\n  countries = countrs;\n  selectableCountries = [];\n  Object.keys(countrs).forEach(function (id) {\n    selectableCountries.push({\n      id: id,\n      name: countrs[id].name\n    });\n  }); //sort them alphabetically\n\n  selectableCountries.sort(function (a, b) {\n    if (a.name < b.name) {\n      return -1;\n    }\n\n    if (a.name > b.name) {\n      return 1;\n    }\n\n    return 0;\n  });\n  selected.push({\n    id: \"EU\",\n    name: \"France\",\n    values: _objectSpread({}, defaultValues)\n  });\n}\nexport function deactivateGroups(arrayOfGroupIds) {\n  arrayOfGroupIds.forEach(function (id) {\n    var group = leverGroups[id];\n\n    if (group) {\n      // \"deactivated\" is a reactive property\n      group.deactivated = true;\n    }\n  });\n}\nexport function activateAllGroups() {\n  Object.keys(leverGroups).forEach(function (id) {\n    // \"deactivated\" is a reactive property\n    leverGroups[id].deactivated = false;\n  });\n}\nexport function deactivateCountryZoom() {\n  appState.countryZoomDisabled = true;\n}\nexport function activateCountryZoom() {\n  appState.countryZoomDisabled = false;\n}\nexport function paramStringToPathway(paramString) {\n  // paramString needs to be a string\n  // returns an array of lever-settings [1,1.2,4,2,...]\n  // returns false if conversion fails (paramString invalid)\n  // console.log('paramStringToPathway ', paramString);\n  var pathwayString = paramString.split('');\n  var pathway = [];\n  pathwayString.forEach(function (character) {\n    //console.log('character ', character);\n    var value = paramToValueMap[character];\n\n    if (value) {\n      pathway.push(value);\n    }\n  });\n\n  if (pathway.length !== leverOrder.length) {\n    //console.log('paramStringToPathway ', pathway);\n    return false;\n  } else {\n    return pathway;\n  }\n}\nexport function pathwayObjectToParamString(pathwayObj) {\n  var paramString = '';\n  leverOrder.forEach(function (id) {\n    var val = pathwayObj[id];\n    var character = valueToParamMap[val];\n\n    if (character) {\n      paramString += character;\n    }\n  });\n\n  if (paramString.length !== leverOrder.length) {\n    console.log('length doesnt match ', paramString);\n    return ''; //returning empty string (falsy)\n  } else {\n    return paramString;\n  }\n}\nexport function setInputsFromURLParameters(euLeversString, otherLeversString, country_Code) {\n  // sets the inputs state according to the given parameters, falls back to the first example pathway if\n  // any of the parameters is not valid\n  console.log('setInputsFromURLParameters ', euLeversString, otherLeversString, countryCode);\n  var europePathway;\n  var countryPathway;\n  var countryCode; // validating paramters\n\n  if (euLeversString) {\n    europePathway = paramStringToPathway(euLeversString);\n  }\n\n  if (otherLeversString && country_Code) {\n    countryCode = country_Code.trim().substring(0, 2).toUpperCase();\n    countryPathway = paramStringToPathway(otherLeversString);\n  } // setting inputs state\n\n\n  if (europePathway) {\n    setPathway(europePathway, 'EU');\n  } else {\n    setExamplePathway(0);\n  }\n\n  if (isCountryCodeValid(countryCode) && countryPathway) {\n    setSelectedCountry(countryCode);\n    setPathway(countryPathway, countryCode);\n  } else {\n    unselectCountry();\n  }\n}\nexport function resetHighlightedLevers() {\n  Object.keys(highlightedLevers).forEach(function (key) {\n    Vue.delete(highlightedLevers, key);\n  });\n}\nexport function addToHighlightedLevers(levIds) {\n  levIds.forEach(function (id) {\n    Vue.set(highlightedLevers, id, true);\n  });\n}\nexport function isCountryCodeValid(code) {\n  return countries[code] && code !== \"EU\";\n}\nexport function unselectCountry() {\n  Vue.delete(selected, '1');\n  appState.countryZoomIndex = 0; // for outputs\n\n  if (appState.userAction.indexOf('countryChange') < 0) {\n    appState.userAction.push('countryChange');\n  }\n}\nexport function setSelectedCountry(id) {\n  //for now it only sets the second country with the EU values as initial values\n  //check if id exists!! Because this function is also called from route\n  if (!countries[id]) {\n    return;\n  }\n\n  Vue.set(selected, 1, {\n    id: id,\n    name: countries[id].name,\n    values: _objectSpread({}, selected[0].values) //JS spread syntax\n\n  }); // Some levers don't allow any changes on a single country-level, but just EU-values.\n  // Define a getter for each \"eu-values-only-lever\" that points to the EU-value of that lever\n  // this also triggers on routing and url-parameter values get corrected\n  // because during routing:\n  // 1. appState is set according to url-parameters\n  //    during that step the app-state is adapted if the parameters are invalid\n  //    or if levers are eu-only-values\n  // 2. at the end of the route process the querystring gets updated to the actual app-state\n\n  euOnlyLevers.forEach(function (leverId) {\n    Object.defineProperty(selected[1].values, leverId, {\n      get: function get() {\n        return selected[0].values[leverId];\n      }\n    });\n  });\n\n  if (appState.userAction.indexOf('countryChange') < 0) {\n    appState.userAction.push('countryChange');\n  }\n}\nexport function setExamplePathway(index) {\n  //sets the pathway for EU and for the selected country (if any)\n  var examplePathway = examplePathways[index];\n\n  if (!examplePathway) {\n    return;\n  }\n\n  console.log('setExamplePathway ', examplePathway.values);\n  selected.forEach(function (region) {\n    setPathway(examplePathway.values, region.id);\n  });\n  appState.pathwayIndex = index;\n}\nexport function setPathway(pathway, regionCode) {\n  // pathway: an array of numerical lever-settings in the order of the url-param, like: [1,1.1,2,1,...]\n  // TODO: return false if no region found or pathway has wrong format\n  var leversSettings = pathway; //1. find region entry in selected\n\n  var regionIndex;\n\n  for (var i = 0, len = selected.length; i < len; i++) {\n    if (selected[i].id === regionCode) {\n      regionIndex = i;\n      break;\n    }\n  }\n\n  if (typeof regionIndex !== 'undefined') {\n    //regionIndex can be zero\n    var val;\n    var rangeMax;\n    leverOrder.forEach(function (id, ind) {\n      val = leversSettings[ind];\n      rangeMax = levers[id].range[levers[id].range.length - 1]; //the actual last entry\n\n      val = val > rangeMax ? rangeMax : val;\n      Vue.set(selected[regionIndex].values, id, val);\n    });\n\n    if (appState.userAction.indexOf('leverChange') < 0) {\n      appState.userAction.push('leverChange');\n    }\n  }\n}\nexport function checkIfLeversMatchExamplePathway() {\n  //checks for EU values AND selected country values (if any) matching any example pathway\n  var currEUValues = paramStringToPathway(pathwayObjectToParamString(selected[0].values));\n  var currSingleCountryValues;\n\n  if (selected[1]) {\n    currSingleCountryValues = paramStringToPathway(pathwayObjectToParamString(selected[1].values));\n  }\n\n  for (var i = 0, len = examplePathways.length; i < len; i++) {\n    if (helpers.arraysEqual(currEUValues, examplePathways[i].values)) {\n      if (currSingleCountryValues) {\n        if (helpers.arraysEqual(currSingleCountryValues, examplePathways[i].values)) {\n          appState.pathwayIndex = i;\n          return true;\n        }\n      } else {\n        appState.pathwayIndex = i;\n        return true;\n      }\n    }\n  } // important, if pathway doesn't match an example pathway reset the pathwayIndex\n\n\n  appState.pathwayIndex = -1;\n  return false;\n}\nexport function setGroupValue(country, groupid, value) {\n  var group = leverGroups[groupid];\n  group.levers.forEach(function (levId) {\n    // make sure to ignore getter-functions (which can only be defined on non-EU values)\n    if (levers[levId].isEUOnly && country.id !== 'EU') {\n      return;\n    }\n\n    country.values[levId + ''] = value;\n  });\n  checkIfLeversMatchExamplePathway();\n\n  if (appState.userAction.indexOf('leverChange') < 0) {\n    appState.userAction.push('leverChange');\n  }\n}\nexport function setValue(country, leverid, value) {\n  // country is reactive, because it is part of selected!!\n  country.values[leverid + ''] = value;\n  checkIfLeversMatchExamplePathway();\n\n  if (appState.userAction.indexOf('leverChange') < 0) {\n    appState.userAction.push('leverChange');\n  }\n}\nexport function getLeversByRegion() {\n  var countryCodes = selected.map(function (region) {\n    return region.id;\n  });\n  var levsByRegion = {};\n  countryCodes.forEach(function (code) {\n    levsByRegion[code] = [];\n  });\n  leverOrder.forEach(function (leverId) {\n    countryCodes.forEach(function (code, countryIndex) {\n      var value = selected[countryIndex].values[leverId];\n      levsByRegion[code].push(value);\n    });\n  });\n  console.log('getLeversByRegion ', levsByRegion);\n  return levsByRegion;\n}\nexport function showInputInfo(leverId) {\n  appState.modalFor = leverId;\n}\nexport function hideInputInfo() {\n  appState.modalFor = undefined;\n}\nexport function parseTooltips(toolTipData) {\n  //adding\n  Object.keys(toolTipData).forEach(function (levrId) {\n    Vue.set(tooltips, levrId, toolTipData[levrId]);\n  });\n}",{"version":3,"sources":["/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/inputsService.js"],"names":["Vue","helpers","appState","paramToValueMap","valueToParamMap","ExamplePathways","leverSectors","leverGroups","levers","leverOrder","highlightedLevers","euOnlyLevers","examplePathways","countries","selected","selectableCountries","defaultValues","tooltips","onepagers","initSingleLever","rawLever","levObj","title","range","type","forEach","step","index","push","includes","code","isEUOnly","parseLeverData","data","topGroups","groups","lever","group","deactivated","topGroup","some","tg","headline","indexOf","initleverSectors","initleverGroups","sectors","Object","keys","groupId","slice","equal","every","levId","arraysEqual","hidden","console","log","initCountries","countrs","id","name","sort","a","b","values","deactivateGroups","arrayOfGroupIds","activateAllGroups","deactivateCountryZoom","countryZoomDisabled","activateCountryZoom","paramStringToPathway","paramString","pathwayString","split","pathway","character","value","length","pathwayObjectToParamString","pathwayObj","val","setInputsFromURLParameters","euLeversString","otherLeversString","country_Code","countryCode","europePathway","countryPathway","trim","substring","toUpperCase","setPathway","setExamplePathway","isCountryCodeValid","setSelectedCountry","unselectCountry","resetHighlightedLevers","key","delete","addToHighlightedLevers","levIds","set","countryZoomIndex","userAction","leverId","defineProperty","get","examplePathway","region","pathwayIndex","regionCode","leversSettings","regionIndex","i","len","rangeMax","ind","checkIfLeversMatchExamplePathway","currEUValues","currSingleCountryValues","setGroupValue","country","groupid","setValue","leverid","getLeversByRegion","countryCodes","map","levsByRegion","countryIndex","showInputInfo","modalFor","hideInputInfo","undefined","parseTooltips","toolTipData","levrId"],"mappings":"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","sourcesContent":["import Vue from \"vue\"; //vue.set() used with selected, maybe not necessary\nimport * as helpers from './helpers.js';\n\nimport {appState} from './dataService.js';\n\nimport {paramToValueMap, valueToParamMap} from './config/pathwayValueMap.js';\nimport {ExamplePathways} from './config/examplePathways.js';\n\n// lever data\nexport var leverSectors;\nexport var leverGroups;   //reactive, used inside data() in Levers.vue\nexport var levers = {};\nexport var leverOrder=[];\nexport var highlightedLevers = {};\nexport var euOnlyLevers = [\"lever_bal-strat\", \"lever_str_charging\"]; // [\"lever_passenger_modal-share\"];\n\n// example-Pathways\nexport var examplePathways = ExamplePathways;\n\n// countries\nexport var countries; //does not contain \"EU\" entry\nexport var selected = []; // reactive\nexport var selectableCountries = [];\n\nvar defaultValues = {};\n\n// tooltips\nexport var tooltips = {};\n\n// onepagers\nexport var onepagers = {}; // content loaded asynchronously\n\nfunction initSingleLever(rawLever) {\n\n  let levObj = {\n    title: rawLever.title,\n    range: [],\n    type: rawLever.type ? rawLever.type : 'num' //'num' is the default type\n  }\n  if(rawLever.range) {\n    rawLever.range.forEach((step, index) => {\n      levObj.range.push(index+1);\n    });\n  } else {\n    levObj.range = [1,2,3,4] //default range\n  }\n\n  // set the isEUOnly flag if lever is eu-only-lever\n  if(euOnlyLevers.includes(rawLever.code)) {\n    levObj.isEUOnly = true;\n  }\n\n  levers[rawLever.code] = levObj;\n  leverOrder.push(rawLever.code);\n}\n\nexport function parseLeverData(data) {\n  // translates API lever response to the structure the front-end understands\n  let topGroups = [];\n  let groups = {};\n\n  data.forEach((lever)=> {\n    //sort in lever info\n    initSingleLever(lever);\n\n    //sort in group info\n    if(!groups[lever.group]) {\n      groups[lever.group] = {\n        title: lever.group,\n        levers: [lever.code],\n        deactivated: false\n      };\n    } else {\n      groups[lever.group].levers.push(lever.code);\n    }\n\n    //sort in topGroup info (leverSectors)\n    let topGroup;\n\n    //Array.find() not supported in IE\n    topGroups.some((tg, index) => {\n      if(tg.headline === lever.headline) {\n        topGroup = topGroups[index];\n        return true;\n      } else {\n        return false;\n      }\n    });\n\n    if(!topGroup) {\n      topGroups.push({\n        headline: lever.headline,\n        groups:[lever.group]\n      });\n    } else {\n      //only add group once, skip if group is already present!\n      if(topGroup.groups.indexOf(lever.group) < 0) {\n        topGroup.groups.push(lever.group);\n      }\n    }\n\n  });\n\n  // console.log('parseLeverData ', levers);\n  initleverSectors(topGroups);\n  initleverGroups(groups);\n}\n\nfunction initleverSectors(sectors) {\n  leverSectors = sectors;\n}\n\nfunction initleverGroups(groups) {\n  leverGroups = groups;\n\n  Object.keys(leverGroups).forEach(function(groupId) {\n\n    // test if all ranges within that group are equal.\n    // If yes, the group get's its own range property which allows for a group-lever\n\n    let group = leverGroups[groupId];\n\n    //abort if the group doesn't have a title, then it's maximized and non-interactive by default\n    //basically it's not really visible then, but its content is\n    if(!group.title) {\n      return;\n    }\n\n    let range = levers[group.levers[0]].range.slice();\n\n    let equal = group.levers.every(function(levId) {\n      return (helpers.arraysEqual(range,levers[levId].range.slice()));\n    });\n\n    if(equal) {\n      group.range = range;\n      group.type = levers[group.levers[0]].type;\n    }\n    //minimize group by default\n    group.hidden = true;\n  });\n  console.log('initleverGroups ', leverGroups);\n}\n\nexport function initCountries(countrs) {\n\n  countries = countrs;\n\n  selectableCountries = [];\n\n  Object.keys(countrs).forEach(function(id) {\n    selectableCountries.push({id: id, name: countrs[id].name});\n  });\n  //sort them alphabetically\n  selectableCountries.sort(function(a, b){\n    if(a.name < b.name) { return -1; }\n    if(a.name > b.name) { return 1; }\n    return 0;\n  })\n\n  selected.push( {\n    id: \"EU\",\n    name: \"France\",\n    values: {...defaultValues}\n  });\n}\n\nexport function deactivateGroups(arrayOfGroupIds) {\n  arrayOfGroupIds.forEach((id)=> {\n    let group = leverGroups[id];\n    if(group) {\n      // \"deactivated\" is a reactive property\n      group.deactivated = true;\n    }\n  });\n}\n\nexport function activateAllGroups() {\n  Object.keys(leverGroups).forEach((id)=> {\n    // \"deactivated\" is a reactive property\n    leverGroups[id].deactivated = false;\n  });\n}\n\nexport function deactivateCountryZoom() {\n  appState.countryZoomDisabled = true;\n}\n\nexport function activateCountryZoom() {\n  appState.countryZoomDisabled = false;\n}\n\nexport function paramStringToPathway(paramString) {\n  // paramString needs to be a string\n  // returns an array of lever-settings [1,1.2,4,2,...]\n  // returns false if conversion fails (paramString invalid)\n\n  // console.log('paramStringToPathway ', paramString);\n  let pathwayString = paramString.split('');\n  let pathway = [];\n\n  pathwayString.forEach((character) => {\n    //console.log('character ', character);\n    let value = paramToValueMap[character];\n    if(value) {\n      pathway.push(value);\n    }\n  });\n\n  if(pathway.length !== leverOrder.length) {\n    //console.log('paramStringToPathway ', pathway);\n    return false;\n  } else {\n    return pathway;\n  }\n\n}\n\nexport function pathwayObjectToParamString(pathwayObj) {\n\n  let paramString = '';\n  leverOrder.forEach((id) => {\n    let val = pathwayObj[id];\n    let character = valueToParamMap[val];\n    if(character) {\n      paramString += character;\n    }\n  });\n\n  if(paramString.length !== leverOrder.length) {\n    console.log('length doesnt match ', paramString)\n    return ''; //returning empty string (falsy)\n  } else {\n    return paramString;\n  }\n}\n\nexport function setInputsFromURLParameters(euLeversString, otherLeversString, country_Code) {\n  // sets the inputs state according to the given parameters, falls back to the first example pathway if\n  // any of the parameters is not valid\n\n  console.log('setInputsFromURLParameters ', euLeversString, otherLeversString, countryCode);\n  let europePathway;\n  let countryPathway;\n  let countryCode;\n\n  // validating paramters\n  if(euLeversString) {\n    europePathway = paramStringToPathway(euLeversString);\n  }\n  if(otherLeversString && country_Code) {\n    countryCode = country_Code.trim().substring(0,2).toUpperCase();\n    countryPathway = paramStringToPathway(otherLeversString);\n  }\n\n  // setting inputs state\n  if(europePathway) {\n    setPathway(europePathway, 'EU');\n  } else {\n    setExamplePathway(0);\n  }\n  if(isCountryCodeValid(countryCode) && countryPathway) {\n    setSelectedCountry(countryCode);\n    setPathway(countryPathway, countryCode);\n  } else {\n    unselectCountry();\n  }\n}\n\nexport function resetHighlightedLevers() {\n  Object.keys(highlightedLevers).forEach((key) => {\n    Vue.delete(highlightedLevers, key);\n  });\n}\n\nexport function addToHighlightedLevers(levIds) {\n  levIds.forEach((id)=> {\n    Vue.set(highlightedLevers, id, true);\n  });\n}\n\nexport function isCountryCodeValid(code) {\n  return countries[code] && code !== \"EU\";\n}\n\nexport function unselectCountry() {\n  Vue.delete(selected, '1');\n  appState.countryZoomIndex = 0; // for outputs\n\n  if(appState.userAction.indexOf('countryChange') < 0) {\n    appState.userAction.push('countryChange');\n  }\n}\n\nexport function setSelectedCountry(id) {\n  //for now it only sets the second country with the EU values as initial values\n\n  //check if id exists!! Because this function is also called from route\n  if(!countries[id]) {\n    return;\n  }\n\n  Vue.set(selected, 1, {\n    id: id,\n    name: countries[id].name,\n    values: {...selected[0].values} //JS spread syntax\n  });\n\n  // Some levers don't allow any changes on a single country-level, but just EU-values.\n  // Define a getter for each \"eu-values-only-lever\" that points to the EU-value of that lever\n  // this also triggers on routing and url-parameter values get corrected\n  // because during routing:\n  // 1. appState is set according to url-parameters\n  //    during that step the app-state is adapted if the parameters are invalid\n  //    or if levers are eu-only-values\n  // 2. at the end of the route process the querystring gets updated to the actual app-state\n  euOnlyLevers.forEach((leverId)=> {\n    Object.defineProperty(selected[1].values, leverId, {\n      get: function() {\n        return selected[0].values[leverId];\n      }\n    });\n  });\n\n  if(appState.userAction.indexOf('countryChange') < 0) {\n    appState.userAction.push('countryChange');\n  }\n\n}\n\nexport function setExamplePathway(index) {\n  //sets the pathway for EU and for the selected country (if any)\n  let examplePathway = examplePathways[index];\n  if(!examplePathway) {\n    return;\n  }\n  console.log('setExamplePathway ', examplePathway.values);\n  selected.forEach((region) => {\n    setPathway(examplePathway.values, region.id);\n  });\n\n  appState.pathwayIndex = index;\n}\n\nexport function setPathway(pathway, regionCode) {\n  // pathway: an array of numerical lever-settings in the order of the url-param, like: [1,1.1,2,1,...]\n  // TODO: return false if no region found or pathway has wrong format\n  let leversSettings = pathway;\n\n  //1. find region entry in selected\n  let regionIndex;\n  for(let i=0, len=selected.length; i<len; i++) {\n    if(selected[i].id === regionCode) {\n      regionIndex = i;\n      break;\n    }\n  }\n\n  if(typeof regionIndex !== 'undefined') { //regionIndex can be zero\n\n    let val;\n    let rangeMax;\n    leverOrder.forEach((id, ind) => {\n      val = leversSettings[ind];\n\n      rangeMax = levers[id].range[levers[id].range.length-1]; //the actual last entry\n      val = val > rangeMax ? rangeMax : val;\n\n      Vue.set(selected[regionIndex].values, id, val);\n    });\n\n    if(appState.userAction.indexOf('leverChange') < 0) {\n      appState.userAction.push('leverChange');\n    }\n  }\n}\n\nexport function checkIfLeversMatchExamplePathway() {\n  //checks for EU values AND selected country values (if any) matching any example pathway\n\n  let currEUValues = paramStringToPathway(pathwayObjectToParamString(selected[0].values));\n\n  let currSingleCountryValues;\n  if(selected[1]) {\n    currSingleCountryValues = paramStringToPathway(pathwayObjectToParamString(selected[1].values));\n  }\n\n  for(let i=0, len=examplePathways.length; i<len; i++) {\n    if(helpers.arraysEqual(currEUValues, examplePathways[i].values)) {\n      if(currSingleCountryValues) {\n        if(helpers.arraysEqual(currSingleCountryValues, examplePathways[i].values)) {\n          appState.pathwayIndex = i;\n          return true;\n        }\n      } else {\n        appState.pathwayIndex = i;\n        return true;\n      }\n    }\n  }\n  // important, if pathway doesn't match an example pathway reset the pathwayIndex\n  appState.pathwayIndex = -1;\n  return false;\n}\n\nexport function setGroupValue(country, groupid, value) {\n  let group = leverGroups[groupid];\n  group.levers.forEach(function(levId) {\n\n    // make sure to ignore getter-functions (which can only be defined on non-EU values)\n    if(levers[levId].isEUOnly && country.id !== 'EU') {\n      return;\n    }\n    country.values[levId+''] = value;\n  });\n\n  checkIfLeversMatchExamplePathway();\n\n  if(appState.userAction.indexOf('leverChange') < 0) {\n    appState.userAction.push('leverChange');\n  }\n}\n\nexport function setValue(country, leverid, value) {\n  // country is reactive, because it is part of selected!!\n  country.values[leverid+''] = value;\n\n  checkIfLeversMatchExamplePathway();\n\n  if(appState.userAction.indexOf('leverChange') < 0) {\n    appState.userAction.push('leverChange');\n  }\n}\n\n\nexport function getLeversByRegion() {\n  let countryCodes = selected.map((region) => region.id);\n\n  let levsByRegion = {};\n  countryCodes.forEach((code) => {\n    levsByRegion[code] = [];\n  });\n\n  leverOrder.forEach((leverId) => {\n    countryCodes.forEach((code, countryIndex) => {\n      let value = selected[countryIndex].values[leverId];\n      levsByRegion[code].push(value);\n    });\n  });\n\n  console.log('getLeversByRegion ', levsByRegion);\n  return levsByRegion;\n}\n\nexport function showInputInfo(leverId) {\n  appState.modalFor = leverId;\n}\n\nexport function hideInputInfo() {\n  appState.modalFor = undefined;\n}\n\nexport function parseTooltips(toolTipData) {\n  //adding\n  Object.keys(toolTipData).forEach((levrId) => {\n    Vue.set(tooltips, levrId, toolTipData[levrId]);\n  });\n}\n"]}]}