{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/emissions/EmissionsByCountry.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/emissions/EmissionsByCountry.vue","mtime":1707210098278},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234519986}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\nimport LineChart from \"../../../charts/LineChart.vue\";\nexport default {\n  name: 'EmissionsByCountry',\n  components: {\n    LineChart: LineChart\n  },\n  props: ['subtab', 'outputs', 'chartDefinitions', 'appState'],\n  data: function data() {\n    return {\n      chart1Data: {} //needs to be made reactive here, otherwise change is not propagated to child-component\n\n    };\n  },\n  methods: {\n    buildData: function buildData() {\n      var _this = this;\n\n      //    console.log('EmissionsByCountry ', this.chartDefinitions[this.subtab.charts[0]], this.outputs, this.subtab);\n\n      /*\n            //console.log('EmissionsByCountry ', allCountriesResponse);\n      \n            let currChart = this.chartDefinitions[this.subtab.charts[0]];\n            var timeAxis = allCountriesResponse.timeAxis;\n            var series = [];\n      \n            //go through countries\n            Object.keys(allCountriesResponse.data).forEach((countryCode) => {\n              if(countryCode === 'EU') {\n                return;\n              }\n              let data = allCountriesResponse.data[countryCode];\n              if(timeAxis && data && data.length === timeAxis.length) {\n                data = data.map((value, index) => {\n                  return [timeAxis[index], value];\n                });\n              }\n              series.push({\n                name: countryCode,\n                data: data\n              });\n            });\n      \n            if(!timeAxis) {\n              return false;\n            }\n      \n            this.chart1Data  = {\n              series: series,\n              title: currChart.title,\n              unit: currChart.unit,\n              timeAxis: timeAxis.slice() //ditch observer, slice() ignores observer\n            }\n      \n      */\n      var currChart = this.chartDefinitions[this.subtab.charts[0]]; //multiple countries: can only process one output, in this case there is only one\n\n      var outp = currChart.outputs[0];\n\n      if (!this.outputs[outp.id] || !this.outputs[outp.id].data) {\n        return;\n      }\n\n      var timeAxis = this.outputs[outp.id].timeAxis;\n      var series = []; //    console.log('buildData ', this.outputs[outp.id].data);\n      //go through countries\n\n      Object.keys(this.outputs[outp.id].data).forEach(function (countryCode) {\n        if (countryCode === 'EU') {\n          return;\n        }\n\n        var data = _this.outputs[outp.id].data[countryCode]; //console.log('buildData ', countryCode, data);\n\n        if (timeAxis && data && data.length === timeAxis.length) {\n          data = data.map(function (value, index) {\n            return [timeAxis[index], value];\n          });\n        }\n\n        series.push({\n          name: countryCode,\n          data: data\n        });\n      });\n\n      if (!timeAxis) {\n        return false;\n      }\n\n      this.chart1Data = {\n        series: series,\n        title: currChart.title,\n        unit: currChart.unit,\n        timeAxis: timeAxis.slice() //ditch observer, slice() ignores observer\n\n      };\n    }\n  },\n  created: function created() {\n    //fetch all necessary data/references\n    //console.log('IndEnergyDemand ', this.charts);\n    this.buildData();\n  },\n  watch: {\n    'appState.lastAPIResponse': function appStateLastAPIResponse() {\n      this.buildData();\n    }\n  }\n};",{"version":3,"sources":["EmissionsByCountry.vue"],"names":[],"mappings":";;;;;;;;AAOA,OAAA,SAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,oBADA;AAEA,EAAA,UAAA,EAAA;AAAA,IAAA,SAAA,EAAA;AAAA,GAFA;AAGA,EAAA,KAAA,EAAA,CAAA,QAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,UAAA,CAHA;AAIA,EAAA,IAJA,kBAIA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,EADA,CACA;;AADA,KAAA;AAGA,GARA;AASA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,uBACA;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,UAAA,SAAA,GAAA,KAAA,gBAAA,CAAA,KAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAxCA,CA0CA;;AACA,UAAA,IAAA,GAAA,SAAA,CAAA,OAAA,CAAA,CAAA,CAAA;;AAEA,UAAA,CAAA,KAAA,OAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,KAAA,OAAA,CAAA,IAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AACA;AACA;;AAEA,UAAA,QAAA,GAAA,KAAA,OAAA,CAAA,IAAA,CAAA,EAAA,EAAA,QAAA;AACA,UAAA,MAAA,GAAA,EAAA,CAlDA,CAoDA;AACA;;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,KAAA,OAAA,CAAA,IAAA,CAAA,EAAA,EAAA,IAAA,EAAA,OAAA,CAAA,UAAA,WAAA,EAAA;AACA,YAAA,WAAA,KAAA,IAAA,EAAA;AACA;AACA;;AAEA,YAAA,IAAA,GAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,EAAA,EAAA,IAAA,CAAA,WAAA,CAAA,CALA,CAMA;;AACA,YAAA,QAAA,IAAA,IAAA,IAAA,IAAA,CAAA,MAAA,KAAA,QAAA,CAAA,MAAA,EAAA;AACA,UAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,UAAA,KAAA,EAAA,KAAA,EAAA;AACA,mBAAA,CAAA,QAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA;AACA,WAFA,CAAA;AAGA;;AACA,QAAA,MAAA,CAAA,IAAA,CAAA;AACA,UAAA,IAAA,EAAA,WADA;AAEA,UAAA,IAAA,EAAA;AAFA,SAAA;AAIA,OAhBA;;AAkBA,UAAA,CAAA,QAAA,EAAA;AACA,eAAA,KAAA;AACA;;AAEA,WAAA,UAAA,GAAA;AACA,QAAA,MAAA,EAAA,MADA;AAEA,QAAA,KAAA,EAAA,SAAA,CAAA,KAFA;AAGA,QAAA,IAAA,EAAA,SAAA,CAAA,IAHA;AAIA,QAAA,QAAA,EAAA,QAAA,CAAA,KAAA,EAJA,CAIA;;AAJA,OAAA;AAOA;AApFA,GATA;AA+FA,EAAA,OA/FA,qBA+FA;AACA;AACA;AACA,SAAA,SAAA;AACA,GAnGA;AAoGA,EAAA,KAAA,EAAA;AACA,gCAAA,mCAAA;AACA,WAAA,SAAA;AACA;AAHA;AApGA,CAAA","sourcesContent":["<template>\n  <div class=\"subtab-content\">\n    <LineChart :chart-data=\"chart1Data\"/>\n  </div>\n</template>\n\n<script>\nimport LineChart from '../../../charts/LineChart.vue';\n\nexport default {\n  name: 'EmissionsByCountry',\n  components: {LineChart},\n  props: ['subtab','outputs', 'chartDefinitions','appState'],\n  data() {\n    return {\n      chart1Data: {} //needs to be made reactive here, otherwise change is not propagated to child-component\n    }\n  },\n  methods: {\n    buildData() {\n  //    console.log('EmissionsByCountry ', this.chartDefinitions[this.subtab.charts[0]], this.outputs, this.subtab);\n/*\n      //console.log('EmissionsByCountry ', allCountriesResponse);\n\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n      var timeAxis = allCountriesResponse.timeAxis;\n      var series = [];\n\n      //go through countries\n      Object.keys(allCountriesResponse.data).forEach((countryCode) => {\n        if(countryCode === 'EU') {\n          return;\n        }\n        let data = allCountriesResponse.data[countryCode];\n        if(timeAxis && data && data.length === timeAxis.length) {\n          data = data.map((value, index) => {\n            return [timeAxis[index], value];\n          });\n        }\n        series.push({\n          name: countryCode,\n          data: data\n        });\n      });\n\n      if(!timeAxis) {\n        return false;\n      }\n\n      this.chart1Data  = {\n        series: series,\n        title: currChart.title,\n        unit: currChart.unit,\n        timeAxis: timeAxis.slice() //ditch observer, slice() ignores observer\n      }\n\n*/\n\n\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n\n      //multiple countries: can only process one output, in this case there is only one\n      let outp = currChart.outputs[0];\n\n      if(!this.outputs[outp.id] || !this.outputs[outp.id].data) {\n        return;\n      }\n\n      var timeAxis = this.outputs[outp.id].timeAxis;\n      var series = [];\n\n  //    console.log('buildData ', this.outputs[outp.id].data);\n      //go through countries\n      Object.keys(this.outputs[outp.id].data).forEach((countryCode) => {\n        if(countryCode === 'EU') {\n          return;\n        }\n\n        let data = this.outputs[outp.id].data[countryCode];\n        //console.log('buildData ', countryCode, data);\n        if(timeAxis && data && data.length === timeAxis.length) {\n          data = data.map((value, index) => {\n            return [timeAxis[index], value];\n          });\n        }\n        series.push({\n          name: countryCode,\n          data: data\n        });\n      });\n\n      if(!timeAxis) {\n        return false;\n      }\n\n      this.chart1Data  = {\n        series: series,\n        title: currChart.title,\n        unit: currChart.unit,\n        timeAxis: timeAxis.slice() //ditch observer, slice() ignores observer\n      }\n\n    }\n  },\n  created() {\n    //fetch all necessary data/references\n    //console.log('IndEnergyDemand ', this.charts);\n    this.buildData();\n  },\n  watch: {\n    'appState.lastAPIResponse': function() {\n      this.buildData();\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n</style>\n"],"sourceRoot":"src/components/tabs/emissions"}]}