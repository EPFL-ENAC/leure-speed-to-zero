{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/charts/StackedAreaChart100Percent.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/charts/StackedAreaChart100Percent.vue","mtime":1707210098267},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234519986}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\nimport chartUpdateAddSeriesMixin from \"../mixins/chartUpdateAddSeriesMixin.js\";\nimport highcharts from \"highcharts\";\nimport exporting from \"highcharts/modules/exporting\";\nimport exportData from \"highcharts/modules/export-data\";\nimport seriesLabels from \"highcharts/modules/series-label\";\nexport default {\n  name: 'StackedAreaChart100Percent',\n  mixins: [chartUpdateAddSeriesMixin],\n  props: ['chartData'],\n  //chartData.title, chartData.timeAxis, chartData.series\n  watch: {\n    chartData: {\n      handler: function handler() {\n        this.updateChart();\n      } //doesn't need to be a deep watch, because the whole object gets replaced\n\n    }\n  },\n  mounted: function mounted() {\n    var container = this.$refs.chart; // activate highcharts plugins\n\n    exporting(highcharts);\n    exportData(highcharts);\n    seriesLabels(highcharts);\n    this.chart = new highcharts.Chart({\n      chart: {\n        renderTo: container,\n        type: 'area',\n        spacingBottom: 30\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: this.chartData.title\n      },\n      xAxis: {\n        tickmarkPlacement: 'on',\n        plotBands: [{\n          // mark the weekend\n          color: 'rgba(255,255,255,0.6)',\n          from: 2015,\n          to: 2019.91,\n          zIndex: 4\n        }],\n        title: {\n          enabled: false\n        },\n        tickInterval: 5 // 5 years\n\n      },\n      yAxis: {\n        title: {\n          text: this.chartData.unit\n        },\n        max: 100\n      },\n      tooltip: {\n        split: true\n      },\n      plotOptions: {\n        area: {\n          stacking: 'percent',\n          lineColor: '#666666',\n          lineWidth: 1,\n          marker: {\n            lineWidth: 1,\n            lineColor: '#666666'\n          }\n        },\n        arearange: {\n          color: \"white\",\n          fillOpacity: 0.5,\n          enableMouseTracking: false\n        },\n        series: {\n          pointStart: this.chartData.timeAxis ? this.chartData.timeAxis[0] : undefined,\n          marker: {\n            enabled: false\n          }\n        }\n      },\n      responsive: {\n        rules: [{\n          condition: {\n            maxWidth: 500\n          }\n        }]\n      },\n      exporting: {\n        buttons: {\n          contextButton: {\n            menuItems: [\"printChart\", \"separator\", \"downloadPNG\", \"downloadJPEG\", \"downloadPDF\", \"downloadSVG\", \"separator\", \"downloadCSV\", \"downloadXLS\"]\n          }\n        }\n      },\n      series: this.chartData.series\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n  }\n};",{"version":3,"sources":["StackedAreaChart100Percent.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"chart-container\">\n    <div class=\"chart\" ref=\"chart\"></div>\n  </div>\n</template>\n\n<script>\nimport chartUpdateAddSeriesMixin from '../mixins/chartUpdateAddSeriesMixin.js';\n\nimport highcharts from \"highcharts\";\nimport exporting from \"highcharts/modules/exporting\";\nimport exportData from \"highcharts/modules/export-data\";\nimport seriesLabels from \"highcharts/modules/series-label\";\n\nexport default {\n  name: 'StackedAreaChart100Percent',\n  mixins: [chartUpdateAddSeriesMixin],\n  props: ['chartData'], //chartData.title, chartData.timeAxis, chartData.series\n  watch: {\n    chartData: {\n      handler() {\n        this.updateChart();\n      }\n      //doesn't need to be a deep watch, because the whole object gets replaced\n    }\n  },\n  mounted() {\n    var container = this.$refs.chart;\n\n    // activate highcharts plugins\n    exporting(highcharts);\n    exportData(highcharts);\n    seriesLabels(highcharts);\n\n    this.chart = new highcharts.Chart({\n      chart: {\n        renderTo: container,\n        type: 'area',\n        spacingBottom: 30\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n          text: this.chartData.title\n      },\n      xAxis: {\n        tickmarkPlacement: 'on',\n        plotBands: [{ // mark the weekend\n          color: 'rgba(255,255,255,0.6)',\n          from: 2015,\n          to: 2019.91,\n          zIndex: 4\n        }],\n        title: {\n          enabled: false\n        },\n        tickInterval: 5 // 5 years\n      },\n      yAxis: {\n        title: {\n          text: this.chartData.unit\n        },\n        max: 100\n      },\n      tooltip: {\n        split: true\n      },\n      plotOptions: {\n        area: {\n          stacking: 'percent',\n          lineColor: '#666666',\n          lineWidth: 1,\n          marker: {\n            lineWidth: 1,\n            lineColor: '#666666'\n          }\n        },\n        arearange: {\n          color: \"white\",\n          fillOpacity: 0.5,\n          enableMouseTracking: false\n        },\n        series: {\n          pointStart: this.chartData.timeAxis ? this.chartData.timeAxis[0] : undefined,\n          marker: {\n            enabled: false\n          }\n        }\n      },\n      responsive: {\n        rules: [{\n          condition: {\n            maxWidth: 500\n          }\n        }]\n      },\n      exporting: {\n        buttons: {\n          contextButton: {\n            menuItems: [\n              \"printChart\",\n              \"separator\",\n              \"downloadPNG\",\n              \"downloadJPEG\",\n              \"downloadPDF\",\n              \"downloadSVG\",\n              \"separator\",\n              \"downloadCSV\",\n              \"downloadXLS\"\n            ]\n          }\n        }\n      },\n      series: this.chartData.series\n    });\n  },\n  beforeDestroy() {\n    if(this.chart) {\n      this.chart.destroy();\n    }\n  },\n}\n</script>\n\n<style>\n</style>\n"],"sourceRoot":"src/charts"}]}