{"remainingRequest":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/babel-loader/lib/index.js!/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/eslint-loader/index.js??ref--13-0!/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/src/dataService.js","dependencies":[{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/src/dataService.js","mtime":1707210098283},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/eslint-loader/index.js","mtime":1707234519720}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport _objectWithoutProperties from \"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/web.dom.iterable\";\nimport * as helpers from \"./helpers.js\";\nimport axios from 'axios';\nimport * as inputsService from \"./inputsService.js\";\nimport * as outputsService from \"./outputsService.js\";\n\n// appState is made reactive in App.vue component\n// many of the properties are actually settings (they don't change)\n// but for simplicity reasons (only one object), state and settings both live in the appState object\nexport var appState = {\n  budgetTemperature: 2,\n  budgetFairness: 'capability',\n  userAction: [],\n  //on mobile there can be multiple actions before a fetch is started\n  waitingForAPI: false,\n  menuOpen: false,\n  countryZoomIndex: 0,\n  //no route parameter for actually preselecting a country, always EU by default,\n  //regardless of a country being selected\n  countryZoomDisabled: false,\n  // examplePathwaysOnly: true, // user cannot change lever-settings freely, can only choose from examplePathways\n  modalFor: undefined,\n  //either undefined or holds a leverId\n  pathwayIndex: -1,\n  // -1: no pathway selected, 0+: index of the examplePathway Array\n  mode: undefined,\n  // better name would be \"view\". Possible values: 'legal', 'target', 'intro'\n  lastAPIResponse: undefined,\n  //timestamp\n  lastAPIAction: undefined,\n  // last appState.userAction\n  responseStatus: \"\",\n  activeTab: null,\n  //only gets set inside outputsService.selectTab which also gets called over routing\n  //needs to be null on page-load (see App.vue and routeService)\n  activeSubtab: null,\n  //only gets set inside outputsService.selectTab which also gets called over routing\n  mainScreenRouteString: '/app/',\n  //home link by default\n  isMobile: undefined,\n  inputLatency: 0,\n  // latency for lever change, 500 normally\n  onlyExamplePathwayRoutes: false,\n  // restricts routes to examplePathways\n  showMissingOutputs: true,\n  noDecimalLevers: false,\n  quickDataAvailable: true //[true, false] consider using 'undefined' as a third possible state\n};\nexport function updateURLParams() {\n  // updates the URL Params (after lever change etc.)\n  // is not responsible for the routes (requestURI), that is handled by rewriteURL\n\n  //EU - default parameters\n  var leverStringEU = inputsService.pathwayObjectToParamString(inputsService.selected[0].values);\n  var urlParams = new URLSearchParams(window.location.search);\n  if (leverStringEU) {\n    urlParams.set('levers', leverStringEU);\n  }\n  if (inputsService.selected[1]) {\n    var leverStringSingleCountry = inputsService.pathwayObjectToParamString(inputsService.selected[1].values);\n    var countryCode = inputsService.selected[1].id.toUpperCase();\n    if (leverStringSingleCountry && countryCode) {\n      urlParams.set('other', leverStringSingleCountry);\n      urlParams.set('country', countryCode);\n    } else {\n      urlParams.delete('other');\n      urlParams.delete('country');\n    }\n  } else {\n    urlParams.delete('other');\n    urlParams.delete('country');\n  }\n  return urlParams;\n}\nexport function rewriteURL() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new URLSearchParams(window.location.search);\n  // params has a default value, which is evaluated each time rewriteURL() is called without parameters\n\n  var routeString = '/app/' + outputsService.tabRoutes[appState.activeTab].route + \"/\";\n  routeString += outputsService.tabRoutes[appState.activeTab][appState.activeSubtab].route + \"/\";\n  routeString += '?' + params.toString();\n\n  // console.log('rewriteURL ', routeString);\n\n  history.pushState({\n    path: routeString\n  }, null, routeString);\n  appState.mainScreenRouteString = routeString;\n}\nexport function createRouteString() {\n  //creates routeString from app data\n\n  var urlParams = new URLSearchParams(window.location.search);\n  var leverStringEU = inputsService.pathwayObjectToParamString(inputsService.selected[0].values);\n  if (leverStringEU) {\n    urlParams.set('levers', leverStringEU);\n  }\n\n  //if a country was selected\n  if (inputsService.selected[1]) {\n    var leverStringSingleCountry = inputsService.pathwayObjectToParamString(inputsService.selected[1].values);\n    var countryCode = inputsService.selected[1].id.toUpperCase();\n    if (leverStringSingleCountry && countryCode) {\n      urlParams.set('other', leverStringSingleCountry);\n      urlParams.set('country', countryCode);\n    } else {\n      urlParams.delete('other');\n      urlParams.delete('country');\n    }\n  } else {\n    urlParams.delete('other');\n    urlParams.delete('country');\n  }\n  var routeString = '/app/' + outputsService.tabRoutes[appState.activeTab].route + \"/\";\n  routeString += outputsService.tabRoutes[appState.activeTab][appState.activeSubtab].route + \"/\";\n  routeString += '?' + urlParams.toString();\n  return routeString;\n}\nfunction buildRequestBody() {\n  var leversByRegion = inputsService.getLeversByRegion();\n  var outpts = outputsService.outputsByTabs[appState.activeTab];\n  outputsService.outputsThatAreAlwaysRequested.forEach(function (id) {\n    // only create entry if output is not already present, we don't want to overwrite any existing allCountries flags\n    if (!outpts[id]) {\n      outpts[id] = {};\n    }\n  });\n\n  // console.log('leversByRegion ', leversByRegion);\n  var levers = {};\n  // some destructuring magic: who needs loops anymore, unless you want to keep it readable :S\n  // nested destructuring assignment\n  // the key 'EU' of the RIGHT side get's written into levers['default']\n  // the rest (Object) get's written into the levers['exceptions'] object\n  levers['default'] = leversByRegion['EU'];\n  levers['exceptions'] = _objectWithoutProperties(leversByRegion, [\"EU\"]);\n  var requestBody = {\n    levers: levers,\n    outputs: []\n  };\n  Object.keys(outpts).forEach(function (outp) {\n    var _outp = {\n      id: outp\n    };\n    if (outpts[outp].allCountries) {\n      _outp.allCountries = true;\n    }\n    requestBody.outputs.push(_outp);\n  });\n  return requestBody;\n}\nexport function availabilityRequest() {\n  // checks if data would be available quickly, but doesn't set anything\n  // good would be a separate endpoint in the API\n\n  // response sets appState.quickDataAvailable = [true, false] consider using 'undefined' as a third possible state\n  // any succesful response of a real request changes the status of appState.quickDataAvailable to true\n  var requestBody = buildRequestBody();\n  if (!requestBody.outputs.length) {\n    // don't send request if outputs is empty, the API would return an error in that case\n    // important: also reset appState.userAction on this exit point! (some subtabs might not depend on API data)\n    appState.userAction = [];\n    return;\n  }\n  fetch(requestBody).then(function (response) {\n    // console.log('availabilityRequest ', response);\n    if (response.data.status !== 200) {\n      appState.quickDataAvailable = false;\n    } else {\n      appState.quickDataAvailable = true;\n    }\n  }).catch(function (error) {\n    if (axios.isCancel(error)) {\n      appState.quickDataAvailable = true;\n      //console.log('Request canceled');\n    } else {\n      appState.quickDataAvailable = true;\n    }\n  });\n}\nexport function fetchFromModelAPI() {\n  var requestBody = buildRequestBody();\n  requestBody.getFromModel = true;\n  if (!requestBody.outputs.length) {\n    //don't send request if outputs is empty, the API would return an error in that case\n    //important: also reset appState.userAction on this exit point! (some subtabs might not depend on API data)\n    appState.userAction = [];\n    return;\n  }\n  inputsService.deactivateGroups(Object.keys(inputsService.leverGroups));\n  appState.countryZoomDisabled = true;\n  appState.waitingForAPI = true;\n  fetch(requestBody).then(function (response) {\n    parseData(response);\n    inputsService.activateAllGroups();\n    appState.countryZoomDisabled = false;\n  }).catch(function (error) {\n    if (axios.isCancel(error)) {\n      //console.log('Request canceled');\n    } else {\n      // console.log('fetch error ', error);\n      onFetchError();\n    }\n    inputsService.activateAllGroups();\n    appState.countryZoomDisabled = false;\n  });\n}\nexport var debouncedFetch = helpers.debounce(fetchData, appState.inputLatency);\nexport function fetchData() {\n  var requestBody = buildRequestBody();\n  // console.log('requestBody ', requestBody);\n\n  if (!requestBody.outputs.length) {\n    //don't send request if outputs is empty, the API would return an error in that case\n    //important: also reset appState.userAction on this exit point! (some subtabs might not depend on API data)\n    appState.userAction = [];\n    return;\n  }\n  appState.waitingForAPI = true;\n  fetch(requestBody).then(function (response) {\n    parseData(response);\n  }).catch(function (error) {\n    if (axios.isCancel(error)) {\n      //console.log('Request canceled');\n    } else {\n      //console.log('fetch error ', error);\n      onFetchError();\n    }\n  });\n}\n\n// for cancelling old requests (only the last request should get processed, previous ones should get cancelled)\n// especially since previous requests could take longer to be answered than the last one!!\n// --> in that case the processed answer wouldn't match the request anymore\nvar apiCall;\nfunction fetch(requestBody) {\n  var baseUrl = '/api/v1.0/results';\n  var target = '';\n\n  //cancelling pending axios request, if any\n  if (apiCall) {\n    apiCall.cancel(); //axios functionality\n  }\n  apiCall = axios.CancelToken.source(); //source() is a factory function\n\n  //returning a promise\n  return axios.post(baseUrl + target, requestBody, {\n    cancelToken: apiCall.token\n  });\n}\nfunction parseData(response) {\n  //response has been partially parsed already by axios\n  // console.log('response there', response.data);\n\n  appState.responseStatus = response.status;\n  if (appState.responseStatus === 200) {\n    outputsService.parseOutputs(response.data.outputs);\n    outputsService.calculateNetZero();\n    outputsService.parseWarnings(response.data.warnings);\n  }\n  if (appState.userAction.indexOf('countryChange') >= 0) {\n    outputsService.setCountryZoom(1);\n  }\n  if (appState.isMobile) {\n    // resetting to default state\n    appState.quickDataAvailable = true;\n  }\n  appState.waitingForAPI = false;\n  appState.lastAPIAction = appState.userAction;\n  appState.userAction = [];\n  appState.lastAPIResponse = Date.now();\n}\nfunction onFetchError() {\n  if (appState.isMobile) {\n    // resetting to default state\n    appState.quickDataAvailable = true;\n  }\n  appState.waitingForAPI = false;\n  appState.lastAPIAction = appState.userAction;\n  appState.userAction = []; //reset appState, optional here\n  appState.lastAPIResponse = Date.now();\n}",{"version":3,"names":["helpers","axios","inputsService","outputsService","appState","budgetTemperature","budgetFairness","userAction","waitingForAPI","menuOpen","countryZoomIndex","countryZoomDisabled","modalFor","undefined","pathwayIndex","mode","lastAPIResponse","lastAPIAction","responseStatus","activeTab","activeSubtab","mainScreenRouteString","isMobile","inputLatency","onlyExamplePathwayRoutes","showMissingOutputs","noDecimalLevers","quickDataAvailable","updateURLParams","leverStringEU","pathwayObjectToParamString","selected","values","urlParams","URLSearchParams","window","location","search","set","leverStringSingleCountry","countryCode","id","toUpperCase","delete","rewriteURL","params","arguments","length","routeString","tabRoutes","route","toString","history","pushState","path","createRouteString","buildRequestBody","leversByRegion","getLeversByRegion","outpts","outputsByTabs","outputsThatAreAlwaysRequested","forEach","levers","_objectWithoutProperties","requestBody","outputs","Object","keys","outp","_outp","allCountries","push","availabilityRequest","fetch","then","response","data","status","catch","error","isCancel","fetchFromModelAPI","getFromModel","deactivateGroups","leverGroups","parseData","activateAllGroups","onFetchError","debouncedFetch","debounce","fetchData","apiCall","baseUrl","target","cancel","CancelToken","source","post","cancelToken","token","parseOutputs","calculateNetZero","parseWarnings","warnings","indexOf","setCountryZoom","Date","now"],"sources":["/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/src/dataService.js"],"sourcesContent":["import * as helpers from './helpers.js';\nimport axios from 'axios';\n\nimport * as inputsService from './inputsService.js';\nimport * as outputsService from './outputsService.js';\n\n// appState is made reactive in App.vue component\n// many of the properties are actually settings (they don't change)\n// but for simplicity reasons (only one object), state and settings both live in the appState object\nexport var appState = {\n  budgetTemperature: 2,\n  budgetFairness: 'capability',\n  userAction: [], //on mobile there can be multiple actions before a fetch is started\n  waitingForAPI: false,\n  menuOpen: false,\n  countryZoomIndex: 0,  //no route parameter for actually preselecting a country, always EU by default,\n                        //regardless of a country being selected\n  countryZoomDisabled: false,\n  // examplePathwaysOnly: true, // user cannot change lever-settings freely, can only choose from examplePathways\n  modalFor: undefined, //either undefined or holds a leverId\n  pathwayIndex: -1,  // -1: no pathway selected, 0+: index of the examplePathway Array\n  mode: undefined, // better name would be \"view\". Possible values: 'legal', 'target', 'intro'\n  lastAPIResponse: undefined, //timestamp\n  lastAPIAction: undefined, // last appState.userAction\n  responseStatus: \"\",\n  activeTab: null,  //only gets set inside outputsService.selectTab which also gets called over routing\n                    //needs to be null on page-load (see App.vue and routeService)\n  activeSubtab: null, //only gets set inside outputsService.selectTab which also gets called over routing\n  mainScreenRouteString: '/app/', //home link by default\n  isMobile: undefined,\n  inputLatency: 0, // latency for lever change, 500 normally\n  onlyExamplePathwayRoutes: false, // restricts routes to examplePathways\n  showMissingOutputs: true,\n  noDecimalLevers: false,\n  quickDataAvailable: true //[true, false] consider using 'undefined' as a third possible state\n};\n\nexport function updateURLParams() {\n  // updates the URL Params (after lever change etc.)\n  // is not responsible for the routes (requestURI), that is handled by rewriteURL\n\n  //EU - default parameters\n  let leverStringEU = inputsService.pathwayObjectToParamString(inputsService.selected[0].values)\n\n  var urlParams = new URLSearchParams(window.location.search);\n\n\n  if(leverStringEU) {\n    urlParams.set('levers', leverStringEU);\n  }\n\n  if(inputsService.selected[1]) {\n    let leverStringSingleCountry = inputsService.pathwayObjectToParamString(inputsService.selected[1].values)\n    let countryCode = inputsService.selected[1].id.toUpperCase();\n\n    if(leverStringSingleCountry && countryCode) {\n      urlParams.set('other', leverStringSingleCountry);\n      urlParams.set('country', countryCode);\n    } else {\n      urlParams.delete('other');\n      urlParams.delete('country');\n    }\n  } else {\n    urlParams.delete('other');\n    urlParams.delete('country');\n  }\n\n  return urlParams;\n}\n\nexport function rewriteURL(params = new URLSearchParams(window.location.search)) {\n  // params has a default value, which is evaluated each time rewriteURL() is called without parameters\n\n  let routeString = '/app/'+outputsService.tabRoutes[appState.activeTab].route + \"/\";\n  routeString += outputsService.tabRoutes[appState.activeTab][appState.activeSubtab].route+\"/\";\n  routeString += '?'+params.toString();\n\n  // console.log('rewriteURL ', routeString);\n\n  history.pushState({path: routeString}, null, routeString);\n\n  appState.mainScreenRouteString = routeString;\n}\n\nexport function createRouteString() {\n  //creates routeString from app data\n\n  var urlParams = new URLSearchParams(window.location.search);\n\n  let leverStringEU = inputsService.pathwayObjectToParamString(inputsService.selected[0].values);\n\n  if(leverStringEU) {\n    urlParams.set('levers', leverStringEU);\n  }\n\n  //if a country was selected\n  if(inputsService.selected[1]) {\n    let leverStringSingleCountry = inputsService.pathwayObjectToParamString(inputsService.selected[1].values);\n    let countryCode = inputsService.selected[1].id.toUpperCase();\n\n    if(leverStringSingleCountry && countryCode) {\n      urlParams.set('other', leverStringSingleCountry);\n      urlParams.set('country', countryCode);\n    } else {\n      urlParams.delete('other');\n      urlParams.delete('country');\n    }\n  } else {\n    urlParams.delete('other');\n    urlParams.delete('country');\n  }\n\n  let routeString = '/app/'+outputsService.tabRoutes[appState.activeTab].route + \"/\";\n  routeString += outputsService.tabRoutes[appState.activeTab][appState.activeSubtab].route+\"/\";\n  routeString += '?'+urlParams.toString();\n\n  return routeString;\n}\n\nfunction buildRequestBody() {\n\n  let leversByRegion = inputsService.getLeversByRegion();\n  let outpts = outputsService.outputsByTabs[appState.activeTab];\n\n  outputsService.outputsThatAreAlwaysRequested.forEach((id) => {\n    // only create entry if output is not already present, we don't want to overwrite any existing allCountries flags\n    if(!outpts[id]) {\n      outpts[id] = {};\n    }\n  });\n\n  // console.log('leversByRegion ', leversByRegion);\n  let levers = {};\n  // some destructuring magic: who needs loops anymore, unless you want to keep it readable :S\n  // nested destructuring assignment\n  // the key 'EU' of the RIGHT side get's written into levers['default']\n  // the rest (Object) get's written into the levers['exceptions'] object\n  ({ ['EU']: levers['default'], ...levers['exceptions']} = leversByRegion);\n\n  var requestBody = {\n    levers: levers,\n    outputs: []\n  };\n\n  Object.keys(outpts).forEach((outp) => {\n    let _outp = {id: outp};\n    if(outpts[outp].allCountries) {\n      _outp.allCountries = true;\n    }\n    requestBody.outputs.push(_outp);\n  });\n\n  return requestBody;\n}\n\nexport function availabilityRequest() {\n  // checks if data would be available quickly, but doesn't set anything\n  // good would be a separate endpoint in the API\n\n  // response sets appState.quickDataAvailable = [true, false] consider using 'undefined' as a third possible state\n  // any succesful response of a real request changes the status of appState.quickDataAvailable to true\n  var requestBody = buildRequestBody();\n\n  if(!requestBody.outputs.length) {\n    // don't send request if outputs is empty, the API would return an error in that case\n    // important: also reset appState.userAction on this exit point! (some subtabs might not depend on API data)\n    appState.userAction = [];\n    return;\n  }\n\n  fetch(requestBody).then(function (response) {\n    // console.log('availabilityRequest ', response);\n    if(response.data.status !== 200) {\n      appState.quickDataAvailable = false;\n    } else {\n      appState.quickDataAvailable = true;\n    }\n  }).catch(function (error) {\n    if (axios.isCancel(error)) {\n      appState.quickDataAvailable = true;\n      //console.log('Request canceled');\n    } else {\n      appState.quickDataAvailable = true;\n    }\n  });\n\n}\n\nexport function fetchFromModelAPI() {\n  var requestBody = buildRequestBody();\n  requestBody.getFromModel = true;\n\n  if(!requestBody.outputs.length) {\n    //don't send request if outputs is empty, the API would return an error in that case\n    //important: also reset appState.userAction on this exit point! (some subtabs might not depend on API data)\n    appState.userAction = [];\n    return;\n  }\n\n  inputsService.deactivateGroups(Object.keys(inputsService.leverGroups));\n  appState.countryZoomDisabled = true;\n\n  appState.waitingForAPI = true;\n\n  fetch(requestBody).then(function (response) {\n    parseData(response);\n    inputsService.activateAllGroups();\n    appState.countryZoomDisabled = false;\n  }).catch(function (error) {\n    if (axios.isCancel(error)) {\n      //console.log('Request canceled');\n    } else {\n      // console.log('fetch error ', error);\n      onFetchError();\n    }\n    inputsService.activateAllGroups();\n    appState.countryZoomDisabled = false;\n  });\n}\n\nexport var debouncedFetch = helpers.debounce(fetchData, appState.inputLatency);\n\nexport function fetchData() {\n  var requestBody = buildRequestBody();\n  // console.log('requestBody ', requestBody);\n\n  if(!requestBody.outputs.length) {\n    //don't send request if outputs is empty, the API would return an error in that case\n    //important: also reset appState.userAction on this exit point! (some subtabs might not depend on API data)\n    appState.userAction = [];\n    return;\n  }\n\n  appState.waitingForAPI = true;\n\n  fetch(requestBody).then(function (response) {\n    parseData(response);\n  }).catch(function (error) {\n    if (axios.isCancel(error)) {\n      //console.log('Request canceled');\n    } else {\n      //console.log('fetch error ', error);\n      onFetchError();\n    }\n  });\n}\n\n\n// for cancelling old requests (only the last request should get processed, previous ones should get cancelled)\n// especially since previous requests could take longer to be answered than the last one!!\n// --> in that case the processed answer wouldn't match the request anymore\nvar apiCall;\nfunction fetch(requestBody) {\n  var baseUrl = '/api/v1.0/results';\n  var target = '';\n\n  //cancelling pending axios request, if any\n  if(apiCall) {\n    apiCall.cancel(); //axios functionality\n  }\n  apiCall = axios.CancelToken.source(); //source() is a factory function\n\n  //returning a promise\n  return axios.post(baseUrl+target, requestBody, { cancelToken: apiCall.token });\n}\n\nfunction parseData(response) {\n  //response has been partially parsed already by axios\n  // console.log('response there', response.data);\n\n  appState.responseStatus = response.status;\n\n  if(appState.responseStatus === 200) {\n    outputsService.parseOutputs(response.data.outputs);\n    outputsService.calculateNetZero();\n    outputsService.parseWarnings(response.data.warnings);\n  }\n\n  if(appState.userAction.indexOf('countryChange') >= 0) {\n    outputsService.setCountryZoom(1);\n  }\n\n  if(appState.isMobile) {\n    // resetting to default state\n    appState.quickDataAvailable = true;\n  }\n\n  appState.waitingForAPI = false;\n  appState.lastAPIAction = appState.userAction;\n  appState.userAction = [];\n  appState.lastAPIResponse = Date.now();\n}\n\nfunction onFetchError() {\n  if(appState.isMobile) {\n    // resetting to default state\n    appState.quickDataAvailable = true;\n  }\n\n  appState.waitingForAPI = false;\n  appState.lastAPIAction = appState.userAction;\n  appState.userAction = []; //reset appState, optional here\n  appState.lastAPIResponse = Date.now();\n}\n"],"mappings":"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"}]}