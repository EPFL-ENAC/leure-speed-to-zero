{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/eslint-loader/index.js??ref--13-0!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/dataService.js","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/dataService.js","mtime":1707210098283},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/eslint-loader/index.js","mtime":1707234519720}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport _objectWithoutProperties from \"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/web.dom.iterable\";\nimport * as helpers from \"./helpers.js\";\nimport axios from 'axios';\nimport * as inputsService from \"./inputsService.js\";\nimport * as outputsService from \"./outputsService.js\"; // appState is made reactive in App.vue component\n// many of the properties are actually settings (they don't change)\n// but for simplicity reasons (only one object), state and settings both live in the appState object\n\nexport var appState = {\n  budgetTemperature: 2,\n  budgetFairness: 'capability',\n  userAction: [],\n  //on mobile there can be multiple actions before a fetch is started\n  waitingForAPI: false,\n  menuOpen: false,\n  countryZoomIndex: 0,\n  //no route parameter for actually preselecting a country, always EU by default,\n  //regardless of a country being selected\n  countryZoomDisabled: false,\n  // examplePathwaysOnly: true, // user cannot change lever-settings freely, can only choose from examplePathways\n  modalFor: undefined,\n  //either undefined or holds a leverId\n  pathwayIndex: -1,\n  // -1: no pathway selected, 0+: index of the examplePathway Array\n  mode: undefined,\n  // better name would be \"view\". Possible values: 'legal', 'target', 'intro'\n  lastAPIResponse: undefined,\n  //timestamp\n  lastAPIAction: undefined,\n  // last appState.userAction\n  responseStatus: \"\",\n  activeTab: null,\n  //only gets set inside outputsService.selectTab which also gets called over routing\n  //needs to be null on page-load (see App.vue and routeService)\n  activeSubtab: null,\n  //only gets set inside outputsService.selectTab which also gets called over routing\n  mainScreenRouteString: '/app/',\n  //home link by default\n  isMobile: undefined,\n  inputLatency: 0,\n  // latency for lever change, 500 normally\n  onlyExamplePathwayRoutes: false,\n  // restricts routes to examplePathways\n  showMissingOutputs: true,\n  noDecimalLevers: false,\n  quickDataAvailable: true //[true, false] consider using 'undefined' as a third possible state\n\n};\nexport function updateURLParams() {\n  // updates the URL Params (after lever change etc.)\n  // is not responsible for the routes (requestURI), that is handled by rewriteURL\n  //EU - default parameters\n  var leverStringEU = inputsService.pathwayObjectToParamString(inputsService.selected[0].values);\n  var urlParams = new URLSearchParams(window.location.search);\n\n  if (leverStringEU) {\n    urlParams.set('levers', leverStringEU);\n  }\n\n  if (inputsService.selected[1]) {\n    var leverStringSingleCountry = inputsService.pathwayObjectToParamString(inputsService.selected[1].values);\n    var countryCode = inputsService.selected[1].id.toUpperCase();\n\n    if (leverStringSingleCountry && countryCode) {\n      urlParams.set('other', leverStringSingleCountry);\n      urlParams.set('country', countryCode);\n    } else {\n      urlParams.delete('other');\n      urlParams.delete('country');\n    }\n  } else {\n    urlParams.delete('other');\n    urlParams.delete('country');\n  }\n\n  return urlParams;\n}\nexport function rewriteURL() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new URLSearchParams(window.location.search);\n  // params has a default value, which is evaluated each time rewriteURL() is called without parameters\n  var routeString = '/app/' + outputsService.tabRoutes[appState.activeTab].route + \"/\";\n  routeString += outputsService.tabRoutes[appState.activeTab][appState.activeSubtab].route + \"/\";\n  routeString += '?' + params.toString(); // console.log('rewriteURL ', routeString);\n\n  history.pushState({\n    path: routeString\n  }, null, routeString);\n  appState.mainScreenRouteString = routeString;\n}\nexport function createRouteString() {\n  //creates routeString from app data\n  var urlParams = new URLSearchParams(window.location.search);\n  var leverStringEU = inputsService.pathwayObjectToParamString(inputsService.selected[0].values);\n\n  if (leverStringEU) {\n    urlParams.set('levers', leverStringEU);\n  } //if a country was selected\n\n\n  if (inputsService.selected[1]) {\n    var leverStringSingleCountry = inputsService.pathwayObjectToParamString(inputsService.selected[1].values);\n    var countryCode = inputsService.selected[1].id.toUpperCase();\n\n    if (leverStringSingleCountry && countryCode) {\n      urlParams.set('other', leverStringSingleCountry);\n      urlParams.set('country', countryCode);\n    } else {\n      urlParams.delete('other');\n      urlParams.delete('country');\n    }\n  } else {\n    urlParams.delete('other');\n    urlParams.delete('country');\n  }\n\n  var routeString = '/app/' + outputsService.tabRoutes[appState.activeTab].route + \"/\";\n  routeString += outputsService.tabRoutes[appState.activeTab][appState.activeSubtab].route + \"/\";\n  routeString += '?' + urlParams.toString();\n  return routeString;\n}\n\nfunction buildRequestBody() {\n  var leversByRegion = inputsService.getLeversByRegion();\n  var outpts = outputsService.outputsByTabs[appState.activeTab];\n  outputsService.outputsThatAreAlwaysRequested.forEach(function (id) {\n    // only create entry if output is not already present, we don't want to overwrite any existing allCountries flags\n    if (!outpts[id]) {\n      outpts[id] = {};\n    }\n  }); // console.log('leversByRegion ', leversByRegion);\n\n  var levers = {}; // some destructuring magic: who needs loops anymore, unless you want to keep it readable :S\n  // nested destructuring assignment\n  // the key 'EU' of the RIGHT side get's written into levers['default']\n  // the rest (Object) get's written into the levers['exceptions'] object\n\n  levers['default'] = leversByRegion['EU'];\n  levers['exceptions'] = _objectWithoutProperties(leversByRegion, [\"EU\"]);\n  var requestBody = {\n    levers: levers,\n    outputs: []\n  };\n  Object.keys(outpts).forEach(function (outp) {\n    var _outp = {\n      id: outp\n    };\n\n    if (outpts[outp].allCountries) {\n      _outp.allCountries = true;\n    }\n\n    requestBody.outputs.push(_outp);\n  });\n  return requestBody;\n}\n\nexport function availabilityRequest() {\n  // checks if data would be available quickly, but doesn't set anything\n  // good would be a separate endpoint in the API\n  // response sets appState.quickDataAvailable = [true, false] consider using 'undefined' as a third possible state\n  // any succesful response of a real request changes the status of appState.quickDataAvailable to true\n  var requestBody = buildRequestBody();\n\n  if (!requestBody.outputs.length) {\n    // don't send request if outputs is empty, the API would return an error in that case\n    // important: also reset appState.userAction on this exit point! (some subtabs might not depend on API data)\n    appState.userAction = [];\n    return;\n  }\n\n  fetch(requestBody).then(function (response) {\n    // console.log('availabilityRequest ', response);\n    if (response.data.status !== 200) {\n      appState.quickDataAvailable = false;\n    } else {\n      appState.quickDataAvailable = true;\n    }\n  }).catch(function (error) {\n    if (axios.isCancel(error)) {\n      appState.quickDataAvailable = true; //console.log('Request canceled');\n    } else {\n      appState.quickDataAvailable = true;\n    }\n  });\n}\nexport function fetchFromModelAPI() {\n  var requestBody = buildRequestBody();\n  requestBody.getFromModel = true;\n\n  if (!requestBody.outputs.length) {\n    //don't send request if outputs is empty, the API would return an error in that case\n    //important: also reset appState.userAction on this exit point! (some subtabs might not depend on API data)\n    appState.userAction = [];\n    return;\n  }\n\n  inputsService.deactivateGroups(Object.keys(inputsService.leverGroups));\n  appState.countryZoomDisabled = true;\n  appState.waitingForAPI = true;\n  fetch(requestBody).then(function (response) {\n    parseData(response);\n    inputsService.activateAllGroups();\n    appState.countryZoomDisabled = false;\n  }).catch(function (error) {\n    if (axios.isCancel(error)) {//console.log('Request canceled');\n    } else {\n      // console.log('fetch error ', error);\n      onFetchError();\n    }\n\n    inputsService.activateAllGroups();\n    appState.countryZoomDisabled = false;\n  });\n}\nexport var debouncedFetch = helpers.debounce(fetchData, appState.inputLatency);\nexport function fetchData() {\n  var requestBody = buildRequestBody(); // console.log('requestBody ', requestBody);\n\n  if (!requestBody.outputs.length) {\n    //don't send request if outputs is empty, the API would return an error in that case\n    //important: also reset appState.userAction on this exit point! (some subtabs might not depend on API data)\n    appState.userAction = [];\n    return;\n  }\n\n  appState.waitingForAPI = true;\n  fetch(requestBody).then(function (response) {\n    parseData(response);\n  }).catch(function (error) {\n    if (axios.isCancel(error)) {//console.log('Request canceled');\n    } else {\n      //console.log('fetch error ', error);\n      onFetchError();\n    }\n  });\n} // for cancelling old requests (only the last request should get processed, previous ones should get cancelled)\n// especially since previous requests could take longer to be answered than the last one!!\n// --> in that case the processed answer wouldn't match the request anymore\n\nvar apiCall;\n\nfunction fetch(requestBody) {\n  var baseUrl = '/api/v1.0/results';\n  var target = ''; //cancelling pending axios request, if any\n\n  if (apiCall) {\n    apiCall.cancel(); //axios functionality\n  }\n\n  apiCall = axios.CancelToken.source(); //source() is a factory function\n  //returning a promise\n\n  return axios.post(baseUrl + target, requestBody, {\n    cancelToken: apiCall.token\n  });\n}\n\nfunction parseData(response) {\n  //response has been partially parsed already by axios\n  // console.log('response there', response.data);\n  appState.responseStatus = response.status;\n\n  if (appState.responseStatus === 200) {\n    outputsService.parseOutputs(response.data.outputs);\n    outputsService.calculateNetZero();\n    outputsService.parseWarnings(response.data.warnings);\n  }\n\n  if (appState.userAction.indexOf('countryChange') >= 0) {\n    outputsService.setCountryZoom(1);\n  }\n\n  if (appState.isMobile) {\n    // resetting to default state\n    appState.quickDataAvailable = true;\n  }\n\n  appState.waitingForAPI = false;\n  appState.lastAPIAction = appState.userAction;\n  appState.userAction = [];\n  appState.lastAPIResponse = Date.now();\n}\n\nfunction onFetchError() {\n  if (appState.isMobile) {\n    // resetting to default state\n    appState.quickDataAvailable = true;\n  }\n\n  appState.waitingForAPI = false;\n  appState.lastAPIAction = appState.userAction;\n  appState.userAction = []; //reset appState, optional here\n\n  appState.lastAPIResponse = Date.now();\n}",{"version":3,"sources":["/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/dataService.js"],"names":["helpers","axios","inputsService","outputsService","appState","budgetTemperature","budgetFairness","userAction","waitingForAPI","menuOpen","countryZoomIndex","countryZoomDisabled","modalFor","undefined","pathwayIndex","mode","lastAPIResponse","lastAPIAction","responseStatus","activeTab","activeSubtab","mainScreenRouteString","isMobile","inputLatency","onlyExamplePathwayRoutes","showMissingOutputs","noDecimalLevers","quickDataAvailable","updateURLParams","leverStringEU","pathwayObjectToParamString","selected","values","urlParams","URLSearchParams","window","location","search","set","leverStringSingleCountry","countryCode","id","toUpperCase","delete","rewriteURL","params","routeString","tabRoutes","route","toString","history","pushState","path","createRouteString","buildRequestBody","leversByRegion","getLeversByRegion","outpts","outputsByTabs","outputsThatAreAlwaysRequested","forEach","levers","requestBody","outputs","Object","keys","outp","_outp","allCountries","push","availabilityRequest","length","fetch","then","response","data","status","catch","error","isCancel","fetchFromModelAPI","getFromModel","deactivateGroups","leverGroups","parseData","activateAllGroups","onFetchError","debouncedFetch","debounce","fetchData","apiCall","baseUrl","target","cancel","CancelToken","source","post","cancelToken","token","parseOutputs","calculateNetZero","parseWarnings","warnings","indexOf","setCountryZoom","Date","now"],"mappings":"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","sourcesContent":["import * as helpers from './helpers.js';\nimport axios from 'axios';\n\nimport * as inputsService from './inputsService.js';\nimport * as outputsService from './outputsService.js';\n\n// appState is made reactive in App.vue component\n// many of the properties are actually settings (they don't change)\n// but for simplicity reasons (only one object), state and settings both live in the appState object\nexport var appState = {\n  budgetTemperature: 2,\n  budgetFairness: 'capability',\n  userAction: [], //on mobile there can be multiple actions before a fetch is started\n  waitingForAPI: false,\n  menuOpen: false,\n  countryZoomIndex: 0,  //no route parameter for actually preselecting a country, always EU by default,\n                        //regardless of a country being selected\n  countryZoomDisabled: false,\n  // examplePathwaysOnly: true, // user cannot change lever-settings freely, can only choose from examplePathways\n  modalFor: undefined, //either undefined or holds a leverId\n  pathwayIndex: -1,  // -1: no pathway selected, 0+: index of the examplePathway Array\n  mode: undefined, // better name would be \"view\". Possible values: 'legal', 'target', 'intro'\n  lastAPIResponse: undefined, //timestamp\n  lastAPIAction: undefined, // last appState.userAction\n  responseStatus: \"\",\n  activeTab: null,  //only gets set inside outputsService.selectTab which also gets called over routing\n                    //needs to be null on page-load (see App.vue and routeService)\n  activeSubtab: null, //only gets set inside outputsService.selectTab which also gets called over routing\n  mainScreenRouteString: '/app/', //home link by default\n  isMobile: undefined,\n  inputLatency: 0, // latency for lever change, 500 normally\n  onlyExamplePathwayRoutes: false, // restricts routes to examplePathways\n  showMissingOutputs: true,\n  noDecimalLevers: false,\n  quickDataAvailable: true //[true, false] consider using 'undefined' as a third possible state\n};\n\nexport function updateURLParams() {\n  // updates the URL Params (after lever change etc.)\n  // is not responsible for the routes (requestURI), that is handled by rewriteURL\n\n  //EU - default parameters\n  let leverStringEU = inputsService.pathwayObjectToParamString(inputsService.selected[0].values)\n\n  var urlParams = new URLSearchParams(window.location.search);\n\n\n  if(leverStringEU) {\n    urlParams.set('levers', leverStringEU);\n  }\n\n  if(inputsService.selected[1]) {\n    let leverStringSingleCountry = inputsService.pathwayObjectToParamString(inputsService.selected[1].values)\n    let countryCode = inputsService.selected[1].id.toUpperCase();\n\n    if(leverStringSingleCountry && countryCode) {\n      urlParams.set('other', leverStringSingleCountry);\n      urlParams.set('country', countryCode);\n    } else {\n      urlParams.delete('other');\n      urlParams.delete('country');\n    }\n  } else {\n    urlParams.delete('other');\n    urlParams.delete('country');\n  }\n\n  return urlParams;\n}\n\nexport function rewriteURL(params = new URLSearchParams(window.location.search)) {\n  // params has a default value, which is evaluated each time rewriteURL() is called without parameters\n\n  let routeString = '/app/'+outputsService.tabRoutes[appState.activeTab].route + \"/\";\n  routeString += outputsService.tabRoutes[appState.activeTab][appState.activeSubtab].route+\"/\";\n  routeString += '?'+params.toString();\n\n  // console.log('rewriteURL ', routeString);\n\n  history.pushState({path: routeString}, null, routeString);\n\n  appState.mainScreenRouteString = routeString;\n}\n\nexport function createRouteString() {\n  //creates routeString from app data\n\n  var urlParams = new URLSearchParams(window.location.search);\n\n  let leverStringEU = inputsService.pathwayObjectToParamString(inputsService.selected[0].values);\n\n  if(leverStringEU) {\n    urlParams.set('levers', leverStringEU);\n  }\n\n  //if a country was selected\n  if(inputsService.selected[1]) {\n    let leverStringSingleCountry = inputsService.pathwayObjectToParamString(inputsService.selected[1].values);\n    let countryCode = inputsService.selected[1].id.toUpperCase();\n\n    if(leverStringSingleCountry && countryCode) {\n      urlParams.set('other', leverStringSingleCountry);\n      urlParams.set('country', countryCode);\n    } else {\n      urlParams.delete('other');\n      urlParams.delete('country');\n    }\n  } else {\n    urlParams.delete('other');\n    urlParams.delete('country');\n  }\n\n  let routeString = '/app/'+outputsService.tabRoutes[appState.activeTab].route + \"/\";\n  routeString += outputsService.tabRoutes[appState.activeTab][appState.activeSubtab].route+\"/\";\n  routeString += '?'+urlParams.toString();\n\n  return routeString;\n}\n\nfunction buildRequestBody() {\n\n  let leversByRegion = inputsService.getLeversByRegion();\n  let outpts = outputsService.outputsByTabs[appState.activeTab];\n\n  outputsService.outputsThatAreAlwaysRequested.forEach((id) => {\n    // only create entry if output is not already present, we don't want to overwrite any existing allCountries flags\n    if(!outpts[id]) {\n      outpts[id] = {};\n    }\n  });\n\n  // console.log('leversByRegion ', leversByRegion);\n  let levers = {};\n  // some destructuring magic: who needs loops anymore, unless you want to keep it readable :S\n  // nested destructuring assignment\n  // the key 'EU' of the RIGHT side get's written into levers['default']\n  // the rest (Object) get's written into the levers['exceptions'] object\n  ({ ['EU']: levers['default'], ...levers['exceptions']} = leversByRegion);\n\n  var requestBody = {\n    levers: levers,\n    outputs: []\n  };\n\n  Object.keys(outpts).forEach((outp) => {\n    let _outp = {id: outp};\n    if(outpts[outp].allCountries) {\n      _outp.allCountries = true;\n    }\n    requestBody.outputs.push(_outp);\n  });\n\n  return requestBody;\n}\n\nexport function availabilityRequest() {\n  // checks if data would be available quickly, but doesn't set anything\n  // good would be a separate endpoint in the API\n\n  // response sets appState.quickDataAvailable = [true, false] consider using 'undefined' as a third possible state\n  // any succesful response of a real request changes the status of appState.quickDataAvailable to true\n  var requestBody = buildRequestBody();\n\n  if(!requestBody.outputs.length) {\n    // don't send request if outputs is empty, the API would return an error in that case\n    // important: also reset appState.userAction on this exit point! (some subtabs might not depend on API data)\n    appState.userAction = [];\n    return;\n  }\n\n  fetch(requestBody).then(function (response) {\n    // console.log('availabilityRequest ', response);\n    if(response.data.status !== 200) {\n      appState.quickDataAvailable = false;\n    } else {\n      appState.quickDataAvailable = true;\n    }\n  }).catch(function (error) {\n    if (axios.isCancel(error)) {\n      appState.quickDataAvailable = true;\n      //console.log('Request canceled');\n    } else {\n      appState.quickDataAvailable = true;\n    }\n  });\n\n}\n\nexport function fetchFromModelAPI() {\n  var requestBody = buildRequestBody();\n  requestBody.getFromModel = true;\n\n  if(!requestBody.outputs.length) {\n    //don't send request if outputs is empty, the API would return an error in that case\n    //important: also reset appState.userAction on this exit point! (some subtabs might not depend on API data)\n    appState.userAction = [];\n    return;\n  }\n\n  inputsService.deactivateGroups(Object.keys(inputsService.leverGroups));\n  appState.countryZoomDisabled = true;\n\n  appState.waitingForAPI = true;\n\n  fetch(requestBody).then(function (response) {\n    parseData(response);\n    inputsService.activateAllGroups();\n    appState.countryZoomDisabled = false;\n  }).catch(function (error) {\n    if (axios.isCancel(error)) {\n      //console.log('Request canceled');\n    } else {\n      // console.log('fetch error ', error);\n      onFetchError();\n    }\n    inputsService.activateAllGroups();\n    appState.countryZoomDisabled = false;\n  });\n}\n\nexport var debouncedFetch = helpers.debounce(fetchData, appState.inputLatency);\n\nexport function fetchData() {\n  var requestBody = buildRequestBody();\n  // console.log('requestBody ', requestBody);\n\n  if(!requestBody.outputs.length) {\n    //don't send request if outputs is empty, the API would return an error in that case\n    //important: also reset appState.userAction on this exit point! (some subtabs might not depend on API data)\n    appState.userAction = [];\n    return;\n  }\n\n  appState.waitingForAPI = true;\n\n  fetch(requestBody).then(function (response) {\n    parseData(response);\n  }).catch(function (error) {\n    if (axios.isCancel(error)) {\n      //console.log('Request canceled');\n    } else {\n      //console.log('fetch error ', error);\n      onFetchError();\n    }\n  });\n}\n\n\n// for cancelling old requests (only the last request should get processed, previous ones should get cancelled)\n// especially since previous requests could take longer to be answered than the last one!!\n// --> in that case the processed answer wouldn't match the request anymore\nvar apiCall;\nfunction fetch(requestBody) {\n  var baseUrl = '/api/v1.0/results';\n  var target = '';\n\n  //cancelling pending axios request, if any\n  if(apiCall) {\n    apiCall.cancel(); //axios functionality\n  }\n  apiCall = axios.CancelToken.source(); //source() is a factory function\n\n  //returning a promise\n  return axios.post(baseUrl+target, requestBody, { cancelToken: apiCall.token });\n}\n\nfunction parseData(response) {\n  //response has been partially parsed already by axios\n  // console.log('response there', response.data);\n\n  appState.responseStatus = response.status;\n\n  if(appState.responseStatus === 200) {\n    outputsService.parseOutputs(response.data.outputs);\n    outputsService.calculateNetZero();\n    outputsService.parseWarnings(response.data.warnings);\n  }\n\n  if(appState.userAction.indexOf('countryChange') >= 0) {\n    outputsService.setCountryZoom(1);\n  }\n\n  if(appState.isMobile) {\n    // resetting to default state\n    appState.quickDataAvailable = true;\n  }\n\n  appState.waitingForAPI = false;\n  appState.lastAPIAction = appState.userAction;\n  appState.userAction = [];\n  appState.lastAPIResponse = Date.now();\n}\n\nfunction onFetchError() {\n  if(appState.isMobile) {\n    // resetting to default state\n    appState.quickDataAvailable = true;\n  }\n\n  appState.waitingForAPI = false;\n  appState.lastAPIAction = appState.userAction;\n  appState.userAction = []; //reset appState, optional here\n  appState.lastAPIResponse = Date.now();\n}\n"]}]}