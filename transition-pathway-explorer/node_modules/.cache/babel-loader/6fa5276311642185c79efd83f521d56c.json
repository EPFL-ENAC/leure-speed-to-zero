{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/employment/ChangePerSector.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/employment/ChangePerSector.vue","mtime":1707210098278},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234682968}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport BarRangeChart from \"../../../charts/BarRangeChart.vue\";\nimport * as inputsService from \"../../../inputsService.js\";\nimport { ExamplePathways } from \"../../../config/examplePathways.js\";\nimport { EmploymentData } from \"./employmentData.js\";\nexport default {\n  name: 'ChangePerSector',\n  components: {\n    BarRangeChart: BarRangeChart\n  },\n  props: ['subtab', 'outputs', 'chartDefinitions', 'countrycode', 'appState'],\n  data: function data() {\n    return {\n      chart1Data: undefined,\n      isExamplePathway: this.appState.pathwayIndex > -1,\n      noData: undefined\n    };\n  },\n  methods: {\n    buildData: function buildData() {\n      var _this = this;\n      var currChart = this.chartDefinitions[this.subtab.charts[0]];\n      var currentPathwayName = ExamplePathways[this.appState.pathwayIndex].title;\n      if (!EmploymentData[currentPathwayName]) {\n        this.noData = true;\n        return;\n      }\n      this.noData = false;\n      var data = [];\n      var categories = [];\n      currChart.variables.forEach(function (variable) {\n        categories.push(variable.title);\n        var output = EmploymentData[currentPathwayName][variable.id];\n        var value = parseFloat(output[_this.countrycode]);\n        data.push(value < 0 ? [value, 0] : [0, value]);\n      });\n\n      // console.log(categories,data);\n\n      this.chart1Data = {\n        series: [{\n          data: data\n        }],\n        title: currChart.title,\n        unit: currChart.unit,\n        categories: categories\n      };\n    }\n  },\n  created: function created() {\n    // inputsService.deactivateGroups(Object.keys(inputsService.leverGroups));\n    setTimeout(function () {\n      inputsService.deactivateGroups(Object.keys(inputsService.leverGroups));\n    }, 0);\n    // inputsService.deactivateCountryZoom();\n\n    if (this.isExamplePathway) {\n      this.buildData();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    inputsService.activateAllGroups();\n  },\n  watch: {\n    'appState.pathwayIndex': function appStatePathwayIndex() {\n      this.isExamplePathway = this.appState.pathwayIndex > -1;\n      if (this.isExamplePathway) {\n        this.buildData();\n      }\n    },\n    // important, this component also lets you zoom into a country (dropwdown where the outputs are shown)\n    countrycode: function countrycode() {\n      this.isExamplePathway = this.appState.pathwayIndex > -1;\n      if (this.isExamplePathway) {\n        this.buildData();\n      }\n    }\n  }\n};",{"version":3,"sources":["ChangePerSector.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAA,aAAA;AAEA,OAAA,KAAA,aAAA;AACA,SAAA,eAAA;AAEA,SAAA,cAAA;AAEA,eAAA;EACA,IAAA,EAAA,iBAAA;EACA,UAAA,EAAA;IAAA,aAAA,EAAA;EAAA,CAAA;EACA,KAAA,EAAA,CAAA,QAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,aAAA,EAAA,UAAA,CAAA;EACA,IAAA,WAAA,KAAA,EAAA;IACA,OAAA;MACA,UAAA,EAAA,SAAA;MACA,gBAAA,EAAA,IAAA,CAAA,QAAA,CAAA,YAAA,GAAA,CAAA,CAAA;MACA,MAAA,EAAA;IACA,CAAA;EACA,CAAA;EACA,OAAA,EAAA;IACA,SAAA,WAAA,UAAA,EAAA;MAAA,IAAA,KAAA;MACA,IAAA,SAAA,GAAA,IAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;MAEA,IAAA,kBAAA,GAAA,eAAA,CAAA,IAAA,CAAA,QAAA,CAAA,YAAA,CAAA,CAAA,KAAA;MAEA,IAAA,CAAA,cAAA,CAAA,kBAAA,CAAA,EAAA;QACA,IAAA,CAAA,MAAA,GAAA,IAAA;QACA;MACA;MAEA,IAAA,CAAA,MAAA,GAAA,KAAA;MAEA,IAAA,IAAA,GAAA,EAAA;MACA,IAAA,UAAA,GAAA,EAAA;MAEA,SAAA,CAAA,SAAA,CAAA,OAAA,CAAA,UAAA,QAAA,EAAA;QAEA,UAAA,CAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA;QAEA,IAAA,MAAA,GAAA,cAAA,CAAA,kBAAA,CAAA,CAAA,QAAA,CAAA,EAAA,CAAA;QACA,IAAA,KAAA,GAAA,UAAA,CAAA,MAAA,CAAA,KAAA,CAAA,WAAA,CAAA,CAAA;QACA,IAAA,CAAA,IAAA,CACA,KAAA,GAAA,CAAA,GAAA,CAAA,KAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,KAAA,CACA,CAAA;MAEA,CAAA,CAAA;;MAEA;;MAEA,IAAA,CAAA,UAAA,GAAA;QACA,MAAA,EAAA,CAAA;UACA,IAAA,EAAA;QACA,CAAA,CAAA;QACA,KAAA,EAAA,SAAA,CAAA,KAAA;QACA,IAAA,EAAA,SAAA,CAAA,IAAA;QACA,UAAA,EAAA;MACA,CAAA;IACA;EACA,CAAA;EACA,OAAA,WAAA,QAAA,EAAA;IACA;IACA,UAAA,CAAA,YAAA;MACA,aAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,aAAA,CAAA,WAAA,CAAA,CAAA;IACA,CAAA,EAAA,CAAA,CAAA;IACA;;IAEA,IAAA,IAAA,CAAA,gBAAA,EAAA;MACA,IAAA,CAAA,SAAA,CAAA,CAAA;IACA;EACA,CAAA;EACA,aAAA,WAAA,cAAA,EAAA;IACA,aAAA,CAAA,iBAAA,CAAA,CAAA;EACA,CAAA;EACA,KAAA,EAAA;IACA,uBAAA,EAAA,SAAA,qBAAA,EAAA;MACA,IAAA,CAAA,gBAAA,GAAA,IAAA,CAAA,QAAA,CAAA,YAAA,GAAA,CAAA,CAAA;MACA,IAAA,IAAA,CAAA,gBAAA,EAAA;QACA,IAAA,CAAA,SAAA,CAAA,CAAA;MACA;IACA,CAAA;IACA;IACA,WAAA,EAAA,SAAA,YAAA,EAAA;MACA,IAAA,CAAA,gBAAA,GAAA,IAAA,CAAA,QAAA,CAAA,YAAA,GAAA,CAAA,CAAA;MACA,IAAA,IAAA,CAAA,gBAAA,EAAA;QACA,IAAA,CAAA,SAAA,CAAA,CAAA;MACA;IACA;EACA;AACA,CAAA","sourcesContent":["<template>\n  <div class=\"subtab-content\">\n    <BarRangeChart v-if=\"chart1Data && isExamplePathway && !noData\" :chart-data=\"chart1Data\"/>\n\n    <div v-if=\"chart1Data && isExamplePathway && !noData\" class=\"chart-info\">\n      <p>\n        Each sector is affected directly and indirectly by the transition. For instance, if individuals purchase less cars (group of levers “Key behaviours - Travel”), then the industrial production of vehicles decrease (direct effect).\n      </p>\n      <p>\n        But since the car production industry require materials (e.g., iron and steel, plastics, aluminium) as well as energy, the production of these sectors will also decrease (indirect effect).\n      </p>\n      <p>\n        This graph accounts for both effects. More details are available in the Employment module documentation, available here:<br>\n        <a href=\"http://www.european-calculator.eu/documentation\" target=\"_blank\" rel=\"noopener\"><b>http://www.european-calculator.eu/documentation</b></a>\n      </p>\n    </div>\n\n    <div v-if=\"!isExamplePathway\" class=\"subtab-error\">\n      <p>\n        Data for this tab is only available for example pathways.<br>\n        Please choose an example pathway.\n      </p>\n    </div>\n    <div v-if=\"isExamplePathway && noData\" class=\"subtab-error\">\n      <p>\n        There is no data yet available for this example pathway.\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport BarRangeChart from '../../../charts/BarRangeChart.vue';\n\nimport * as inputsService from '../../../inputsService.js';\nimport {ExamplePathways} from '../../../config/examplePathways.js';\n\nimport {EmploymentData} from './employmentData.js';\n\nexport default {\n  name: 'ChangePerSector',\n  components: {BarRangeChart},\n  props: ['subtab','outputs','chartDefinitions','countrycode','appState'],\n  data() {\n    return {\n      chart1Data: undefined,\n      isExamplePathway: this.appState.pathwayIndex > -1,\n      noData: undefined\n    }\n  },\n  methods: {\n    buildData() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n\n      let currentPathwayName = ExamplePathways[this.appState.pathwayIndex].title;\n\n      if(!EmploymentData[currentPathwayName]) {\n        this.noData = true;\n        return;\n      }\n\n      this.noData = false;\n\n      let data = [];\n      let categories = [];\n\n      currChart.variables.forEach((variable) => {\n\n        categories.push(variable.title);\n\n        let output = EmploymentData[currentPathwayName][variable.id];\n        let value = parseFloat(output[this.countrycode]);\n        data.push(\n          value < 0 ? [value,0] : [0,value]\n        );\n\n      });\n\n      // console.log(categories,data);\n\n      this.chart1Data = {\n        series: [{\n          data: data\n        }],\n        title: currChart.title,\n        unit: currChart.unit,\n        categories: categories\n      };\n    }\n  },\n  created() {\n    // inputsService.deactivateGroups(Object.keys(inputsService.leverGroups));\n    setTimeout(() => {\n      inputsService.deactivateGroups(Object.keys(inputsService.leverGroups));\n    },0);\n    // inputsService.deactivateCountryZoom();\n\n    if(this.isExamplePathway) {\n      this.buildData();\n    }\n  },\n  beforeDestroy() {\n    inputsService.activateAllGroups();\n  },\n  watch: {\n    'appState.pathwayIndex': function() {\n      this.isExamplePathway = this.appState.pathwayIndex > -1;\n      if(this.isExamplePathway) {\n        this.buildData();\n      }\n    },\n    // important, this component also lets you zoom into a country (dropwdown where the outputs are shown)\n    countrycode: function() {\n      this.isExamplePathway = this.appState.pathwayIndex > -1;\n      if(this.isExamplePathway) {\n        this.buildData();\n      }\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n</style>\n"],"sourceRoot":"src/components/tabs/employment"}]}