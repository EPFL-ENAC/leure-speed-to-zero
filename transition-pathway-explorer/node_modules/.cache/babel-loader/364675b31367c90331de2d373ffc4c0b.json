{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/TwoCharts.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/TwoCharts.vue","mtime":1707210098277},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234682968}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as outputsService from \"../../outputsService.js\";\nimport { buildChartData } from \"../../chartSeriesBuilders.js\";\nexport default {\n  name: 'TwoCharts',\n  components: {\n    'StackedAreaChart': function StackedAreaChart() {\n      return import(\"../../charts/StackedAreaChart.vue\");\n    },\n    'LineChart': function LineChart() {\n      return import(\"../../charts/LineChart.vue\");\n    },\n    'StackedAreaChart100Percent': function StackedAreaChart100Percent() {\n      return import(\"../../charts/StackedAreaChart100Percent.vue\");\n    }\n  },\n  props: ['subtab', 'outputs', 'chartDefinitions', 'countrycode', 'appState'],\n  data: function data() {\n    return {\n      chart1Data: {},\n      chart2Data: {},\n      chart1Component: undefined,\n      chart2Component: undefined,\n      infoComponent: undefined\n    };\n  },\n  computed: {\n    chart1HasNegativeData: function chart1HasNegativeData() {\n      var currChart = this.chartDefinitions[this.subtab.charts[0]];\n      return currChart.type === \"StackedAreaNegative\";\n    },\n    chart2HasNegativeData: function chart2HasNegativeData() {\n      var currChart = this.chartDefinitions[this.subtab.charts[0]];\n      return currChart.type === \"StackedAreaNegative\";\n    }\n  },\n  methods: {\n    buildDataForChart1: function buildDataForChart1() {\n      var currChart = this.chartDefinitions[this.subtab.charts[0]];\n      var chartData = buildChartData(this.countrycode, currChart, this.outputs, this.chart1HasNegativeData);\n      if (chartData) {\n        this.chart1Data = chartData;\n      }\n      //possible to add color info, css classes, sort the series etc\n    },\n    buildDataForChart2: function buildDataForChart2() {\n      var currChart = this.chartDefinitions[this.subtab.charts[1]];\n      var chartData = buildChartData(this.countrycode, currChart, this.outputs, this.chart2HasNegativeData);\n      if (chartData) {\n        this.chart2Data = chartData;\n      }\n      //possible to add color info, css classes, sort the series etc\n    },\n    loadChart1Component: function loadChart1Component() {\n      var currChart = this.chartDefinitions[this.subtab.charts[0]];\n      // console.log('loadChartComponent ', currChart, this.subtab, this.chartDefinitions);\n      if (currChart) {\n        this.chart1Component = outputsService.chartTypeToComponentMap[currChart.type];\n      }\n    },\n    loadChart2Component: function loadChart2Component() {\n      var currChart = this.chartDefinitions[this.subtab.charts[1]];\n      // console.log('loadChartComponent ', currChart, this.subtab, this.chartDefinitions);\n      if (currChart) {\n        this.chart2Component = outputsService.chartTypeToComponentMap[currChart.type];\n      }\n    },\n    loadInfoComponent: function loadInfoComponent() {\n      var _this = this;\n      var fileName = this.subtab.charts[0] + '.vue';\n\n      //import() only works with partial paths, it doesn't take a single variable, like import(filePath). import() is not a function!! It just looks like one\n      //This rest is a bit hacky, but well.\n      //The first import() looks if the file exists, if not the error is silently caught.\n      //If it exists, a second import needs to be started because <component> cannot work directly with the answer of the\n      //first succesful fetch. It can only work with a function like this (for dynamic imports):\n      //infoComponent = () => import(`../content/${fileName}`)\n      import(\"./content/\".concat(fileName)).then(function () {\n        _this.infoComponent = function () {\n          return import(\"./content/\".concat(fileName));\n        };\n      }).catch(function () {\n        // console.log('info component not found');\n      });\n    }\n  },\n  created: function created() {\n    this.loadChart1Component();\n    this.loadChart2Component();\n    if (this.appState.lastAPIResponse) {\n      // only call buildDataForChart when data is already available!\n      this.buildDataForChart1();\n      this.buildDataForChart2();\n    }\n    this.loadInfoComponent();\n  },\n  watch: {\n    'appState.lastAPIResponse': function appStateLastAPIResponse() {\n      this.buildDataForChart1();\n      this.buildDataForChart2();\n    },\n    countrycode: function countrycode() {\n      this.buildDataForChart1();\n      this.buildDataForChart2();\n    }\n  }\n};",{"version":3,"sources":["TwoCharts.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"subtab-content\">\n    <div class=\"tsasbs-cont\">\n      <div class=\"tsasbs-chart\">\n        <component v-bind:is=\"chart1Component\"\n          v-if=\"Object.keys(chart1Data).length\"\n          :chart-data=\"chart1Data\"\n        ></component>\n      </div>\n      <div class=\"tsasbs-chart\">\n        <component v-bind:is=\"chart2Component\"\n          v-if=\"Object.keys(chart2Data).length\"\n          :chart-data=\"chart2Data\"\n        ></component>\n      </div>\n    </div>\n    <component v-if=\"infoComponent\" :is=\"infoComponent\"/>\n  </div>\n</template>\n\n<script>\nimport * as outputsService from '../../outputsService.js';\nimport {buildChartData} from '../../chartSeriesBuilders.js';\n\nexport default {\n  name: 'TwoCharts',\n  components: {\n    'StackedAreaChart': () => import('../../charts/StackedAreaChart.vue'),\n    'LineChart': () => import('../../charts/LineChart.vue'),\n    'StackedAreaChart100Percent': () => import('../../charts/StackedAreaChart100Percent.vue')\n  },\n  props: ['subtab','outputs','chartDefinitions','countrycode','appState'],\n  data() {\n    return {\n      chart1Data: {},\n      chart2Data: {},\n      chart1Component: undefined,\n      chart2Component: undefined,\n      infoComponent: undefined\n    }\n  },\n  computed: {\n    chart1HasNegativeData() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n      return currChart.type === \"StackedAreaNegative\";\n    },\n    chart2HasNegativeData() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n      return currChart.type === \"StackedAreaNegative\";\n    }\n  },\n  methods: {\n    buildDataForChart1() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n      let chartData = buildChartData(this.countrycode, currChart, this.outputs, this.chart1HasNegativeData);\n      if(chartData) {\n        this.chart1Data = chartData;\n      }\n      //possible to add color info, css classes, sort the series etc\n    },\n    buildDataForChart2() {\n      let currChart = this.chartDefinitions[this.subtab.charts[1]];\n      let chartData = buildChartData(this.countrycode, currChart, this.outputs, this.chart2HasNegativeData);\n      if(chartData) {\n        this.chart2Data = chartData;\n      }\n      //possible to add color info, css classes, sort the series etc\n    },\n    loadChart1Component() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n      // console.log('loadChartComponent ', currChart, this.subtab, this.chartDefinitions);\n      if(currChart) {\n        this.chart1Component = outputsService.chartTypeToComponentMap[currChart.type];\n      }\n    },\n    loadChart2Component() {\n      let currChart = this.chartDefinitions[this.subtab.charts[1]];\n      // console.log('loadChartComponent ', currChart, this.subtab, this.chartDefinitions);\n      if(currChart) {\n        this.chart2Component = outputsService.chartTypeToComponentMap[currChart.type];\n      }\n    },\n    loadInfoComponent() {\n      let fileName = this.subtab.charts[0]+'.vue';\n\n      //import() only works with partial paths, it doesn't take a single variable, like import(filePath). import() is not a function!! It just looks like one\n      //This rest is a bit hacky, but well.\n      //The first import() looks if the file exists, if not the error is silently caught.\n      //If it exists, a second import needs to be started because <component> cannot work directly with the answer of the\n      //first succesful fetch. It can only work with a function like this (for dynamic imports):\n      //infoComponent = () => import(`../content/${fileName}`)\n      import(`./content/${fileName}`)\n      .then(() => {\n        this.infoComponent = () => import(`./content/${fileName}`);\n      })\n      .catch(() => {\n        // console.log('info component not found');\n      });\n    }\n  },\n  created() {\n    this.loadChart1Component();\n    this.loadChart2Component();\n    if(this.appState.lastAPIResponse) {\n      // only call buildDataForChart when data is already available!\n      this.buildDataForChart1();\n      this.buildDataForChart2();\n    }\n    this.loadInfoComponent();\n  },\n  watch: {\n    'appState.lastAPIResponse': function() {\n      this.buildDataForChart1();\n      this.buildDataForChart2();\n    },\n    countrycode: function() {\n      this.buildDataForChart1();\n      this.buildDataForChart2();\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n</style>\n"],"sourceRoot":"src/components/tabs"}]}