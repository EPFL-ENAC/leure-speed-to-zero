{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/emissions/GHGSources.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/components/tabs/emissions/GHGSources.vue","mtime":1707210098278},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234519986}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport SideBarChart from \"../../../charts/SideBarChart.vue\";\nexport default {\n  name: 'GHGSources',\n  props: ['subtab', 'outputs', 'chartDefinitions', 'appState'],\n  components: {\n    SideBarChart: SideBarChart\n  },\n  data: function data() {\n    return {\n      chartsData: {},\n      currentChart: undefined,\n      // id\n      isToplevel: undefined\n    };\n  },\n  methods: {\n    goBack: function goBack() {\n      //setting state var that determines animation direction\n      if (this.chartChain.length > 1) {\n        this.chartChain.pop();\n        this.currentChart = this.chartChain[this.chartChain.length - 1];\n\n        if (this.chartChain.length > 1) {\n          this.isToplevel = false;\n        } else {\n          this.isToplevel = true;\n        }\n      }\n    },\n    goDeeper: function goDeeper(target) {\n      this.chartChain.push(target); //strings only! not using references here\n\n      this.currentChart = target;\n      this.isToplevel = false;\n    },\n    buildData: function buildData() {\n      var _this = this;\n\n      var currChart = this.chartDefinitions[this.subtab.charts[0]];\n      var country = 'EU';\n      this.chartsData = {};\n      Object.keys(currChart.structure).forEach(function (chartkey) {\n        var title;\n\n        if (currChart.structure[chartkey].title) {\n          title = currChart.structure.title;\n        } else if (_this.outputs[chartkey] && _this.outputs[chartkey].title) {\n          title = _this.outputs[chartkey].title;\n        } else if (_this.outputs[chartkey] && !_this.outputs[chartkey].title) {\n          title = _this.outputs[chartkey];\n        }\n\n        var series = [];\n        currChart.structure[chartkey].series.forEach(function (outputId) {\n          if (outputId && _this.outputs[outputId] && _this.outputs[outputId].data && _this.outputs[outputId].data[country]) {\n            var data = _this.outputs[outputId].data[country];\n            series.push({\n              name: _this.outputs[outputId] && _this.outputs[outputId].title ? _this.outputs[outputId].title : outputId,\n              id: outputId,\n              value: Math.round(data[data.length - 1])\n            });\n          }\n        });\n        _this.chartsData[chartkey] = {\n          title: title,\n          unit: currChart.unit,\n          series: series\n        };\n      });\n      this.currentChart = this.currentChart ? this.currentChart : \"root\";\n      this.chartChain = this.chartChain ? this.chartChain : [this.currentChart];\n      this.isToplevel = this.chartChain.length < 2; //check for parts\n\n      Object.keys(this.chartsData).forEach(function (seriesKey) {\n        _this.chartsData[seriesKey].series.forEach(function (entry) {\n          if (_this.chartsData[entry.id]) {\n            entry.hasParts = true;\n          }\n        });\n      });\n    }\n  },\n  watch: {\n    'appState.lastAPIResponse': function appStateLastAPIResponse() {\n      //console.log('lastAPIResponse changed');\n      this.buildData();\n    }\n  },\n  created: function created() {\n    this.buildData();\n  }\n};",{"version":3,"sources":["GHGSources.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"subtab-content\">\n\n    <transition name=\"modal-fade\" mode=\"out-in\">\n      <SideBarChart :key=\"currentChart\" class=\"emissions-chart\"\n        :chart-data=\"chartsData[currentChart]\"\n        :go-back=\"isToplevel ? null: goBack\"\n        :go-deeper=\"goDeeper\"\n      />\n    </transition>\n\n\n  </div>\n</template>\n\n<script>\nimport SideBarChart from '../../../charts/SideBarChart.vue';\n\nexport default {\n  name: 'GHGSources',\n  props: ['subtab','outputs', 'chartDefinitions', 'appState'],\n  components: {\n    SideBarChart\n  },\n  data() {\n    return {\n      chartsData: {},\n      currentChart: undefined, // id\n      isToplevel: undefined\n    }\n  },\n  methods: {\n    goBack() {\n      //setting state var that determines animation direction\n      if(this.chartChain.length > 1) {\n        this.chartChain.pop();\n        this.currentChart = this.chartChain[this.chartChain.length-1];\n        if(this.chartChain.length > 1) {\n          this.isToplevel = false;\n        } else {\n          this.isToplevel = true;\n        }\n      }\n    },\n    goDeeper(target) {\n      this.chartChain.push(target)  //strings only! not using references here\n      this.currentChart = target;\n      this.isToplevel = false;\n    },\n    buildData() {\n      let currChart = this.chartDefinitions[this.subtab.charts[0]];\n      let country = 'EU';\n\n      this.chartsData = {};\n      Object.keys(currChart.structure).forEach( (chartkey)=> {\n        let title;\n        if(currChart.structure[chartkey].title) {\n          title = currChart.structure.title\n        }\n        else if (this.outputs[chartkey] && this.outputs[chartkey].title) {\n          title = this.outputs[chartkey].title;\n        }\n        else if (this.outputs[chartkey] && !this.outputs[chartkey].title) {\n          title = this.outputs[chartkey]\n        }\n\n\n        let series = [];\n        currChart.structure[chartkey].series.forEach((outputId) => {\n          if(outputId && this.outputs[outputId] && this.outputs[outputId].data && this.outputs[outputId].data[country]) {\n            let data = this.outputs[outputId].data[country];\n            series.push({\n              name: (this.outputs[outputId] && this.outputs[outputId].title) ? this.outputs[outputId].title : outputId,\n              id: outputId,\n              value: Math.round(data[data.length-1])\n            })\n          }\n        });\n\n        this.chartsData[chartkey] = {\n          title: title,\n          unit: currChart.unit,\n          series: series\n        }\n      });\n\n      this.currentChart = this.currentChart ? this.currentChart : \"root\";\n      this.chartChain = this.chartChain ? this.chartChain : [this.currentChart];\n      this.isToplevel = this.chartChain.length < 2;\n\n      //check for parts\n      Object.keys(this.chartsData).forEach((seriesKey) => {\n        this.chartsData[seriesKey].series.forEach((entry) => {\n          if(this.chartsData[entry.id]) {\n            entry.hasParts = true;\n          }\n        });\n      });\n\n    }\n  },\n  watch: {\n    'appState.lastAPIResponse': function() {\n      //console.log('lastAPIResponse changed');\n      this.buildData();\n    }\n  },\n  created() {\n    this.buildData();\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n.emissions-chart {\n  max-width: 450px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 20px 100px;\n  border: 1px solid darkgrey;\n}\n</style>\n"],"sourceRoot":"src/components/tabs/emissions"}]}