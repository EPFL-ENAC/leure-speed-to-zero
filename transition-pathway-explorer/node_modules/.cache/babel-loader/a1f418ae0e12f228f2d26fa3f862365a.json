{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/charts/AreaRange.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/charts/AreaRange.vue","mtime":1707210098267},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234519986}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\nimport chartFixFreeAxisMixin from \"../mixins/chartFixFreeAxisMixin.js\";\nimport highcharts from \"highcharts\";\nimport exporting from \"highcharts/modules/exporting\";\nimport exportData from \"highcharts/modules/export-data\";\nimport more from 'highcharts/highcharts-more';\nexport default {\n  name: 'AreaRange',\n  mixins: [chartFixFreeAxisMixin],\n  props: ['chartData'],\n  //chartData.title, chartData.timeAxis, chartData.series\n  data: function data() {\n    return {\n      axisFixed: false\n    };\n  },\n  watch: {\n    chartData: {\n      // doesn't need to be a deep watch, because the whole object gets replaced\n      handler: function handler() {\n        this.updatePlotline();\n      }\n    }\n  },\n  methods: {\n    highlightLinkedSeries: function highlightLinkedSeries(evt) {\n      if (this.chartData.series.length < 3) {\n        return;\n      }\n\n      var target = evt.target;\n      var linkedSeries;\n\n      if (target.linkedSeries && target.linkedSeries[0]) {\n        linkedSeries = target.linkedSeries[0];\n      }\n\n      if (linkedSeries) {\n        linkedSeries.update({\n          fillOpacity: 0.6\n        });\n      }\n    },\n    unhighlightLinkedSeries: function unhighlightLinkedSeries(evt) {\n      if (this.chartData.series.length < 3) {\n        return;\n      }\n\n      var target = evt.target;\n      var linkedSeries;\n\n      if (target.linkedSeries && target.linkedSeries[0]) {\n        linkedSeries = target.linkedSeries[0];\n      }\n\n      if (linkedSeries) {\n        // linkedSeries.options.opacity = 0.3;\n        // --> this doesn't work properly, don't access properties directly, use highcharts internal functions like below:\n        linkedSeries.update({\n          fillOpacity: 0.1\n        });\n      }\n    },\n    updatePlotline: function updatePlotline() {\n      // this component doesn't get rendered with just empty data\n      // on updates only the plotline changes\n      this.chart.xAxis[0].options.plotLines[0].value = this.chartData.temp2100;\n      this.chart.xAxis[0].update();\n    }\n  },\n  mounted: function mounted() {\n    var container = this.$refs.chart;\n    exporting(highcharts);\n    exportData(highcharts);\n    more(highcharts);\n    var that = this;\n    this.chart = new highcharts.Chart({\n      chart: {\n        renderTo: container,\n        inverted: true,\n        spacingBottom: 30,\n        animation: false\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: this.chartData.title\n      },\n      xAxis: {\n        tickmarkPlacement: 'on',\n        title: {\n          text: \"Â°C\"\n        },\n        min: 0,\n        max: 4.6,\n        reversed: false,\n        // is set to true when chart.inverted == true\n        tickInterval: 1,\n        plotLines: [{\n          color: '#FF0000',\n          width: 2,\n          value: this.chartData.temp2100,\n          label: {\n            text: \"T in 2100\",\n            y: -5,\n            x: 5,\n            style: {\n              color: 'red',\n              fontWeight: 'bold'\n            }\n          }\n        }]\n      },\n      yAxis: {\n        crosshair: {\n          width: 2,\n          snap: false\n        },\n        title: {\n          useHTML: true,\n          text: this.chartData.unit,\n          margin: 10\n        },\n        lineWidth: 1\n      },\n      tooltip: {\n        useHTML: true,\n        formatter: function formatter() {\n          // this.point.index is undocumented, might change in future releases of highcharts !!\n          var xIndex = this.point.index;\n          var linkedSeries = this.series.linkedSeries[0];\n          var rangeLow = linkedSeries.data[xIndex].low;\n          var rangeHigh = linkedSeries.data[xIndex].high;\n          var tooltipString = \"\\n            <div>\\n              <span style='font-weight: bold; color: \" + this.series.color + \"'>\" + this.series.name + \":</span>\\n              <span style='font-weight: bold;'>\" + this.y + \"</span>\\n              <b>\\n            </div>\\n            <div>\\n              <span>Bounds of estimates:</span>\\n              <span>\" + rangeLow + \" - \" + rangeHigh + \"</span>\\n            </div>\\n          \";\n          return tooltipString;\n        }\n      },\n      plotOptions: {\n        series: {\n          label: {\n            enabled: false\n          }\n        },\n        areasplinerange: {\n          fillOpacity: this.chartData.series.length > 2 ? 0.1 : 0.5,\n          lineWidth: 0,\n          enableMouseTracking: false,\n          // disables the tooltip\n          marker: {\n            enabled: false\n          }\n        },\n        spline: {\n          events: {\n            mouseOver: function mouseOver(evt) {\n              that.highlightLinkedSeries(evt);\n            },\n            mouseOut: function mouseOut(evt) {\n              that.unhighlightLinkedSeries(evt);\n            }\n          }\n        }\n      },\n      responsive: {\n        rules: [{\n          condition: {\n            maxWidth: 500\n          }\n        }]\n      },\n      exporting: {\n        menuItemDefinitions: {\n          // Custom definition\n          fixAxis: {\n            onclick: this.fixAxis,\n            text: 'Fixed axis'\n          },\n          freeAxis: {\n            onclick: this.freeAxis,\n            text: 'Auto axis'\n          }\n        },\n        buttons: {\n          contextButton: {\n            menuItems: [\"fixAxis\", \"freeAxis\", \"separator\", \"printChart\", \"separator\", \"downloadPNG\", \"downloadJPEG\", \"downloadPDF\", \"downloadSVG\", \"separator\", \"downloadCSV\", \"downloadXLS\"]\n          }\n        }\n      },\n      series: this.chartData.series\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n  }\n};",{"version":3,"sources":["AreaRange.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"chart-container\">\n    <div class=\"chart\" :class=\"{'fixed-axis': axisFixed, 'free-axis': !axisFixed}\" ref=\"chart\"></div>\n  </div>\n</template>\n\n<script>\nimport chartFixFreeAxisMixin from '../mixins/chartFixFreeAxisMixin.js';\n\nimport highcharts from \"highcharts\";\nimport exporting from \"highcharts/modules/exporting\";\nimport exportData from \"highcharts/modules/export-data\";\nimport more from 'highcharts/highcharts-more';\n\nexport default {\n  name: 'AreaRange',\n  mixins: [chartFixFreeAxisMixin],\n  props: ['chartData'], //chartData.title, chartData.timeAxis, chartData.series\n  data: function() {\n    return {\n      axisFixed: false\n    }\n  },\n  watch: {\n    chartData: {\n      // doesn't need to be a deep watch, because the whole object gets replaced\n      handler() {\n        this.updatePlotline();\n      }\n    }\n  },\n  methods: {\n    highlightLinkedSeries(evt) {\n      if(this.chartData.series.length < 3) {\n        return;\n      }\n\n      let target = evt.target;\n\n      let linkedSeries;\n      if(target.linkedSeries && target.linkedSeries[0]) {\n        linkedSeries = target.linkedSeries[0];\n      }\n      if(linkedSeries) {\n        linkedSeries.update({\n          fillOpacity: 0.6\n        });\n      }\n    },\n    unhighlightLinkedSeries(evt) {\n      if(this.chartData.series.length < 3) {\n        return;\n      }\n\n      let target = evt.target;\n\n      let linkedSeries;\n      if(target.linkedSeries && target.linkedSeries[0]) {\n        linkedSeries = target.linkedSeries[0];\n      }\n      if(linkedSeries) {\n        // linkedSeries.options.opacity = 0.3;\n        // --> this doesn't work properly, don't access properties directly, use highcharts internal functions like below:\n\n        linkedSeries.update({\n          fillOpacity: 0.1\n        });\n      }\n    },\n    updatePlotline() {\n      // this component doesn't get rendered with just empty data\n      // on updates only the plotline changes\n      this.chart.xAxis[0].options.plotLines[0].value = this.chartData.temp2100;\n      this.chart.xAxis[0].update();\n    }\n  },\n  mounted() {\n    var container = this.$refs.chart;\n\n    exporting(highcharts);\n    exportData(highcharts);\n    more(highcharts);\n\n    var that = this;\n\n    this.chart = new highcharts.Chart({\n      chart: {\n        renderTo: container,\n        inverted: true,\n        spacingBottom: 30,\n        animation: false\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: this.chartData.title\n      },\n      xAxis: {\n        tickmarkPlacement: 'on',\n        title:{\n          text: \"Â°C\"\n        },\n        min: 0,\n        max: 4.6,\n        reversed: false, // is set to true when chart.inverted == true\n        tickInterval: 1,\n        plotLines: [{\n          color: '#FF0000',\n          width: 2,\n          value: this.chartData.temp2100,\n          label: {\n            text: \"T in 2100\",\n            y: -5,\n            x: 5,\n            style: {\n              color: 'red',\n              fontWeight: 'bold'\n            }\n          }\n        }]\n      },\n      yAxis: {\n        crosshair: {\n          width: 2,\n          snap: false\n        },\n        title: {\n          useHTML: true,\n          text: this.chartData.unit,\n          margin: 10\n        },\n        lineWidth: 1\n      },\n      tooltip: {\n        useHTML: true,\n        formatter: function() {\n          // this.point.index is undocumented, might change in future releases of highcharts !!\n          let xIndex = this.point.index;\n\n          let linkedSeries = this.series.linkedSeries[0];\n          let rangeLow = linkedSeries.data[xIndex].low;\n          let rangeHigh = linkedSeries.data[xIndex].high;\n\n          let tooltipString = `\n            <div>\n              <span style='font-weight: bold; color: `+this.series.color+`'>`+this.series.name+`:</span>\n              <span style='font-weight: bold;'>`+this.y+`</span>\n              <b>\n            </div>\n            <div>\n              <span>Bounds of estimates:</span>\n              <span>`+rangeLow+` - `+rangeHigh+`</span>\n            </div>\n          `;\n\n          return tooltipString;\n        }\n      },\n      plotOptions: {\n        series: {\n          label: {\n            enabled: false\n          }\n        },\n        areasplinerange: {\n          fillOpacity: this.chartData.series.length > 2 ? 0.1 : 0.5,\n          lineWidth: 0,\n          enableMouseTracking: false, // disables the tooltip\n          marker: {\n            enabled: false\n          }\n        },\n        spline: {\n          events: {\n            mouseOver: function (evt) {\n              that.highlightLinkedSeries(evt);\n            },\n            mouseOut: function (evt) {\n              that.unhighlightLinkedSeries(evt);\n            }\n          }\n        }\n      },\n      responsive: {\n        rules: [{\n          condition: {\n            maxWidth: 500\n          }\n        }]\n      },\n      exporting: {\n        menuItemDefinitions: {\n          // Custom definition\n          fixAxis: {\n            onclick: this.fixAxis,\n            text: 'Fixed axis'\n          },\n          freeAxis: {\n            onclick: this.freeAxis,\n            text: 'Auto axis'\n          }\n        },\n        buttons: {\n          contextButton: {\n            menuItems: [\n              \"fixAxis\",\n              \"freeAxis\",\n              \"separator\",\n              \"printChart\",\n              \"separator\",\n              \"downloadPNG\",\n              \"downloadJPEG\",\n              \"downloadPDF\",\n              \"downloadSVG\",\n              \"separator\",\n              \"downloadCSV\",\n              \"downloadXLS\"\n            ]\n          }\n        }\n      },\n      series: this.chartData.series\n    });\n  },\n  beforeDestroy() {\n    if(this.chart) {\n      this.chart.destroy();\n    }\n  },\n}\n</script>\n\n<style>\n</style>\n"],"sourceRoot":"src/charts"}]}