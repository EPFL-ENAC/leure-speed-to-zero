{"remainingRequest":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/babel-loader/lib/index.js!/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/src/charts/StackedAreaChart.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/src/charts/StackedAreaChart.vue","mtime":1707210098267},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234682968}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-integer\";\n//\n//\n//\n//\n//\n//\n\nimport chartFixFreeAxisMixin from \"../mixins/chartFixFreeAxisMixin.js\";\nimport chartUpdateAddSeriesMixin from \"../mixins/chartUpdateAddSeriesMixin.js\";\nimport highcharts from \"highcharts\";\nimport exporting from \"highcharts/modules/exporting\";\nimport exportData from \"highcharts/modules/export-data\";\nimport more from 'highcharts/highcharts-more';\n\n// https://api.highcharts.com/highcharts/plotOptions.series.label\n// Series labels are placed as close to the series as possible in a natural way, seeking to avoid other series.\n// The goal of this feature is to make the chart more easily readable, like if a human designer placed the labels in the optimal position.\nimport seriesLabels from \"highcharts/modules/series-label\";\nexport default {\n  name: 'StackedAreaChart',\n  mixins: [chartFixFreeAxisMixin, chartUpdateAddSeriesMixin],\n  props: ['chartData'],\n  //chartData.title, chartData.timeAxis, chartData.series\n  data: function data() {\n    return {\n      axisFixed: false\n    };\n  },\n  watch: {\n    chartData: {\n      handler: function handler() {\n        this.updateChart();\n      } //doesn't need to be a deep watch, because the whole object gets replaced\n    }\n  },\n  mounted: function mounted() {\n    var container = this.$refs.chart;\n\n    // activate highcharts plugins\n    exporting(highcharts);\n    exportData(highcharts);\n    seriesLabels(highcharts);\n    more(highcharts);\n    this.chart = new highcharts.Chart({\n      chart: {\n        renderTo: container,\n        type: 'area',\n        spacingBottom: 30\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: this.chartData.title\n      },\n      xAxis: {\n        tickmarkPlacement: 'on',\n        plotBands: [{\n          // mark the weekend\n          color: 'rgba(255,255,255,0.6)',\n          from: 2015,\n          to: 2019.91,\n          zIndex: 4\n        }],\n        title: {\n          enabled: false\n        },\n        tickInterval: 5 //5 years\n      },\n      yAxis: {\n        title: {\n          useHTML: true,\n          text: this.chartData.unit\n        }\n      },\n      tooltip: {\n        split: true,\n        formatter: function formatter() {\n          // The first returned item is the header, subsequent items are the\n          // points\n          var isNullstelle;\n          var res = ['<b>' + this.x + '</b>'].concat(this.points.map(function (point) {\n            // console.log('point ', point);\n            if (point.point && point.point.noTooltip) {\n              isNullstelle = true;\n              return false;\n            }\n            if (Number.isInteger(point.y)) {\n              return point.series.name + ': ' + point.y;\n            } else {\n              return point.series.name + ': ' + point.y.toFixed(2);\n            }\n          }));\n          if (isNullstelle) {\n            return false;\n          } else {\n            return res;\n          }\n        }\n      },\n      plotOptions: {\n        area: {\n          stacking: 'normal',\n          lineColor: '#666666',\n          lineWidth: 0,\n          connectNulls: true // important, otherwise the areas connecting to null values can be cut off\n        },\n        arearange: {\n          color: \"white\",\n          fillOpacity: 0.5,\n          enableMouseTracking: false\n        },\n        series: {\n          marker: {\n            enabled: false\n          },\n          pointStart: this.chartData.timeAxis ? this.chartData.timeAxis[0] : undefined\n        }\n      },\n      responsive: {\n        rules: [{\n          condition: {\n            maxWidth: 500\n          }\n        }]\n      },\n      exporting: {\n        menuItemDefinitions: {\n          // Custom definition\n          fixAxis: {\n            onclick: this.fixAxis,\n            text: 'Fixed axis'\n          },\n          freeAxis: {\n            onclick: this.freeAxis,\n            text: 'Auto axis'\n          }\n        },\n        buttons: {\n          contextButton: {\n            menuItems: [\"fixAxis\", \"freeAxis\", \"separator\", \"printChart\", \"separator\", \"downloadPNG\", \"downloadJPEG\", \"downloadPDF\", \"downloadSVG\", \"separator\", \"downloadCSV\", \"downloadXLS\"]\n          }\n        }\n      },\n      series: this.chartData.series\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n  }\n};",{"version":3,"sources":["StackedAreaChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"chart-container\">\n    <div class=\"chart\" :class=\"{'fixed-axis': axisFixed, 'free-axis': !axisFixed}\" ref=\"chart\"></div>\n  </div>\n</template>\n\n<script>\nimport chartFixFreeAxisMixin from '../mixins/chartFixFreeAxisMixin.js';\nimport chartUpdateAddSeriesMixin from '../mixins/chartUpdateAddSeriesMixin.js';\n\nimport highcharts from \"highcharts\";\nimport exporting from \"highcharts/modules/exporting\";\nimport exportData from \"highcharts/modules/export-data\";\nimport more from 'highcharts/highcharts-more';\n\n// https://api.highcharts.com/highcharts/plotOptions.series.label\n// Series labels are placed as close to the series as possible in a natural way, seeking to avoid other series.\n// The goal of this feature is to make the chart more easily readable, like if a human designer placed the labels in the optimal position.\nimport seriesLabels from \"highcharts/modules/series-label\";\n\nexport default {\n  name: 'StackedAreaChart',\n  mixins: [chartFixFreeAxisMixin, chartUpdateAddSeriesMixin],\n  props: ['chartData'], //chartData.title, chartData.timeAxis, chartData.series\n  data: function() {\n    return {\n      axisFixed: false\n    }\n  },\n  watch: {\n    chartData: {\n      handler() {\n        this.updateChart();\n      }\n      //doesn't need to be a deep watch, because the whole object gets replaced\n    }\n  },\n  mounted() {\n    var container = this.$refs.chart;\n\n    // activate highcharts plugins\n    exporting(highcharts);\n    exportData(highcharts);\n    seriesLabels(highcharts);\n    more(highcharts);\n\n    this.chart = new highcharts.Chart({\n      chart: {\n        renderTo: container,\n        type: 'area',\n        spacingBottom: 30\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: this.chartData.title\n      },\n      xAxis: {\n        tickmarkPlacement: 'on',\n        plotBands: [{ // mark the weekend\n          color: 'rgba(255,255,255,0.6)',\n          from: 2015,\n          to: 2019.91,\n          zIndex: 4\n        }],\n        title: {\n          enabled: false\n        },\n        tickInterval: 5 //5 years\n      },\n      yAxis: {\n        title: {\n          useHTML: true,\n          text: this.chartData.unit\n        }\n      },\n      tooltip: {\n        split: true,\n        formatter: function() {\n          // The first returned item is the header, subsequent items are the\n          // points\n          let isNullstelle;\n          let res = ['<b>' + this.x + '</b>'].concat(\n              this.points.map(function (point) {\n                // console.log('point ', point);\n                if(point.point && point.point.noTooltip) {\n                  isNullstelle = true;\n                  return false;\n                }\n                if(Number.isInteger(point.y)) {\n                  return point.series.name + ': ' + point.y;\n                } else {\n                  return point.series.name + ': ' + point.y.toFixed(2);\n                }\n              })\n          );\n\n          if(isNullstelle) {\n            return false;\n          } else {\n            return res;\n          }\n        }\n      },\n      plotOptions: {\n        area: {\n          stacking: 'normal',\n          lineColor: '#666666',\n          lineWidth: 0,\n          connectNulls: true, // important, otherwise the areas connecting to null values can be cut off\n        },\n        arearange: {\n          color: \"white\",\n          fillOpacity: 0.5,\n          enableMouseTracking: false\n        },\n        series: {\n          marker: {\n            enabled: false\n          },\n          pointStart: this.chartData.timeAxis ? this.chartData.timeAxis[0] : undefined\n        }\n      },\n      responsive: {\n        rules: [{\n          condition: {\n            maxWidth: 500\n          }\n        }]\n      },\n      exporting: {\n        menuItemDefinitions: {\n          // Custom definition\n          fixAxis: {\n            onclick: this.fixAxis,\n            text: 'Fixed axis'\n          },\n          freeAxis: {\n            onclick: this.freeAxis,\n            text: 'Auto axis'\n          }\n        },\n        buttons: {\n          contextButton: {\n            menuItems: [\n              \"fixAxis\",\n              \"freeAxis\",\n              \"separator\",\n              \"printChart\",\n              \"separator\",\n              \"downloadPNG\",\n              \"downloadJPEG\",\n              \"downloadPDF\",\n              \"downloadSVG\",\n              \"separator\",\n              \"downloadCSV\",\n              \"downloadXLS\"\n            ]\n          }\n        }\n      },\n      series: this.chartData.series\n    });\n  },\n  beforeDestroy() {\n    if(this.chart) {\n      this.chart.destroy();\n    }\n  },\n}\n</script>\n\n<style>\n</style>\n"],"sourceRoot":"src/charts"}]}