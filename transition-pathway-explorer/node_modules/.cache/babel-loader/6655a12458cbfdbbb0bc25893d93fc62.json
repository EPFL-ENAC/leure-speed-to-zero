{"remainingRequest":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/babel-loader/lib/index.js!/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/src/components/GroupLever.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/src/components/GroupLever.vue","mtime":1707210098268},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/PCalc/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234682968}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as dataService from \"../dataService.js\";\nimport * as inputsService from \"../inputsService.js\";\nimport * as helpers from \"../helpers.js\";\nexport default {\n  name: 'GroupLever',\n  props: ['groupid', 'range', 'country', 'appState', 'deactivated'],\n  data: function data() {\n    return {\n      buttonFromEmptyToFilled: false\n    };\n  },\n  computed: {\n    barWidth: function barWidth() {\n      //depends on another computed property\n      return this.value * 100 / this.range[this.range.length - 1];\n    },\n    partialWidth: function partialWidth() {\n      var val = (this.value % 1).toFixed(1) * 100;\n      return val === 0 ? 100 : val;\n    },\n    value: function value() {\n      var _this = this;\n      // triggers when this.country.values changes\n      var collected = [];\n      var group = inputsService.leverGroups[this.groupid];\n      group.levers.forEach(function (levId) {\n        // this.country.values is reactive, because it is part of selected, which is on data of App\n        // whenever this value changes, this computed property is marked for update\n        collected.push(_this.country.values[levId]);\n      });\n      if (collected.length) {\n        return Math.round(helpers.arrayAverage(collected) * 10) / 10;\n      }\n    }\n  },\n  methods: {\n    setIntValues: function setIntValues(step) {\n      if (this.value === step) {\n        return;\n      } else {\n        inputsService.setGroupValue(this.country, this.groupid, step);\n        //Desktop only\n        if (!this.appState.isMobile) {\n          dataService.rewriteURL(dataService.updateURLParams());\n          dataService.debouncedFetch();\n        }\n\n        // Mobile only\n        if (this.appState.isMobile) {\n          // send availability request\n          dataService.availabilityRequest();\n        }\n      }\n    },\n    stepClickFunc: function stepClickFunc(step) {\n      if (this.deactivated) {\n        return;\n      }\n      if (this.appState.noDecimalLevers) {\n        this.setIntValues(step);\n        return;\n      }\n      if (Math.ceil(this.value) !== step) {\n        if (this.value !== step) {\n          inputsService.setGroupValue(this.country, this.groupid, step);\n          //Desktop only\n          if (!this.appState.isMobile) {\n            dataService.rewriteURL(dataService.updateURLParams());\n            dataService.debouncedFetch();\n          }\n\n          // Mobile only\n          if (this.appState.isMobile) {\n            // send availability request\n            dataService.availabilityRequest();\n          }\n        }\n      } else {\n        var val = Math.round((this.value - 0.1) * 10) / 10;\n        val = val <= 1 ? 1 : val;\n        if (this.value !== val) {\n          inputsService.setGroupValue(this.country, this.groupid, val);\n          //Desktop only\n          if (!this.appState.isMobile) {\n            dataService.rewriteURL(dataService.updateURLParams());\n            dataService.debouncedFetch();\n          }\n\n          // Mobile only\n          if (this.appState.isMobile) {\n            // send availability request\n            dataService.availabilityRequest();\n          }\n        }\n      }\n    }\n  },\n  watch: {\n    //value is a computed property for GroupLevers\n    value: function value(newVal, oldVal) {\n      var _this2 = this;\n      if (Math.floor(newVal) > Math.floor(oldVal)) {\n        // triggers for oldVal = 1.5, newVal = 2.1\n        // doesn't trigger for oldVal = 1.5, newVal = 1.9\n\n        this.buttonFromEmptyToFilled = true;\n\n        //nextTick() is not enough. To make sure the change is visible, use window.requestAnimationFrame()\n        window.requestAnimationFrame(function () {\n          window.requestAnimationFrame(function () {\n            _this2.buttonFromEmptyToFilled = false;\n          });\n        });\n      }\n    }\n  }\n};",{"version":3,"sources":["GroupLever.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"single-lever group-lever\" :class=\"{'deactivated': deactivated}\">\n\n    <div v-for=\"step in range\" class=\"single-lever-step\" :key=\"step\">\n\n      <div class=\"single-lever-step-button\"\n        :class=\"{\n          empty: Math.ceil(value) <= step,\n          filled: Math.ceil(value) > step,\n          notrans: buttonFromEmptyToFilled,\n        }\"\n        v-on:click=\"stepClickFunc(step)\"\n      >\n        <span v-if=\"(Math.ceil(value) === step)\"\n          class=\"single-lever-step-partial\" :style=\"{width: partialWidth + '%'}\"\n        >\n        </span>\n      </div>\n    </div>\n\n    <div v-if=\"!appState.isMobile\" class=\"single-lever-value\"><span>{{value}}</span></div>\n\n  </div>\n</template>\n\n<script>\nimport * as dataService from '../dataService.js';\nimport * as inputsService from '../inputsService.js';\nimport * as helpers from '../helpers.js';\n\n\nexport default {\n  name: 'GroupLever',\n  props: ['groupid', 'range', 'country', 'appState', 'deactivated'],\n  data() {\n    return {\n      buttonFromEmptyToFilled: false\n    }\n  },\n  computed: {\n    barWidth: function() {\n      //depends on another computed property\n      return this.value*100/this.range[this.range.length-1];\n    },\n    partialWidth: function() {\n      let val = (this.value % 1).toFixed(1)*100;\n      return val === 0 ? 100 : val;\n    },\n    value: function() {\n      // triggers when this.country.values changes\n      let collected = [];\n      let group = inputsService.leverGroups[this.groupid];\n\n      group.levers.forEach((levId) => {\n        // this.country.values is reactive, because it is part of selected, which is on data of App\n        // whenever this value changes, this computed property is marked for update\n        collected.push(this.country.values[levId]);\n      });\n      if(collected.length) {\n        return Math.round( helpers.arrayAverage(collected) * 10) / 10;\n      }\n    }\n  },\n  methods: {\n    setIntValues(step) {\n      if(this.value === step) {\n        return;\n      } else {\n        inputsService.setGroupValue(this.country, this.groupid, step);\n        //Desktop only\n        if(!this.appState.isMobile) {\n          dataService.rewriteURL(dataService.updateURLParams());\n          dataService.debouncedFetch();\n        }\n\n        // Mobile only\n        if(this.appState.isMobile) {\n          // send availability request\n          dataService.availabilityRequest();\n        }\n      }\n    },\n    stepClickFunc(step) {\n      if(this.deactivated) {\n        return;\n      }\n      if(this.appState.noDecimalLevers) {\n        this.setIntValues(step);\n        return;\n      }\n\n      if(Math.ceil(this.value) !== step) {\n        if(this.value !== step) {\n          inputsService.setGroupValue(this.country, this.groupid, step);\n          //Desktop only\n          if(!this.appState.isMobile) {\n            dataService.rewriteURL(dataService.updateURLParams());\n            dataService.debouncedFetch();\n          }\n\n          // Mobile only\n          if(this.appState.isMobile) {\n            // send availability request\n            dataService.availabilityRequest();\n          }\n        }\n      } else {\n        let val = Math.round( (this.value-0.1) * 10) / 10;\n        val = val <= 1 ? 1 : val;\n        if(this.value !== val) {\n          inputsService.setGroupValue(this.country, this.groupid, val);\n          //Desktop only\n          if(!this.appState.isMobile) {\n            dataService.rewriteURL(dataService.updateURLParams());\n            dataService.debouncedFetch();\n          }\n\n          // Mobile only\n          if(this.appState.isMobile) {\n            // send availability request\n            dataService.availabilityRequest();\n          }\n        }\n      }\n    }\n  },\n  watch: {\n    //value is a computed property for GroupLevers\n    value: function(newVal, oldVal) {\n\n      if(Math.floor(newVal) > Math.floor(oldVal)) {\n        // triggers for oldVal = 1.5, newVal = 2.1\n        // doesn't trigger for oldVal = 1.5, newVal = 1.9\n\n        this.buttonFromEmptyToFilled = true;\n\n        //nextTick() is not enough. To make sure the change is visible, use window.requestAnimationFrame()\n        window.requestAnimationFrame(() => {\n          window.requestAnimationFrame(() => {\n            this.buttonFromEmptyToFilled = false;\n          });\n        });\n\n      }\n    }\n\n  }\n}\n</script>\n\n<style>\n.group-lever .single-lever-step-partial::after {\n  background-color: #6d6e71;\n}\n.group-lever .single-lever-step-button {\n  border: 1px solid #6d6e71;\n  background-color: #6d6e71;\n}\n</style>\n"],"sourceRoot":"src/components"}]}