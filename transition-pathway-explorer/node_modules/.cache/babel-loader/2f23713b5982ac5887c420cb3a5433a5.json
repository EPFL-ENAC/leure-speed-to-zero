{"remainingRequest":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/lib/Modal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/src/lib/Modal.vue","mtime":1707210098283},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/babel-loader/lib/index.js","mtime":1707234519797},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/cache-loader/dist/cjs.js","mtime":1707234519865},{"path":"/Users/paruta/2050-Calculators/EUcalc/paris-tool/transition-pathway-explorer/node_modules/vue-loader/lib/index.js","mtime":1707234519986}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'Modal',\n  props: ['closingCallback', 'hasCloseButton', 'isOpen', 'alwaysRendered'],\n  data: function data() {\n    return {\n      open: false\n    };\n  },\n  methods: {\n    openModal: function openModal() {\n      // called from outside of this component, not good practice\n      this.open = true;\n    },\n    closeModal: function closeModal() {\n      this.open = false;\n\n      if (this.closingCallback) {\n        this.closingCallback();\n      }\n    }\n  },\n  created: function created() {\n    if (this.isOpen) {\n      this.openModal();\n    }\n  },\n  watch: {\n    isOpen: function isOpen(newValue) {\n      if (newValue) {\n        this.openModal();\n      } else {\n        this.closeModal();\n      }\n    }\n  }\n};",{"version":3,"sources":["Modal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,eAAA;AACA,EAAA,IAAA,EAAA,OADA;AAEA,EAAA,KAAA,EAAA,CAAA,iBAAA,EAAA,gBAAA,EAAA,QAAA,EAAA,gBAAA,CAFA;AAGA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA,MAAA,IAAA,EAAA;AADA,KAAA;AAGA,GAPA;AAQA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA;AACA,WAAA,IAAA,GAAA,IAAA;AACA,KAJA;AAKA,IAAA,UALA,wBAKA;AACA,WAAA,IAAA,GAAA,KAAA;;AACA,UAAA,KAAA,eAAA,EAAA;AACA,aAAA,eAAA;AACA;AACA;AAVA,GARA;AAoBA,EAAA,OApBA,qBAoBA;AACA,QAAA,KAAA,MAAA,EAAA;AACA,WAAA,SAAA;AACA;AACA,GAxBA;AAyBA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA,gBAAA,QAAA,EAAA;AACA,UAAA,QAAA,EAAA;AACA,aAAA,SAAA;AACA,OAFA,MAEA;AACA,aAAA,UAAA;AACA;AACA;AAPA;AAzBA,CAAA","sourcesContent":["<template>\n<div>\n  <div v-if=\"alwaysRendered\">\n    <transition name=\"modal-fade\">\n\n      <!-- using v-show instead of v-if, so for instance the scroll position is kept between toggles -->\n      <div v-show=\"open\" class=\"modal\" v-on:click.self=\"closeModal\">\n        <div class=\"modal-content\">\n          <slot/>\n          <img v-if=\"hasCloseButton\" class=\"modal-close\" src=\"/img/close-round.svg\" v-on:click=\"closeModal\"/>\n        </div>\n      </div>\n    </transition>\n  </div>\n  <div v-if=\"!alwaysRendered\">\n    <transition name=\"modal-fade\">\n      <!-- using v-if here -->\n      <div v-if=\"open\" class=\"modal\" v-on:click.self=\"closeModal\">\n        <div class=\"modal-content\">\n          <slot/>\n          <img v-if=\"hasCloseButton\" class=\"modal-close\" src=\"/img/close-round.svg\" v-on:click=\"closeModal\"/>\n        </div>\n      </div>\n    </transition>\n  </div>\n</div>\n</template>\n\n<script>\n\nexport default {\n  name: 'Modal',\n  props: ['closingCallback', 'hasCloseButton', 'isOpen', 'alwaysRendered'],\n  data() {\n    return {\n      open: false\n    }\n  },\n  methods: {\n    openModal() {\n      // called from outside of this component, not good practice\n      this.open = true;\n    },\n    closeModal() {\n      this.open = false;\n      if(this.closingCallback) {\n        this.closingCallback();\n      }\n    }\n  },\n  created() {\n    if(this.isOpen) {\n      this.openModal();\n    }\n  },\n  watch: {\n    isOpen: function(newValue) {\n      if(newValue) {\n        this.openModal();\n      } else {\n        this.closeModal();\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.modal {\n  position: fixed;\n  bottom: 0px;\n  left: 0px;\n  width: 100vw;\n  height: 100%;\n  min-height: -webkit-fill-available;\n  background-color: rgba(0,0,0,0.35);\n  z-index: 9000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.modal-content {\n  flex: none;\n  width: calc(100% - 10px);\n  max-width: 900px;\n  height: calc(100% - 10px);\n  position: relative;\n  background-color: white;\n  box-sizing: border-box;\n  box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.5);\n}\n.modal-close {\n  display: block;\n  width: 20px;\n  position: absolute;\n  top: 8px;\n  right: 6px;\n  cursor: pointer;\n}\n\n</style>\n"],"sourceRoot":"src/lib"}]}